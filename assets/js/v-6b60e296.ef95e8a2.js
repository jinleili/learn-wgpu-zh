"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[6190],{5420:(e,n,t)=>{t.r(n),t.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-6b60e296","path":"/showcase/alignment/","title":"Memory Layout in WGSL","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"Alignment of vertex and index buffers","slug":"alignment-of-vertex-and-index-buffers","link":"#alignment-of-vertex-and-index-buffers","children":[]},{"level":2,"title":"Alignment of Uniform and Storage buffers","slug":"alignment-of-uniform-and-storage-buffers","link":"#alignment-of-uniform-and-storage-buffers","children":[]},{"level":2,"title":"How to deal with alignment issues","slug":"how-to-deal-with-alignment-issues","link":"#how-to-deal-with-alignment-issues","children":[]},{"level":2,"title":"Additional resources","slug":"additional-resources","link":"#additional-resources","children":[]}],"git":{"updatedTime":1664897838000},"filePathRelative":"showcase/alignment/README.md"}')},2179:(e,n,t)=>{t.r(n),t.d(n,{default:()=>p});var s=t(6252);const a=(0,s.uE)('<h1 id="memory-layout-in-wgsl" tabindex="-1"><a class="header-anchor" href="#memory-layout-in-wgsl" aria-hidden="true">#</a> Memory Layout in WGSL</h1><div class="warn"><p>This page is currently being reworked. I want to understand the topics a bit better, but as 0.12 is out I want to release what I have for now.</p></div><h2 id="alignment-of-vertex-and-index-buffers" tabindex="-1"><a class="header-anchor" href="#alignment-of-vertex-and-index-buffers" aria-hidden="true">#</a> Alignment of vertex and index buffers</h2><p>Vertex buffers require defining a <code>VertexBufferLayout</code>, so the memory alignment is whatever you tell WebGPU it should be. This can be really convenient for keeping down memory usage on the GPU.</p><p>The Index Buffer uses the alignment of whatever primitive type you specify via the <code>IndexFormat</code> you pass into <code>RenderEncoder::set_index_buffer()</code>.</p><h2 id="alignment-of-uniform-and-storage-buffers" tabindex="-1"><a class="header-anchor" href="#alignment-of-uniform-and-storage-buffers" aria-hidden="true">#</a> Alignment of Uniform and Storage buffers</h2><p>GPUs are designed to process thousands of pixels in parallel. In order to achieve this, some sacrifices had to be made. Graphics hardware likes to have all the bytes you intend on processing aligned by powers of 2. The exact specifics of why this is are beyond my level of knowledge, but it&#39;s important to know so that you can troubleshoot why your shaders aren&#39;t working.</p>',7),i=(0,s.uE)("<p>Let&#39;s take a look at the following table:</p><hr><table><thead><tr><th>Type</th><th>Alignment in Bytes</th><th>Size in Bytes</th></tr></thead><tbody><tr><td>scalar (i32, u32, f32)</td><td>4</td><td>4</td></tr><tr><td>vec2&lt;T&gt;</td><td>8</td><td>8</td></tr><tr><td>vec3&lt;T&gt;</td><td><strong>16</strong></td><td>12</td></tr><tr><td>vec4&lt;T&gt;</td><td>16</td><td>16</td></tr></tbody></table>",3),o=(0,s._)("code",null,"vec3",-1),l={href:"https://www.w3.org/TR/WGSL/#alignment-and-size",target:"_blank",rel:"noopener noreferrer"},r=(0,s.uE)('<div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token keyword">struct</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>\n    position<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So what&#39;s the alignment of this struct? Your first guess would be that it&#39;s the sum of the alignments of the individual fields. That might make sense if we were in Rust-land, but in shader-land, it&#39;s a little more involved. The alignment for a given struct is given by the following equation:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>// S is the struct in question\n// M is a member of the struct\nAlignOf(S) = max(AlignOfMember(S, M1), ... , AlignOfMember(S, Mn))\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Basically, the alignment of the struct is the maximum of the alignments of the members of the struct. This means that:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>AlignOf(Light) \n    = max(AlignOfMember(Light, position), AlignOfMember(Light, color))\n    = max(16, 16)\n    = 16\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is why the <code>LightUniform</code> has those padding fields. WGPU won&#39;t accept it if the data is not aligned correctly.</p><h2 id="how-to-deal-with-alignment-issues" tabindex="-1"><a class="header-anchor" href="#how-to-deal-with-alignment-issues" aria-hidden="true">#</a> How to deal with alignment issues</h2><p>In general, 16 is the max alignment you&#39;ll see. In that case, you might think that we should be able to do something like the following:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[repr(C, align(16))]</span>\n<span class="token attribute attr-name">#[derive(Debug, Copy, Clone, bytemuck::Pod, bytemuck::Zeroable)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">LightUniform</span> <span class="token punctuation">{</span>\n    position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',9),d={href:"https://docs.rs/bytemuck/",target:"_blank",rel:"noopener noreferrer"},u=(0,s.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --&gt; code/intermediate/tutorial10-lighting/src/main.rs:246:8\n    |\n246 | struct LightUniform {\n    |        ^^^^^^^^^^^^\n    |\n    = note: source type: `LightUniform` (256 bits)\n    = note: target type: `_::{closure#0}::TypeWithoutPadding` (192 bits)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="additional-resources" tabindex="-1"><a class="header-anchor" href="#additional-resources" aria-hidden="true">#</a> Additional resources</h2>',2),c={href:"https://gist.github.com/teoxoy/936891c16c2a3d1c3c5e7204ac6cd76c",target:"_blank",rel:"noopener noreferrer"},h={},p=(0,t(3744).Z)(h,[["render",function(e,n){const t=(0,s.up)("RouterLink"),h=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[a,(0,s.kq)(" The address of the position of an instance in memory has to be a multiple of its alignment. Normally alignment is the same as size. Exceptions are vec3, structs, and arrays. A vec3 is padded to be a vec4 which means it behaves as if it was a vec4 just that the last entry is not used. "),i,(0,s._)("p",null,[(0,s.Uk)("You can see for "),o,(0,s.Uk)(" the alignment is the next power of 2 from the size, 16. This can catch beginners (and even veterans) off guard as it's not the most intuitive. This becomes especially important when we start laying out structs. Take the light struct from the "),(0,s.Wm)(t,{to:"/intermediate/tutorial10-lighting/#seeing-the-light"},{default:(0,s.w5)((()=>[(0,s.Uk)("lighting tutorial")])),_:1}),(0,s.Uk)(":")]),(0,s._)("p",null,[(0,s.Uk)("You can see the full table of the alignments in section "),(0,s._)("a",l,[(0,s.Uk)("4.3.7.1 of the WGSL spec"),(0,s.Wm)(h)])]),r,(0,s._)("p",null,[(0,s.Uk)("But this won't compile. The "),(0,s._)("a",d,[(0,s.Uk)("bytemuck crate"),(0,s.Wm)(h)]),(0,s.Uk)(" doesn't work with structs with implicit padding bytes. Rust can't guarantee that the memory between the fields has been initialized properly. This gave me an error when I tried it:")]),u,(0,s._)("p",null,[(0,s.Uk)("If you're looking for more information check out the "),(0,s._)("a",c,[(0,s.Uk)("write-up"),(0,s.Wm)(h)]),(0,s.Uk)(" by @teoxoy.")])])}]])}}]);