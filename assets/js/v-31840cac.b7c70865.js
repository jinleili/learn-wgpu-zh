"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[9434],{6091:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-31840cac","path":"/intermediate/tutorial13-terrain/","title":"程序地形","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"计算着色器","slug":"计算着色器","link":"#计算着色器","children":[]},{"level":2,"title":"噪声函数","slug":"噪声函数","link":"#噪声函数","children":[]},{"level":2,"title":"生成网格","slug":"生成网格","link":"#生成网格","children":[]}],"git":{"updatedTime":1664270535000},"filePathRelative":"intermediate/tutorial13-terrain/README.md"}')},1334:(n,s,a)=>{a.r(s),a.d(s,{default:()=>en});var t=a(6252);const p=a.p+"assets/img/figure_no-fbm.4b1e6659.png",e=a.p+"assets/img/figure_fbm.24224480.png",o=a.p+"assets/img/figure_spiky.97a28c73.png",l=a.p+"assets/img/figure_work-groups.278667c2.jpg",c=(0,t.uE)('<h1 id="程序地形" tabindex="-1"><a class="header-anchor" href="#程序地形" aria-hidden="true">#</a> 程序地形</h1><p>到目前为止，我们一直在一个空旷的场景里渲染模型。如果只是想测试着色代码，这是非常好的，但大多数应用程序会想让屏幕上填充更多有趣的元素。 你可以用各种方法来处理此问题，比如，在 Blender 中创建一堆模型，然后把它们加载到场景中。如果你有一些像样的艺术技巧和一些耐心，这是很有效的方法。我在这两个方面都很欠缺，所以让我们通过代码来制作一些看起来不错的东西。</p><p>正如本文的名字所示，我们将创建一个<strong>地形</strong>（Terrain）。现在，创建地形网格的经典方法是使用预先生成的<strong>噪声纹理</strong>（Noise Texture），并对其进行采样，以获得网格中每个点的高度值。这是一个相当有效的方法，但我选择了直接使用计算着色器来生成噪声。让我们开始吧!</p><h2 id="计算着色器" tabindex="-1"><a class="header-anchor" href="#计算着色器" aria-hidden="true">#</a> 计算着色器</h2><p><strong>计算着色器</strong>（Compute Shader）允许你利用 GPU 的并行计算能力完成任意任务。虽然它也可以用于渲染任务，但通常用于与绘制三角形和像素没有直接关系的任务，比如，物理模拟、图像滤镜、创建程序纹理、运行神经网络等等。我稍后会详细介绍它们的工作原理，但现在只需用它们来为我们的地形创建顶点和索引缓冲区。</p><h2 id="噪声函数" tabindex="-1"><a class="header-anchor" href="#噪声函数" aria-hidden="true">#</a> 噪声函数</h2><p>让我们从计算着色器的代码开始，创建一个名为 <code>terrain.wgsl</code> 的新文件，在文件内先实现一个<strong>噪声函数</strong>（Noise Function），然后再创建着色器的入口函数。具体代码如下：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token comment">// ============================</span>\n<span class="token comment">// 地形生成</span>\n<span class="token comment">// ============================</span>\n\n<span class="token comment">// https://gist.github.com/munrocket/236ed5ba7e409b8bdf1ff6eca5dcdc39</span>\n<span class="token comment">//  MIT License. © Ian McEwan, Stefan Gustavson, Munrocket</span>\n<span class="token comment">// - Less condensed glsl implementation with comments can be found at https://weber.itn.liu.se/~stegu/jgt2012/article.pdf</span>\n\n<span class="token keyword">fn</span> <span class="token functions function">permute3</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token decimal-float-literal number">34.</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token decimal-float-literal number">1.</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">289.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token functions function">snoise2</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">f32</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.211324865405187</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.366025403784439</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token decimal-float-literal number">0.577350269189626</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.024390243902439</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token operator">=</span> <span class="token builtin">floor</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token builtin">dot</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">.</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> x0 <span class="token operator">=</span> v <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token builtin">dot</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">.</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// I flipped the condition here from &gt; to &lt; as it fixed some artifacting I was observing</span>\n  <span class="token keyword">var</span> i1<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token operator">=</span> <span class="token builtin">select</span><span class="token punctuation">(</span><span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">1.</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">1.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token decimal-float-literal number">0.</span>x <span class="token punctuation">&lt;</span> x<span class="token decimal-float-literal number">0.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> x12<span class="token punctuation">:</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token operator">=</span> x<span class="token decimal-float-literal number">0.</span>xyxy <span class="token operator">+</span> <span class="token class-name">C</span><span class="token punctuation">.</span>xxzz <span class="token operator">-</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  i <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">289.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function-calls function">permute3</span><span class="token punctuation">(</span><span class="token function-calls function">permute3</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.</span><span class="token punctuation">,</span> i<span class="token decimal-float-literal number">1.</span>y<span class="token punctuation">,</span> <span class="token decimal-float-literal number">1.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.</span><span class="token punctuation">,</span> i<span class="token decimal-float-literal number">1.</span>x<span class="token punctuation">,</span> <span class="token decimal-float-literal number">1.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> m<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.5</span> <span class="token operator">-</span>\n      <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token builtin">dot</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> x0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dot</span><span class="token punctuation">(</span>x<span class="token decimal-float-literal number">12.</span>xy<span class="token punctuation">,</span> x<span class="token decimal-float-literal number">12.</span>xy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dot</span><span class="token punctuation">(</span>x<span class="token decimal-float-literal number">12.</span>zw<span class="token punctuation">,</span> x<span class="token decimal-float-literal number">12.</span>zw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  m <span class="token operator">=</span> m <span class="token operator">*</span> m<span class="token punctuation">;</span>\n  m <span class="token operator">=</span> m <span class="token operator">*</span> m<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token decimal-float-literal number">2.</span> <span class="token operator">*</span> <span class="token builtin">fract</span><span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token class-name">C</span><span class="token punctuation">.</span>www<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token decimal-float-literal number">1.</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token decimal-float-literal number">0.5</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> ox <span class="token operator">=</span> <span class="token builtin">floor</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token decimal-float-literal number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> a0 <span class="token operator">=</span> x <span class="token operator">-</span> ox<span class="token punctuation">;</span>\n  m <span class="token operator">=</span> m <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token decimal-float-literal number">1.79284291400159</span> <span class="token operator">-</span> <span class="token decimal-float-literal number">0.85373472095314</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a0 <span class="token operator">*</span> a0 <span class="token operator">+</span> h <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span>a<span class="token decimal-float-literal number">0.</span>x <span class="token operator">*</span> x<span class="token decimal-float-literal number">0.</span>x <span class="token operator">+</span> h<span class="token punctuation">.</span>x <span class="token operator">*</span> x<span class="token decimal-float-literal number">0.</span>y<span class="token punctuation">,</span> a<span class="token decimal-float-literal number">0.</span>yz <span class="token operator">*</span> x<span class="token decimal-float-literal number">12.</span>xz <span class="token operator">+</span> h<span class="token punctuation">.</span>yz <span class="token operator">*</span> x<span class="token decimal-float-literal number">12.</span>yw<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token decimal-float-literal number">130.</span> <span class="token operator">*</span> <span class="token builtin">dot</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8),i=(0,t.Uk)("部分读者可能已经认出这是 Simplex 噪声（特别是 OpenSimplex 噪声）的一个实现。我承认没有真正理解 OpenSimplex 噪声背后的数学原理。它的基本原理类似于 Perlin 噪声，但不是一个正方形网格，而是六边形网格，这消除了在正方形网格上产生噪声的一些伪影。我也不是这方面的专家，所以总结一下："),u=(0,t._)("code",null,"permute3()",-1),k=(0,t.Uk)(" 接收一个 "),r=(0,t._)("code",null,"vec3",-1),d=(0,t.Uk)(" 并返回一个伪随机的 "),m=(0,t._)("code",null,"vec3",-1),b=(0,t.Uk)("，"),v=(0,t._)("code",null,"snoise2()",-1),f=(0,t.Uk)(" 接收一个 "),g=(0,t._)("code",null,"vec2",-1),w=(0,t.Uk)(" 并返回一个 [-1, 1] 之间的浮点数。如果你想了解更多关于噪声函数的信息，请查看"),_={href:"https://thebookofshaders.com/11/",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("这篇文章来自 The Book of Shaders"),h=(0,t.Uk)("。代码是用 GLSL 编写的，但概念是一样的。"),y=(0,t._)("p",null,[(0,t.Uk)("从下面的渲染结果可以看出，直接使用 "),(0,t._)("code",null,"snoise"),(0,t.Uk)(" 的输出来生成地形的高度值，地表往往过于平滑。虽然这可能就是你想要的，但它看起来不像是自然界的地形。")],-1),z=(0,t._)("p",null,[(0,t._)("img",{src:p,alt:"smooth terrain"})],-1),U=(0,t.Uk)("为了使地形更加粗糙，我们将使用一种叫做"),C={href:"https://thebookofshaders.com/13/",target:"_blank",rel:"noopener noreferrer"},S=(0,t.Uk)("分形布朗运动"),E=(0,t.Uk)("的技术。这种技术的工作原理是对噪声函数进行多次采样，每次将强度减半，同时将噪声的频率提高一倍。 这意味着地形的整体形状保持平滑，同时拥有更清晰的细节，得到的效果将是下面这样:"),T=(0,t.uE)('<p><img src="'+e+'" alt="more organic terrain"></p><p>这个函数的代码其实很简单：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token keyword">fn</span> <span class="token functions function">fbm</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">f32</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> NUM_OCTAVES<span class="token punctuation">:</span> <span class="token builtin">u32</span> <span class="token operator">=</span> <span class="token int-literal number">5u</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token decimal-float-literal number">0.01</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token decimal-float-literal number">0.0</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token decimal-float-literal number">0.5</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> shift <span class="token operator">=</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> cs <span class="token operator">=</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token builtin">cos</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">sin</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> rot <span class="token operator">=</span> <span class="token builtin">mat2x2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span>x<span class="token punctuation">,</span> cs<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">-</span>cs<span class="token punctuation">.</span>y<span class="token punctuation">,</span> cs<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token int-literal number">0u</span><span class="token punctuation">;</span> i<span class="token punctuation">&lt;</span>NUM_OCTAVES<span class="token punctuation">;</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token int-literal number">1u</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        v <span class="token operator">=</span> v <span class="token operator">+</span> a <span class="token operator">*</span> <span class="token function-calls function">snoise2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x <span class="token operator">=</span> rot <span class="token operator">*</span> x <span class="token operator">*</span> <span class="token decimal-float-literal number">2.0</span> <span class="token operator">+</span> shift<span class="token punctuation">;</span>\n        a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token decimal-float-literal number">0.5</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> v<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们稍微回顾一下：</p><ul><li><code>NUM_OCTAVES</code> 常数设定噪声级别。更高的级别将给地形网格增加更多的细节，但级别越高，得到的回报将递减，我发现 5 是一个好数字。</li><li><code>p</code> 乘以 <code>0.01</code> 用来“放大”噪声函数。这是因为我们的网格将是 1x1 的四边形，而 simplex 噪声函数在每步进一次时类似于白噪声。我们来看到直接使用 <code>p</code> 是什么样子的：<img src="'+o+'" alt="spiky terrain"></li><li><code>a</code> 变量是在给定的噪声级别下的噪声振幅。</li><li><code>shift</code> 和 <code>rot</code> 用于减少生成的噪声中的失真。其中一个失真现象是，在 <code>0,0</code> 处，无论你如何缩放 <code>p</code>，<code>snoise</code> 的输出都是一样的。</li></ul><h2 id="生成网格" tabindex="-1"><a class="header-anchor" href="#生成网格" aria-hidden="true">#</a> 生成网格</h2><p>为了生成地形网格，需要向着色器传递一些信息：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token keyword">struct</span> <span class="token class-name">ChunkData</span> <span class="token punctuation">{</span>\n    chunk_size<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">u32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    chunk_corner<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">i32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    min_max_height<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Vertex</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> position<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">1</span><span class="token punctuation">)</span> normal<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">VertexBuffer</span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">:</span> <span class="token builtin">array</span><span class="token punctuation">&lt;</span><span class="token class-name">Vertex</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// stride: 32</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">IndexBuffer</span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">:</span> <span class="token builtin">array</span><span class="token punctuation">&lt;</span><span class="token builtin">u32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">@</span><span class="token attributes attr-name">group</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> <span class="token punctuation">@</span><span class="token attributes attr-name">binding</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> <span class="token keyword">var</span><span class="token punctuation">&lt;</span><span class="token keyword">uniform</span><span class="token punctuation">&gt;</span> chunk_data<span class="token punctuation">:</span> <span class="token class-name">ChunkData</span><span class="token punctuation">;</span>\n<span class="token punctuation">@</span><span class="token attributes attr-name">group</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span><span class="token punctuation">@</span><span class="token attributes attr-name">binding</span><span class="token punctuation">(</span><span class="token int-literal number">1</span><span class="token punctuation">)</span> <span class="token keyword">var</span><span class="token punctuation">&lt;</span><span class="token keyword">storage</span><span class="token punctuation">,</span> read_write<span class="token punctuation">&gt;</span> vertices<span class="token punctuation">:</span> <span class="token class-name">VertexBuffer</span><span class="token punctuation">;</span>\n<span class="token punctuation">@</span><span class="token attributes attr-name">group</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span><span class="token punctuation">@</span><span class="token attributes attr-name">binding</span><span class="token punctuation">(</span><span class="token int-literal number">2</span><span class="token punctuation">)</span> <span class="token keyword">var</span><span class="token punctuation">&lt;</span><span class="token keyword">storage</span><span class="token punctuation">,</span> read_write<span class="token punctuation">&gt;</span> indices<span class="token punctuation">:</span> <span class="token class-name">IndexBuffer</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们传递给色器的 <code>uniform</code> 缓冲区，其中包括四边形网格的大小 <code>chunk_size</code>，噪声算法的起始点 <code>chunk_corner</code> ，以及地形的 <code>min_max_height</code>。</p><p>顶点和索引缓冲区作为 <code>storage</code> 缓冲区传入，并启用 <code>read_write</code> 访问模式来支持数据的读取与写入。我们将在 Rust 中创建这些缓冲区，并在执行计算着色器时将其绑定。</p><p>着色器的下一个部分是在网格上生成一个点，以及该点的一个顶点：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token keyword">fn</span> <span class="token functions function">terrain_point</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span>\n        p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>\n        <span class="token builtin">mix</span><span class="token punctuation">(</span>chunk_data<span class="token punctuation">.</span>min_max_height<span class="token punctuation">.</span>x<span class="token punctuation">,</span>chunk_data<span class="token punctuation">.</span>min_max_height<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token function-calls function">fbm</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token functions function">terrain_vertex</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Vertex</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function-calls function">terrain_point</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> tpx <span class="token operator">=</span> <span class="token function-calls function">terrain_point</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.1</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> tpz <span class="token operator">=</span> <span class="token function-calls function">terrain_point</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.0</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> tnx <span class="token operator">=</span> <span class="token function-calls function">terrain_point</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token decimal-float-literal number">0.1</span><span class="token punctuation">,</span> <span class="token decimal-float-literal number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> tnz <span class="token operator">=</span> <span class="token function-calls function">terrain_point</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span><span class="token decimal-float-literal number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token decimal-float-literal number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> pn <span class="token operator">=</span> <span class="token builtin">normalize</span><span class="token punctuation">(</span><span class="token builtin">cross</span><span class="token punctuation">(</span>tpz<span class="token punctuation">,</span> tpx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> nn <span class="token operator">=</span> <span class="token builtin">normalize</span><span class="token punctuation">(</span><span class="token builtin">cross</span><span class="token punctuation">(</span>tnz<span class="token punctuation">,</span> tnx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>pn <span class="token operator">+</span> nn<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token decimal-float-literal number">0.5</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token function-calls function">Vertex</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>terrain_point</code> 函数接收地形上的一个 XZ 点，并返回一个 <code>vec3</code>，其中 <code>y</code> 值在最小和最大高度之间。</p>',13),V=(0,t._)("code",null,"terrain_vertex",-1),M=(0,t.Uk)(" 使用 "),D=(0,t._)("code",null,"terrain_point",-1),L=(0,t.Uk)(" 来获得它的位置，同时通过对附近的 4 个点进行采样，并使用"),N={href:"https://www.khanacademy.org/math/multivariable-calculus/thinking-about-multivariable-function/x786f2022:vectors-and-matrices/a/cross-products-mvc",target:"_blank",rel:"noopener noreferrer"},O=(0,t.Uk)("叉积"),W=(0,t.Uk)("来计算顶点法线。"),G=(0,t.uE)('<div class="note"><p>你应该注意到了 <code>Vertex</code> 结构体不包括纹理坐标字段。我们可以通过使用顶点的 XZ 坐标，并让纹理采样器在 X 和 Y 轴上镜像纹理来轻松地创建纹理坐标，但以这种方式进行纹理采样时，高度图往往会有拉伸现象。</p><p>我们将在未来的教程中介绍一种叫做三平面映射的方法来给地形贴图。但现在我们只使用一个程序纹理，它将在渲染地形的片元着色器中被创建。</p></div><p>现在我们可以在地形表面获得一个实际的顶点数据，并用来填充顶点和索引缓冲区了。我们将创建一个 <code>gen_terrain()</code> 函数作为计算着色器的入口：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token punctuation">@</span><span class="token attributes attr-name">compute</span> <span class="token punctuation">@</span><span class="token attributes attr-name">workgroup_size</span><span class="token punctuation">(</span><span class="token int-literal number">64</span><span class="token punctuation">)</span>\n<span class="token keyword">fn</span> <span class="token functions function">gen_terrain</span><span class="token punctuation">(</span>\n    <span class="token punctuation">@</span><span class="token builtin-attribute"><span class="token attribute attr-name">builtin</span><span class="token punctuation">(</span><span class="token built-in-values attr-value">global_invocation_id</span><span class="token punctuation">)</span></span> gid<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">u32</span><span class="token punctuation">&gt;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// snipped...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@stage(compute)</code> 注释指定了 <code>gen_terrain</code> 是一个计算着色器入口。</p>',4),I={href:"https://www.w3.org/TR/WGSL/#attribute-workgroup_size",target:"_blank",rel:"noopener noreferrer"},B=(0,t._)("code",null,"workgroup_size()",-1),R=(0,t.Uk)(" 指定 GPU 可以为每个"),A=(0,t._)("strong",null,"工作组",-1),P=(0,t.Uk)("（workgroup）分配的一组调用，这一组调用会同时执行着色器入口函数，并共享对工作组地址空间中着色器变量的访问。 我们在编写计算着色器的时候指定工作组的大小，它有 3 个维度的参数，因为工作组是一个 3D 网格，但如果不指定它们，则默认为 1。 换句话说，"),X=(0,t._)("code",null,"workgroup_size(64)",-1),Z=(0,t.Uk)(" 相当于 "),j=(0,t._)("code",null,"workgroup_size(64, 1, 1)",-1),F=(0,t.Uk)("。"),J=(0,t._)("p",null,[(0,t._)("code",null,"global_invocation_id"),(0,t.Uk)(" 是一个 3D 索引。这可能看起来很奇怪，但你可以把工作组看作是工作组的 3D 网格。这些工作组有一个内部的工作者网格。"),(0,t._)("code",null,"global_invocation_id"),(0,t.Uk)(" 就是相对于所有其他工作组的当前工作者的 id。")],-1),Y=(0,t._)("p",null,"从视觉上看，工作组的网格看起来会是这样的：",-1),q=(0,t._)("p",null,[(0,t._)("img",{src:l,alt:"work group grid"})],-1),H={class:"note"},K=(0,t.uE)('<p>把计算着色器想象成一个在一堆嵌套的 for 循环中运行的函数，但每个循环都是并行执行的，这可能会有帮助。它看起来会像这样：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>for wgx in num_workgroups.x:\n    for wgy in num_workgroups.y:\n        for wgz in num_workgroups.z:\n            var local_invocation_id = (wgx, wgy, wgz)\n            for x in workgroup_size.x:\n                for y in workgroup_size.x:\n                    for z in workgroup_size.x:\n                        var global_invocation_id = local_invocation_id * workgroup_size + (x, y, z);\n                        gen_terrain(global_invocation_id)\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),Q=(0,t.Uk)("如果想了解更多关于工作组的信息"),$={href:"https://www.w3.org/TR/WGSL/#compute-shader-workgroups",target:"_blank",rel:"noopener noreferrer"},nn=(0,t.Uk)("请查看 WGSL 文档"),sn=(0,t.Uk)("。"),an=(0,t._)("p",null,"TODO:",-1),tn=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("Note changes to "),(0,t._)("code",null,"create_render_pipeline")]),(0,t._)("li",null,[(0,t.Uk)("Mention "),(0,t._)("code",null,"swizzle"),(0,t.Uk)(" feature for cgmath")]),(0,t._)("li",null,[(0,t.Uk)("Compare workgroups and workgroups sizes to nested for loops "),(0,t._)("ul",null,[(0,t._)("li",null,"Maybe make a diagram in blender?")])]),(0,t._)("li",null,"Change to camera movement speed")],-1),pn={},en=(0,a(3744).Z)(pn,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[c,(0,t._)("p",null,[i,u,k,r,d,m,b,v,f,g,w,(0,t._)("a",_,[x,(0,t.Wm)(a)]),h]),y,z,(0,t._)("p",null,[U,(0,t._)("a",C,[S,(0,t.Wm)(a)]),E]),T,(0,t._)("p",null,[V,M,D,L,(0,t._)("a",N,[O,(0,t.Wm)(a)]),W]),G,(0,t._)("p",null,[(0,t._)("a",I,[B,(0,t.Wm)(a)]),R,A,P,X,Z,j,F]),J,Y,q,(0,t._)("div",H,[K,(0,t._)("p",null,[Q,(0,t._)("a",$,[nn,(0,t.Wm)(a)]),sn])]),an,tn])}]])}}]);