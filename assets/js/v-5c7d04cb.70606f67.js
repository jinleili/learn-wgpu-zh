"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[8241],{764:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-5c7d04cb","path":"/integration-and-debugging/ios/","title":"🆕 与 iOS App 集成","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"添加 iOS 构建目标支持","slug":"添加-ios-构建目标支持","link":"#添加-ios-构建目标支持","children":[]},{"level":2,"title":"定义 FFI","slug":"定义-ffi","link":"#定义-ffi","children":[]},{"level":2,"title":"App 中加载 WgpuCanvas 对象","slug":"app-中加载-wgpucanvas-对象","link":"#app-中加载-wgpucanvas-对象","children":[]},{"level":2,"title":"编译与运行","slug":"编译与运行","link":"#编译与运行","children":[]}],"git":{"updatedTime":1664879542000},"filePathRelative":"integration-and-debugging/ios/README.md"}')},7298:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var e=a(6252);const p=a.p+"assets/img/lib.abd62fae.png",t=a.p+"assets/img/search.36be43a0.png",o=a.p+"assets/img/links.25133071.png",c=a.p+"assets/img/on_ios.5e1c30cf.png",i=(0,e.uE)('<h1 id="🆕-与-ios-app-集成" tabindex="-1"><a class="header-anchor" href="#🆕-与-ios-app-集成" aria-hidden="true">#</a> 🆕 与 iOS App 集成</h1><p>与 iOS App 集成相比于 Android 要简单一些。</p><h2 id="添加-ios-构建目标支持" tabindex="-1"><a class="header-anchor" href="#添加-ios-构建目标支持" aria-hidden="true">#</a> 添加 iOS 构建目标支持</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 添加 iOS 构建目标支持</span>\nrustup target <span class="token function">add</span> aarch64-apple-ios \n\n<span class="token comment"># 添加 iOS 模拟器构建目标支持</span>\n<span class="token comment"># Intel CPU Mac</span>\nrustup target <span class="token function">add</span> x86_64-apple-ios\n<span class="token comment"># M1+ Mac</span>\nrustup target <span class="token function">add</span> aarch64-apple-ios-sim\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于从 A7 芯片（iPhone 5S，iPad Mini 2） 开始，iPhone iPad 都是 64 位的设备，所以我们不需要 <code>armv7s-apple-ios</code>、 <code>armv7-apple-ios</code> 这两个构建目标。</p>',5),l={class:"note"},u=(0,e._)("h4",{id:"ios-模拟器相比于真机设备的特殊之处",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#ios-模拟器相比于真机设备的特殊之处","aria-hidden":"true"},"#"),(0,e.Uk)(" iOS 模拟器相比于真机设备的特殊之处")],-1),r=(0,e._)("p",null,[(0,e.Uk)("当运行 WebGPU 程序时，"),(0,e._)("strong",null,"模拟器"),(0,e.Uk)("并不会试图完全模拟你正在模拟的 iOS 设备的 GPU。例如，如果选择 iPhone 14 Pro 模拟器，它不会试图模拟 A16 GPU 的能力。相反，模拟器会翻译你的任何调用，并将它们引导到 Mac 主机上的选定 GPU。")],-1),d=(0,e._)("strong",null,"模拟器",-1),k={href:"https://developer.apple.com/documentation/metal/developing_metal_apps_that_run_in_simulator",target:"_blank",rel:"noopener noreferrer"},v=(0,e._)("p",null,"开发调试 GPU 应用，使用真机永远是最好的选择。",-1),m=(0,e._)("h2",{id:"定义-ffi",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#定义-ffi","aria-hidden":"true"},"#"),(0,e.Uk)(" 定义 FFI")],-1),b=(0,e._)("code",null,"CAMetalLayer",-1),w=(0,e._)("strong",null,"绘制表面",-1),g={href:"https://github.com/rust-windowing/raw-window-handle",target:"_blank",rel:"noopener noreferrer"},f=(0,e.uE)('<p>先给项目添加上必要的依赖：</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">target.&#39;cfg(target_os = &quot;ios&quot;)&#39;.dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">libc</span> <span class="token punctuation">=</span> <span class="token string">&quot;*&quot;</span>\n<span class="token key property">objc</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2.7&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义一个 <code>IOSViewObj</code> 结构体:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[repr(C)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">IOSViewObj</span> <span class="token punctuation">{</span>\n    <span class="token comment">// metal_layer 所在的 UIView 容器</span>\n    <span class="token comment">// UIView 有一系列方便的函数可供我们在 Rust 端来调用</span>\n    <span class="token keyword">pub</span> view<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">Object</span><span class="token punctuation">,</span>\n    <span class="token comment">// 指向 iOS 端 CAMetalLayer 的指针</span>\n    <span class="token keyword">pub</span> metal_layer<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> c_void<span class="token punctuation">,</span>\n    <span class="token comment">// 不同的 iOS 设备支持不同的屏幕刷新率，有时我们的 GPU 程序需要用到这类信息</span>\n    <span class="token keyword">pub</span> maximum_frames<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>\n    <span class="token comment">// 外部函数接口，用于给 iOS 端传递状态码</span>\n    <span class="token keyword">pub</span> callback_to_swift<span class="token punctuation">:</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#[repr(C)]</code> 属性标注 <code>IOSViewObj</code> 的内存布局兼容 C-ABI。</p><div class="note"><h4 id="什么是-abi" tabindex="-1"><a class="header-anchor" href="#什么是-abi" aria-hidden="true">#</a> 什么是 ABI？</h4><p>ABI 是⼀个规范，它涵盖以下内容： · 调⽤约定。⼀个函数的调⽤过程本质就是参数、函数、返回值如何传递。编译器按照调⽤规则去编译，把数据放到相应的堆栈中，函数的调⽤⽅和被调⽤⽅（函数本⾝）都需要遵循这个统⼀的约定。 · 内存布局。主要是⼤⼩和对齐⽅式。 · 处理器指令集。 · ⽬标⽂件和库的⼆进制格式。</p><h4 id="为什么使用-c-abi" tabindex="-1"><a class="header-anchor" href="#为什么使用-c-abi" aria-hidden="true">#</a> 为什么使用 C-ABI？</h4><p>不同的操作系统、编程语⾔、每种编程语⾔的不同编译器 实现基本都有⾃⼰规定或者遵循的 ABI 和调⽤规范。⽬前只能通过 FFI 技术遵循 C 语⾔ ABI 才可以做到编程语⾔的相互调⽤。也就是说，<strong>C-ABI</strong> 是唯⼀通⽤的稳定的标准 ABI。这是由历史原因决定的，C 语⾔伴随着操作系 统⼀路发展⽽来，导致其成为事实上的标准 ABI。</p></div><p>假设我们已经实现好了一个 wgpu 程序叫 WgpuCanvas, 现在来实现两个供 iOS 端调用的、控制 WgpuCanvas 初始化及帧渲染的函数:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[no_mangle]</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_wgpu_canvas</span><span class="token punctuation">(</span>ios_obj<span class="token punctuation">:</span> <span class="token class-name">IOSViewObj</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>c_void <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token class-name">WgpuCanvas</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AppSurface</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>ios_obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0_i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使用 Box 对 Rust 对象进行装箱操作。</span>\n    <span class="token comment">// 我们无法将 Rust 对象直接传递给外部语言，通过装箱来传递此对象的裸指针 </span>\n    <span class="token keyword">let</span> box_obj <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span>box_obj<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>c_void\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[no_mangle]</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">enter_frame</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>c_void<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 将指针转换为其指代的实际 Rust 对象，同时也拿回此对象的内存管理权</span>\n    <span class="token comment">// from_raw 是 unsafe 函数，它的调用需要放在 unsafe {} 块中</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> obj<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">WgpuCanvas</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>obj <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    obj<span class="token punctuation">.</span><span class="token function">enter_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 将 obj 对象的内存管理权重新转交给调用方</span>\n    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#[no_mangle]</code> 属性告诉 Rust 关闭函数名称修改功能。如果不加这个属性，Rust 编译器就会修改函数名，这是现代编译器为了解决唯⼀名称解析引起的各种问题所引⼊的技术。如果函数名被修改了，外部编程语言就⽆法按原名称调⽤，开发者也没办法知道修改后的函数名。</p><p>你应该已注意到了，上面的 <code>enter_frame(obj: *mut libc::c_void)</code> 函数里，我们做了两次内存管理权的转移，先是取回了内存管理权，后又再次转交给调用方。有没有办法避免这两次转移来提升性能呢？可以，直接从裸指针获取到对象的可变借用：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[no_mangle]</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">enter_frame</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>c_void<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 直接获取到指针指代的 Rust 对象的可变借用</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token punctuation">(</span>obj <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">WgpuCanvas</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    obj<span class="token punctuation">.</span><span class="token function">enter_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="note"><h4 id="unsafe-rust" tabindex="-1"><a class="header-anchor" href="#unsafe-rust" aria-hidden="true">#</a> Unsafe Rust</h4><p>Unsafe Rust 是 Safe Rust 的⼀个超集。也就是说，在 <code>unsafe {}</code> 块中，并不会禁⽤ Safe Rust 中的任何安全检查。它仅在进⾏以下五类操作时，不提供安全检查：</p><ul><li><strong>裸指针</strong>的解引⽤或类型转换;</li><li>调⽤ unsafe 的函数;</li><li>访问或修改可变静态变量;</li><li>实现 unsafe trait;</li><li>读写 Union 联合体中的字段;</li></ul><p><code>&amp;mut *(obj as *mut WgpuCanvas)</code> 之所以要放在 <code>unsafe {}</code> 块中，仅仅是因为 <code>obj</code> 参数是<strong>裸指针</strong>，是因为 Rust 在编译阶段的静态安全检查此时完全没有⽤武之地，所以也就没必要提供安全检查了。</p></div><p>还需要写一个简单的 C 语言的头文件来对应上面定义的结构体与函数。 让我们按照惯例，使用项目编译出来的 <code>.a</code> 库文件名称为此头文件命名：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">libwgpu_on_app_h</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">libwgpu_on_app_h</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>\n\n<span class="token comment">// 这个不透明结构体用来指代 Rust 端的 WgpuCanvas 对象</span>\n<span class="token keyword">struct</span> <span class="token class-name">wgpu_canvas</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 对应 Rust 端的 IOSViewObj 对象</span>\n<span class="token keyword">struct</span> <span class="token class-name">ios_view_obj</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token operator">*</span>view<span class="token punctuation">;</span>\n    <span class="token comment">// CAMetalLayer</span>\n    <span class="token keyword">void</span> <span class="token operator">*</span>metal_layer<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> maximum_frames<span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback_to_swift<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">wgpu_canvas</span> <span class="token operator">*</span><span class="token function">create_wgpu_canvas</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ios_view_obj</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">enter_frame</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">wgpu_canvas</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* libwgpu_on_app_h */</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面的头文件放置到 iOS 项目中。如果你的 iOS 项目是使用 Swift 创建的，则还需要将头文件引入到<strong>桥接文件</strong>（XXX-Bridging-Header.h）中：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">wgpu_test_Bridging_Header_h</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">wgpu_test_Bridging_Header_h</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;libwgpu_on_app.h&quot;</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* wgpu_test_Bridging_Header_h */</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-中加载-wgpucanvas-对象" tabindex="-1"><a class="header-anchor" href="#app-中加载-wgpucanvas-对象" aria-hidden="true">#</a> App 中加载 WgpuCanvas 对象</h2><p>先在 iOS 项目中自定义一个继承自 UIView 的 <code>MetalView</code>，代码很简单：</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">MetalView</span><span class="token punctuation">:</span> <span class="token class-name">UIView</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里将 View 的默认 Layer 指定为 CAMetalLayer</span>\n    <span class="token keyword">override</span> <span class="token keyword">class</span> <span class="token keyword">var</span> layerClass<span class="token punctuation">:</span> <span class="token class-name">AnyClass</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">CAMetalLayer</span><span class="token punctuation">.</span><span class="token keyword">self</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">awakeFromNib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">awakeFromNib</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">configLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">configLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>layer <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">CAMetalLayer</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        layer<span class="token punctuation">.</span>presentsWithTransaction <span class="token operator">=</span> <span class="token boolean">false</span>\n        layer<span class="token punctuation">.</span>framebufferOnly <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token comment">// nativeScale is real physical pixel scale</span>\n        <span class="token comment">// https://tomisacat.xyz/tech/2017/06/17/scale-nativescale-contentsscale.html</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>contentScaleFactor <span class="token operator">=</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>nativeScale\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 ViewController 中实例化 WgpuCanvas：</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// ...</span>\n<span class="token comment">// 我是通过 StoryBoard 绑定的 MetalView，当然，你也可以手动创建</span>\n<span class="token attribute atrule">@IBOutlet</span> <span class="token keyword">var</span> metalV<span class="token punctuation">:</span> <span class="token class-name">MetalView</span><span class="token operator">!</span>\n<span class="token comment">// 指向 Rust 端 WgpuCanvas 的指针</span>\n<span class="token keyword">var</span> wgpuCanvas<span class="token punctuation">:</span> <span class="token class-name">OpaquePointer</span><span class="token operator">?</span>\n<span class="token keyword">lazy</span> <span class="token keyword">var</span> displayLink<span class="token punctuation">:</span> <span class="token class-name">CADisplayLink</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token class-name">CADisplayLink</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>enterFrame<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidAppear</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> animated<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidAppear</span><span class="token punctuation">(</span>animated<span class="token punctuation">)</span>\n    <span class="token comment">// 我们需要保证 WgpuCanvas 只被实例化一次</span>\n    <span class="token keyword">if</span> wgpuCanvas <span class="token operator">==</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将 Swift 对象转换为裸指针</span>\n        <span class="token keyword">let</span> viewPointer <span class="token operator">=</span> <span class="token class-name">UnsafeMutableRawPointer</span><span class="token punctuation">(</span><span class="token class-name">Unmanaged</span><span class="token punctuation">.</span><span class="token function">passRetained</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>metalV<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> metalLayer <span class="token operator">=</span> <span class="token class-name">UnsafeMutableRawPointer</span><span class="token punctuation">(</span><span class="token class-name">Unmanaged</span><span class="token punctuation">.</span><span class="token function">passRetained</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>metalV<span class="token punctuation">.</span>layer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> maximumFrames <span class="token operator">=</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>maximumFramesPerSecond\n        \n        <span class="token comment">// 创建 IOSViewObj 实例</span>\n        <span class="token keyword">let</span> viewObj <span class="token operator">=</span> <span class="token function">ios_view_obj</span><span class="token punctuation">(</span>view<span class="token punctuation">:</span> viewPointer<span class="token punctuation">,</span> metal_layer<span class="token punctuation">:</span> metalLayer<span class="token punctuation">,</span>maximum_frames<span class="token punctuation">:</span> <span class="token class-name">Int32</span><span class="token punctuation">(</span>maximumFrames<span class="token punctuation">)</span><span class="token punctuation">,</span> callback_to_swift<span class="token punctuation">:</span> callback_to_swift<span class="token punctuation">)</span>\n        <span class="token comment">// 创建 WgpuCanvas 实例</span>\n        wgpuCanvas <span class="token operator">=</span> <span class="token function">create_wgpu_canvas</span><span class="token punctuation">(</span>viewObj<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>displayLink<span class="token punctuation">.</span>isPaused <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">enterFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">guard</span> <span class="token keyword">let</span> canvas <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>wgpuCanvas <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 执行 WgpuCanvas 帧渲染</span>\n    <span class="token function">enter_frame</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function-definition function">callback_to_swift</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token class-name">Int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// callback_to_swift 函数是在 WgpuCanvas 中被调用的，WgpuCanvas 的代码很可能没有运行在 iOS 的 UI 线程，</span>\n    <span class="token comment">// 如果此处涉及到 UI 操作，就必须切换到 UI 线程。</span>\n    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> arg <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译与运行" tabindex="-1"><a class="header-anchor" href="#编译与运行" aria-hidden="true">#</a> 编译与运行</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 编译为 iOS 真机支持的库</span>\n<span class="token comment"># debug 库</span>\n<span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-apple-ios\n<span class="token comment"># release 库</span>\n<span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-apple-ios <span class="token parameter variable">--release</span>\n\n<span class="token comment"># 编译为 iOS 模拟器支持的库</span>\n<span class="token comment"># M1+ Mac 上执行：</span>\n<span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-apple-ios-sim \n<span class="token comment"># Intel 芯片的 Mac 上执行：</span>\n<span class="token function">cargo</span> build <span class="token parameter variable">--target</span> x86_64-apple-ios\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开 iOS 项目，在项目的 <code>General</code> 选项卡下找到 <code>Frameworks, Libraries, and Embedded Content</code> 栏, 导入系统的 <code>livresolv.tbd</code> 及我们刚编译的 <code>.a</code> 库，此导入只需要操作一次：</p><img src="'+p+'"><p>然后在 <code>Build Settings</code> 选项卡下找到 <code>Search Paths</code> -&gt; <code>Library Search Paths</code> 栏， 将 <code>.a</code> 库的 debug 和 release 路径填到对应的字段中:</p><img src="'+t+'"><p>最后，还是在 <code>Build Settings</code> 选项卡下，找到 <code>Linking</code> -&gt; <code>Other Linker Flags</code> 栏，添加 <code>-ObjC</code>、<code>-lc++</code> 两个链接标记：</p><img src="'+o+'"><p>以上就是所有的关键代码和步骤了，我写了一个叫 wgpu-on-app 的示例程序，效果如下：</p><img src="'+c+'"><div class="github-link"><a href="https://github.com/jinleili/wgpu-on-app" target="_blank" rel="noopener noreferrer"> 查看 wgpu-on-app 完整项目源码！ </a></div>',32),y={},h=(0,a(3744).Z)(y,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[i,(0,e._)("div",l,[u,r,(0,e._)("p",null,[(0,e.Uk)("苹果为"),d,(0,e.Uk)("单独提供了一个设备对象，其功能被限制为苹果 GPU 家族的 Apple2 型号（也就是古早的 A8 芯片），这意味着模拟器往往比实际的 GPU 支持更少的功能或更多的限制。从"),(0,e._)("a",k,[(0,e.Uk)("这篇文档"),(0,e.Wm)(a)]),(0,e.Uk)(" 可以查看到功能限制的详情。")]),v]),m,(0,e._)("p",null,[(0,e.Uk)("在 iOS/macOS 上，使用 "),b,(0,e.Uk)(" 也能创建"),w,(0,e.Uk)("的实例，所以我们无须去实现 "),(0,e._)("a",g,[(0,e.Uk)("raw-window-handle"),(0,e.Wm)(a)]),(0,e.Uk)(" 抽象接口。")]),f])}]])}}]);