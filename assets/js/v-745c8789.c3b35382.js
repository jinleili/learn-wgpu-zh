"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[7183],{4177:(n,e,r)=>{r.r(e),r.d(e,{data:()=>t});const t=JSON.parse('{"key":"v-745c8789","path":"/integration-and-debugging/","title":"楔子","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[],"git":{"updatedTime":1665113828000},"filePathRelative":"integration-and-debugging/README.md"}')},2476:(n,e,r)=>{r.r(e),r.d(e,{default:()=>f});var t=r(6252);const i=(0,t._)("h1",{id:"楔子",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#楔子","aria-hidden":"true"},"#"),(0,t.Uk)(" 楔子")],-1),a=(0,t._)("p",null,[(0,t.Uk)("教程的开篇我们就已提到：wgpu 是基于 WebGPU 规范的"),(0,t._)("strong",null,"跨平台"),(0,t.Uk)("图形 API。也就是说，wgpu 不光能运行在 Web 及桌面环境里，更是能运行在 iOS、Android 两大移动操作系统上。")],-1),l=(0,t._)("strong",null,"绘制表面",-1),u={href:"https://github.com/rust-windowing/raw-window-handle",target:"_blank",rel:"noopener noreferrer"},p=(0,t._)("em",null,"可能需要",-1),d=(0,t._)("code",null,"CAMetalLayer",-1),o={href:"https://github.com/rust-windowing/winit",target:"_blank",rel:"noopener noreferrer"},g=(0,t._)("code",null,"raw-window-handle",-1),w=(0,t._)("strong",null,"包",-1),h=(0,t._)("strong",null,"App",-1),k=(0,t._)("strong",null,"事件循环",-1),s=(0,t._)("p",null,"毫无疑问，对于游戏类 App, 使用 wgpu + winit 的组合是非常合适的。但是，大量非游戏类 App 也经常有使用图形 API 的需求（比如，图表、图片滤镜等），这些 App 需要用到大量的系统 UI 组件及交互，winit 这种接管整个 App 窗口的方式是不合适的。所以，将 wgpu 集成到现有的 iOS、Android App 且不使用 winit 将非常有用。",-1),_=(0,t._)("p",null,"我们都知道，调试和分析是优化程序性能的必备技能。",-1),c=(0,t._)("p",null,[(0,t.Uk)("虽然 wgpu 会在运行时验证 API 调用及参数设置来保证只有有效的工作负载才能提交给 GPU 执行，但是，这并不能保证"),(0,t._)("strong",null,"渲染"),(0,t.Uk)("或"),(0,t._)("strong",null,"计算着色"),(0,t.Uk)("（Compute Shading）的正确性。本章中我们还会学习到如何利用调试工具来分析 wgpu 程序的性能及查找难以发现的错误！")],-1),U=(0,t._)("h4",{id:"加入-wgpu-微信学习群交流群",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#加入-wgpu-微信学习群交流群","aria-hidden":"true"},"#"),(0,t.Uk)(" 加入 wgpu 微信学习群交流群")],-1),A={},f=(0,r(3744).Z)(A,[["render",function(n,e){const r=(0,t.up)("ExternalLinkIcon"),A=(0,t.up)("JoinWeiChatGroup");return(0,t.wg)(),(0,t.iD)("div",null,[i,a,(0,t._)("p",null,[(0,t.Uk)("wgpu 的运行并不依赖于任何窗口程序，所以也不提供窗口的创建及管理功能，只有在创建基于窗口的"),l,(0,t.Uk)("（Surface）时，才可能需要一个实现了 "),(0,t._)("a",u,[(0,t.Uk)("raw-window-handle"),(0,t.Wm)(r)]),(0,t.Uk)(" 抽象接口的实参（之所以说是"),p,(0,t.Uk)("，是因为在 iOS/macOS 上，使用 "),d,(0,t.Uk)(" 也能创建绘制表面的实例）。 "),(0,t._)("a",o,[(0,t.Uk)("winit"),(0,t.Wm)(r)]),(0,t.Uk)(" 是一个实现了 "),g,(0,t.Uk)(" 抽象接口的、跨平台的窗口创建及管理"),w,(0,t.Uk)("（crate）。 在桌面端（macOS、Windows、Linux）及移动端（iOS、Android），winit 会接管整个 "),h,(0,t.Uk)(" （应用程序）的窗口管理（包括"),k,(0,t.Uk)("（Events loop））。")]),s,_,c,U,(0,t.Wm)(A)])}]])}}]);