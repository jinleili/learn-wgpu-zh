"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[70],{5783:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-82a25e06","path":"/beginner/tutorial5-textures/","title":"纹理和绑定组","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"加载图像文件","slug":"加载图像文件","link":"#加载图像文件","children":[]},{"level":2,"title":"填充数据到纹理中","slug":"填充数据到纹理中","link":"#填充数据到纹理中","children":[]},{"level":2,"title":"纹理视图与采样器","slug":"纹理视图与采样器","link":"#纹理视图与采样器","children":[]},{"level":2,"title":"绑定组","slug":"绑定组","link":"#绑定组","children":[]},{"level":2,"title":"管线布局","slug":"管线布局","link":"#管线布局","children":[]},{"level":2,"title":"修改 VERTICES 常量","slug":"修改-vertices-常量","link":"#修改-vertices-常量","children":[]},{"level":2,"title":"修改着色器","slug":"修改着色器","link":"#修改着色器","children":[]},{"level":2,"title":"渲染结果","slug":"渲染结果","link":"#渲染结果","children":[]},{"level":2,"title":"代码整理","slug":"代码整理","link":"#代码整理","children":[]},{"level":2,"title":"挑战","slug":"挑战","link":"#挑战","children":[]}],"git":{"updatedTime":1665039203000},"filePathRelative":"beginner/tutorial5-textures/README.md"}')},6535:(n,s,a)=>{a.r(s),a.d(s,{default:()=>G});var p=a(6252);const t=a.p+"assets/img/happy-tree.33b4526b.png",e=a.p+"assets/img/address_mode.42b9c817.png",c=a.p+"assets/img/upside-down.339a3f11.png",o=a.p+"assets/img/happy-tree-uv-coords.f9a04507.png",u=a.p+"assets/img/rightside-up.a56e3453.png",l=(0,p.uE)('<h1 id="纹理和绑定组" tabindex="-1"><a class="header-anchor" href="#纹理和绑定组" aria-hidden="true">#</a> 纹理和绑定组</h1><p>目前为止，我们一直在绘制简单的图形。当然可以只用三角形来做游戏，而试图绘制高精度的<strong>对象</strong>又会极大地限制能运行我们游戏的设备。不过，可以用 <strong>纹理</strong> 来解决此问题。</p><p><strong>纹理</strong>（Textures）是叠加在三角形<strong>网格</strong>（Mesh）上的图像，使其看起来有丰富的细节。有多种类型的纹理，如法线贴图（Normal Maps，也就是法线纹理）、凹凸贴图（Bump Maps）、镜面贴图和漫反射贴图。下边将讨论漫反射贴图，简单来说也就是颜色纹理。</p><h2 id="加载图像文件" tabindex="-1"><a class="header-anchor" href="#加载图像文件" aria-hidden="true">#</a> 加载图像文件</h2><p>要把一个图像<strong>映射</strong>到对象<strong>网格</strong>上，首先是需要有一个图像文件。就使用下边这棵快乐的小树吧：</p><p><img src="'+t+'" alt="一棵快乐的树"></p>',6),i={href:"https://docs.rs/image",target:"_blank",rel:"noopener noreferrer"},k=(0,p.uE)('<div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies.image</span><span class="token punctuation">]</span>\n<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.24&quot;</span>\n<span class="token key property">default-features</span> <span class="token punctuation">=</span> <span class="token boolean">false</span>\n<span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jpeg&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),r=(0,p._)("code",null,"image",-1),d={href:"https://docs.rs/rayon",target:"_blank",rel:"noopener noreferrer"},m=(0,p.uE)('<div class="note"><p>在 WASM 中解码 jpeg 性能不高。如果你想在 WASM 中加快图像加载速度，可以选择使用浏览器的内置解码器来替换 <code>wasm-bindgen</code> 构建时使用 的 <code>image</code>。这涉及到在 Rust 中创建一个 <code>&lt;img&gt;</code> 标记来获取图像，然后创建一个 <code>&lt;canvas&gt;</code> 来获取像素数据，我把这留作读者的练习。</p></div><p>在 <code>State</code> 的 <code>new()</code> 函数中，于 <code>surface.configure()</code> 之后添加以下代码：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>surface<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 新添加!</span>\n\n<span class="token keyword">let</span> diffuse_bytes <span class="token operator">=</span> <span class="token macro property">include_bytes!</span><span class="token punctuation">(</span><span class="token string">&quot;happy-tree.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> diffuse_image <span class="token operator">=</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token function">load_from_memory</span><span class="token punctuation">(</span>diffuse_bytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> diffuse_rgba <span class="token operator">=</span> diffuse_image<span class="token punctuation">.</span><span class="token function">to_rgba8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token class-name">GenericImageView</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dimensions <span class="token operator">=</span> diffuse_image<span class="token punctuation">.</span><span class="token function">dimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处代码从图像文件中读取<strong>字节</strong>，并将其加载到 image 对象中，然后转换为 rgba <strong>动态数组</strong>。我们还保存了图像的尺寸信息以便在创建实际纹理时使用。</p><p>现在我们来创建纹理：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> texture_size <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Extent3d</span> <span class="token punctuation">{</span>\n    width<span class="token punctuation">:</span> dimensions<span class="token number">.0</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> dimensions<span class="token number">.1</span><span class="token punctuation">,</span>\n    depth_or_array_layers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> diffuse_texture <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_texture</span><span class="token punctuation">(</span>\n    <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDescriptor</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 所有纹理都是以 3D 形式存储的，我们通过设置深度 1 来表示 2D 纹理</span>\n        size<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n        mip_level_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 后面会详细介绍此字段</span>\n        sample_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        dimension<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDimension</span><span class="token punctuation">::</span><span class="token constant">D2</span><span class="token punctuation">,</span>\n        <span class="token comment">// 大多数图像都是使用 sRGB 来存储的，我们需要在这里指定。</span>\n        format<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureFormat</span><span class="token punctuation">::</span><span class="token class-name">Rgba8UnormSrgb</span><span class="token punctuation">,</span>\n        <span class="token comment">// TEXTURE_BINDING 表示我们要在着色器中使用这个纹理。</span>\n        <span class="token comment">// COPY_DST 表示我们能将数据复制到这个纹理上。</span>\n        usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">TEXTURE_BINDING</span> <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_DST</span><span class="token punctuation">,</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;diffuse_texture&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="填充数据到纹理中" tabindex="-1"><a class="header-anchor" href="#填充数据到纹理中" aria-hidden="true">#</a> 填充数据到纹理中</h2><p><code>Texture</code> 结构体没有函数可以直接与数据交互。但我们可以使用之前创建的<strong>命令队列</strong>上的 <code>write_texture</code> 命令来填充纹理数据。下边是具体代码：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>queue<span class="token punctuation">.</span><span class="token function">write_texture</span><span class="token punctuation">(</span>\n    <span class="token comment">// 告诉 wgpu 从何处复制像素数据</span>\n    <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyTexture</span> <span class="token punctuation">{</span>\n        texture<span class="token punctuation">:</span> <span class="token operator">&amp;</span>diffuse_texture<span class="token punctuation">,</span>\n        mip_level<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        origin<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Origin3d</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">,</span>\n        aspect<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureAspect</span><span class="token punctuation">::</span><span class="token class-name">All</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 实际像素数据</span>\n    <span class="token operator">&amp;</span>diffuse_rgba<span class="token punctuation">,</span>\n    <span class="token comment">// 纹理的内存布局</span>\n    <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageDataLayout</span> <span class="token punctuation">{</span>\n        offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        bytes_per_row<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">NonZeroU32</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> dimensions<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        rows_per_image<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">NonZeroU32</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dimensions<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    texture_size<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',9),v={class:"note"},b=(0,p.uE)('<p>填充纹理数据的经典方式是将像素数据先复制到一个缓冲区，然后再从缓冲区复制到纹理中。使用 <code>write_texture</code> 更有效率，因为它少用了一个缓冲区 -- 不过这里还是介绍一下，以防读者有需要：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> buffer <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_buffer_init</span><span class="token punctuation">(</span>\n    <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span>util<span class="token punctuation">::</span></span><span class="token class-name">BufferInitDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;Temp Buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        contents<span class="token punctuation">:</span> <span class="token operator">&amp;</span>diffuse_rgba<span class="token punctuation">,</span>\n        usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_SRC</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_command_encoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">CommandEncoderDescriptor</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;texture_buffer_copy_encoder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nencoder<span class="token punctuation">.</span><span class="token function">copy_buffer_to_texture</span><span class="token punctuation">(</span>\n    <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyBuffer</span> <span class="token punctuation">{</span>\n        buffer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span>\n        offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        bytes_per_row<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token operator">*</span> dimensions<span class="token number">.0</span><span class="token punctuation">,</span>\n        rows_per_image<span class="token punctuation">:</span> dimensions<span class="token number">.1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyTexture</span> <span class="token punctuation">{</span>\n        texture<span class="token punctuation">:</span> <span class="token operator">&amp;</span>diffuse_texture<span class="token punctuation">,</span>\n        mip_level<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        array_layer<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        origin<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Origin3d</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    size<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nqueue<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>iter<span class="token punctuation">::</span></span><span class="token function">once</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),g=(0,p._)("code",null,"bytes_per_row",-1),f=(0,p.uE)('<h2 id="纹理视图与采样器" tabindex="-1"><a class="header-anchor" href="#纹理视图与采样器" aria-hidden="true">#</a> 纹理视图与采样器</h2><p>现在纹理中已经有了数据，我们需要一种方法来使用它。这，就是<strong>纹理视图</strong>（<code>TextureView</code>）和<strong>采样器</strong>（<code>Sampler</code>）的用处。</p><p><strong>纹理视图</strong>描述纹理及其关联的元数据。<strong>采样器</strong>控制纹理如何被 <em>采样</em>。采样工作类似于 GIMP/Photoshop 中的滴管工具。我们的程序在纹理上提供一个坐标（被称为 <em>纹理坐标</em> ），然后采样器根据纹理和一些内部参数返回相应的颜色。</p><p>现在我们来定义 <code>diffuse_texture_view</code> 和 <code>diffuse_sampler</code>：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// 我们不需要过多地配置纹理视图，所以使用 wgpu 的默认值。</span>\n<span class="token keyword">let</span> diffuse_texture_view <span class="token operator">=</span> diffuse_texture<span class="token punctuation">.</span><span class="token function">create_view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureViewDescriptor</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> diffuse_sampler <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_sampler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">SamplerDescriptor</span> <span class="token punctuation">{</span>\n    address_mode_u<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">AddressMode</span><span class="token punctuation">::</span><span class="token class-name">ClampToEdge</span><span class="token punctuation">,</span>\n    address_mode_v<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">AddressMode</span><span class="token punctuation">::</span><span class="token class-name">ClampToEdge</span><span class="token punctuation">,</span>\n    address_mode_w<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">AddressMode</span><span class="token punctuation">::</span><span class="token class-name">ClampToEdge</span><span class="token punctuation">,</span>\n    mag_filter<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">FilterMode</span><span class="token punctuation">::</span><span class="token class-name">Linear</span><span class="token punctuation">,</span>\n    min_filter<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">FilterMode</span><span class="token punctuation">::</span><span class="token class-name">Nearest</span><span class="token punctuation">,</span>\n    mipmap_filter<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">FilterMode</span><span class="token punctuation">::</span><span class="token class-name">Nearest</span><span class="token punctuation">,</span>\n    <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>address_mode_*</code> 参数指定了如果<strong>采样器</strong>得到的纹理坐标超出了纹理边界时该如何处理。我们有几个选项可供选择：</p><ul><li><code>ClampToEdge</code>：任何在纹理外的纹理坐标将返回离纹理边缘最近的像素的颜色。</li><li><code>Repeat</code>。当纹理坐标超过纹理的尺寸时，纹理将重复。</li><li><code>MirrorRepeat</code>。类似于<code>Repeat</code>，但图像在越过边界时将翻转。</li></ul><p><img src="'+e+'" alt="address_mode.png"></p><p><code>mag_filter</code> 与 <code>min_filter</code> 字段描述了当采样足迹小于或大于一个纹素（Texel）时该如何处理。当场景中的贴图远离或靠近 camera 时，这两个字段的设置通常会有效果。</p><p>有 2 个选项:</p><ul><li><code>Linear</code>：在每个维度中选择两个纹素，并在它们的值之间返回线性插值。</li><li><code>Nearest</code>：返回离纹理坐标最近的纹素的值。这创造了一个从远处看比较清晰但近处有像素的图像。然而，如果你的纹理被设计成像素化的，比如像素艺术游戏，或者像 Minecraft 这样的体素游戏，这可能是符合预期的。</li></ul><p>Mipmaps 是一个复杂的话题，需要在未来单独写一个章节。现在，我们可以说 <code>mipmap_filter</code> 的功能有点类似于 <code>(mag/min)_filter</code>，因为它告诉采样器如何在 mipmaps 之间混合。</p>',12),_={href:"https://docs.rs/wgpu/latest/wgpu/struct.SamplerDescriptor.html",target:"_blank",rel:"noopener noreferrer"},w=(0,p.uE)('<p>现在，我们需要用到 <code>BindGroup</code> 和 <code>PipelineLayout</code> 来将所有这些不同的资源都接入。</p><h2 id="绑定组" tabindex="-1"><a class="header-anchor" href="#绑定组" aria-hidden="true">#</a> 绑定组</h2><p><strong>绑定组</strong>（<code>BindGroup</code>）描述了一组资源以及如何通过着色器访问它们。我们先来创建一个<strong>绑定组布局</strong>（<code>BindGroupLayout</code>）：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> texture_bind_group_layout <span class="token operator">=</span>\n            device<span class="token punctuation">.</span><span class="token function">create_bind_group_layout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupLayoutDescriptor</span> <span class="token punctuation">{</span>\n                entries<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n                    <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupLayoutEntry</span> <span class="token punctuation">{</span>\n                        binding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                        visibility<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ShaderStages</span><span class="token punctuation">::</span><span class="token constant">FRAGMENT</span><span class="token punctuation">,</span>\n                        ty<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingType</span><span class="token punctuation">::</span><span class="token class-name">Texture</span> <span class="token punctuation">{</span>\n                            multisampled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                            view_dimension<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureViewDimension</span><span class="token punctuation">::</span><span class="token constant">D2</span><span class="token punctuation">,</span>\n                            sample_type<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureSampleType</span><span class="token punctuation">::</span><span class="token class-name">Float</span> <span class="token punctuation">{</span> filterable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        count<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupLayoutEntry</span> <span class="token punctuation">{</span>\n                        binding<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                        visibility<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ShaderStages</span><span class="token punctuation">::</span><span class="token constant">FRAGMENT</span><span class="token punctuation">,</span>\n                        <span class="token comment">// This should match the filterable field of the</span>\n                        <span class="token comment">// corresponding Texture entry above.</span>\n                        ty<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingType</span><span class="token punctuation">::</span><span class="token class-name">Sampler</span><span class="token punctuation">(</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">SamplerBindingType</span><span class="token punctuation">::</span><span class="token class-name">Filtering</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        count<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n                label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;texture_bind_group_layout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>texture_bind_group_layout</code> 有两个条目：一个是绑定到 0 资源槽的<strong>纹理</strong>，另一个是绑定到 1 资源槽的<strong>采样器</strong>。这两个绑定只对由 <code>visibility</code> 字段指定的片元着色器可见。这个字段的可选值是 <code>NONE</code>、<code>VERTEX</code>、<code>FRAGMENT</code> 或 <code>COMPUTE</code> 的任意按位或（<code>|</code>）组合。</p><p>现在使用<strong>绑定组布局</strong>（<code>texture_bind_group_layout</code>）来创建绑定组：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> diffuse_bind_group <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_bind_group</span><span class="token punctuation">(</span>\n    <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupDescriptor</span> <span class="token punctuation">{</span>\n        layout<span class="token punctuation">:</span> <span class="token operator">&amp;</span>texture_bind_group_layout<span class="token punctuation">,</span>\n        entries<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupEntry</span> <span class="token punctuation">{</span>\n                binding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                resource<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingResource</span><span class="token punctuation">::</span><span class="token class-name">TextureView</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>diffuse_texture_view<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupEntry</span> <span class="token punctuation">{</span>\n                binding<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                resource<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingResource</span><span class="token punctuation">::</span><span class="token class-name">Sampler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>diffuse_sampler<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;diffuse_bind_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看着这个，你可能会有一点似曾相识的感觉! 这是因为<strong>绑定组</strong>是<strong>绑定组布局</strong>的一个更具体的声明。它们分开的原因是，只要是共享同一个绑定组布局的绑定组，就能在运行时实时切换。创建的每个纹理和采样器都需要添加到一个绑定组中。为了达成目的，我们将为每个纹理创建一个新的绑定组。</p><p>让我们把 <code>diffuse_bind_group</code> 添加到 <code>State</code> 结构体中：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>\n    surface<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Surface</span><span class="token punctuation">,</span>\n    device<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Device</span><span class="token punctuation">,</span>\n    queue<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Queue</span><span class="token punctuation">,</span>\n    config<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">SurfaceConfiguration</span><span class="token punctuation">,</span>\n    size<span class="token punctuation">:</span> <span class="token namespace">winit<span class="token punctuation">::</span>dpi<span class="token punctuation">::</span></span><span class="token class-name">PhysicalSize</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    render_pipeline<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">RenderPipeline</span><span class="token punctuation">,</span>\n    vertex_buffer<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Buffer</span><span class="token punctuation">,</span>\n    index_buffer<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Buffer</span><span class="token punctuation">,</span>\n    num_indices<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n    diffuse_bind_group<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroup</span><span class="token punctuation">,</span> <span class="token comment">// 新添加!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保我们在 <code>new()</code> 函数中返回这个字段：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n            <span class="token comment">// ...</span>\n            <span class="token comment">// 新添加!</span>\n            diffuse_bind_group<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们来在 <code>render()</code> 函数中使用绑定组:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// render()</span>\n<span class="token comment">// ...</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_pipeline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>render_pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_bind_group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>diffuse_bind_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NEW!</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_vertex_buffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>vertex_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_index_buffer</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>index_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">IndexFormat</span><span class="token punctuation">::</span><span class="token class-name">Uint16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrender_pass<span class="token punctuation">.</span><span class="token function">draw_indexed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token keyword">self</span><span class="token punctuation">.</span>num_indices<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管线布局" tabindex="-1"><a class="header-anchor" href="#管线布局" aria-hidden="true">#</a> 管线布局</h2><p>还记得在<a href="/learn-wgpu-zh/beginner/tutorial3-pipeline#how-do-we-use-the-shaders">管线</a>章节创建的<strong>管线布局</strong>（<code>PipelineLayout</code>）吗？现在我们终于可以使用它了! 管线布局包含一个管线可以使用的<strong>绑定组布局</strong>的列表。修改 <code>render_pipeline_layout</code> 以使用 <code>texture_bind_group_layout</code>：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">let</span> render_pipeline_layout <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_pipeline_layout</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">PipelineLayoutDescriptor</span> <span class="token punctuation">{</span>\n            label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;Render Pipeline Layout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            bind_group_layouts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>texture_bind_group_layout<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 新添加!</span>\n            push_constant_ranges<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改-vertices-常量" tabindex="-1"><a class="header-anchor" href="#修改-vertices-常量" aria-hidden="true">#</a> 修改 VERTICES 常量</h2><p>对于 <code>Vertex</code> 的定义有几处需要修改。到目前为止，我们一直在使用 <code>color</code> 字段来设置网格颜色。现在我们要用 <code>tex_coords</code> 代替 <code>color</code>，这些坐标会被传递给采样器以获取<strong>纹素</strong>（Texel）的颜色。</p><p>由于 <code>tex_coords</code> 是二维的，需要修改这个字段的类型为两个浮点数的数组。</p><p>先来修改 <code>Vertex</code> 结构体：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[repr(C)]</span>\n<span class="token attribute attr-name">#[derive(Copy, Clone, Debug, bytemuck::Pod, bytemuck::Zeroable)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Vertex</span> <span class="token punctuation">{</span>\n    position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 新添加!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>VertexBufferLayout</code> 中反映这些变化：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Vertex</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">desc</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexBufferLayout</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>mem<span class="token punctuation">;</span>\n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexBufferLayout</span> <span class="token punctuation">{</span>\n            array_stride<span class="token punctuation">:</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vertex</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferAddress</span><span class="token punctuation">,</span>\n            step_mode<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexStepMode</span><span class="token punctuation">::</span><span class="token class-name">Vertex</span><span class="token punctuation">,</span>\n            attributes<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n                <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexAttribute</span> <span class="token punctuation">{</span>\n                    offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                    shader_location<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                    format<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexFormat</span><span class="token punctuation">::</span><span class="token class-name">Float32x3</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexAttribute</span> <span class="token punctuation">{</span>\n                    offset<span class="token punctuation">:</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferAddress</span><span class="token punctuation">,</span>\n                    shader_location<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                    format<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">VertexFormat</span><span class="token punctuation">::</span><span class="token class-name">Float32x2</span><span class="token punctuation">,</span> <span class="token comment">// NEW!</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，需要修改 <code>VERTICES</code>，用以下代码替换现有的定义：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// Changed</span>\n<span class="token keyword">const</span> <span class="token constant">VERTICES</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">Vertex</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0868241</span><span class="token punctuation">,</span> <span class="token number">0.49240386</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.4131759</span><span class="token punctuation">,</span> <span class="token number">0.99240386</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// A</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.49513406</span><span class="token punctuation">,</span> <span class="token number">0.06958647</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.0048659444</span><span class="token punctuation">,</span> <span class="token number">0.56958647</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// B</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.21918549</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.44939706</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.28081453</span><span class="token punctuation">,</span> <span class="token number">0.05060294</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// C</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.35966998</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.3473291</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.85967</span><span class="token punctuation">,</span> <span class="token number">0.1526709</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// D</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.44147372</span><span class="token punctuation">,</span> <span class="token number">0.2347359</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.9414737</span><span class="token punctuation">,</span> <span class="token number">0.7347359</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// E</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改着色器" tabindex="-1"><a class="header-anchor" href="#修改着色器" aria-hidden="true">#</a> 修改着色器</h2><p>有了新的 <code>Vertex</code> 结构体，现在是时候更新着色器了。首先需要将 <code>tex_coords</code> 传递给顶点着色器，然后将它们用于片元着色器，以便从采样器获得最终的颜色。让我们从顶点着色器开始：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token comment">// 顶点着色器</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">VertexInput</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> position<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">1</span><span class="token punctuation">)</span> tex_coords<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">VertexOutput</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">@</span><span class="token builtin-attribute"><span class="token attribute attr-name">builtin</span><span class="token punctuation">(</span><span class="token built-in-values attr-value">position</span><span class="token punctuation">)</span></span> clip_position<span class="token punctuation">:</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> tex_coords<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">@</span><span class="token attributes attr-name">vertex</span>\n<span class="token keyword">fn</span> <span class="token functions function">vs_main</span><span class="token punctuation">(</span>\n    model<span class="token punctuation">:</span> <span class="token class-name">VertexInput</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">VertexOutput</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> out<span class="token punctuation">:</span> <span class="token class-name">VertexOutput</span><span class="token punctuation">;</span>\n    out<span class="token punctuation">.</span>tex_coords <span class="token operator">=</span> model<span class="token punctuation">.</span>tex_coords<span class="token punctuation">;</span>\n    out<span class="token punctuation">.</span>clip_position <span class="token operator">=</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token decimal-float-literal number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> out<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在顶点着色器输出了 <code>tex_coords</code>，我们需要改变片元着色器来接收它们。有了这些坐标，就可以使用采样器从纹理中获取<strong>纹素</strong>的颜色了:</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token comment">// 片元着色器</span>\n\n<span class="token punctuation">@</span><span class="token attributes attr-name">group</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> <span class="token punctuation">@</span><span class="token attributes attr-name">binding</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> t_diffuse<span class="token punctuation">:</span> <span class="token builtin">texture_2d</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">@</span><span class="token attributes attr-name">group</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span><span class="token punctuation">@</span><span class="token attributes attr-name">binding</span><span class="token punctuation">(</span><span class="token int-literal number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> s_diffuse<span class="token punctuation">:</span> <span class="token builtin">sampler</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">@</span><span class="token attributes attr-name">fragment</span>\n<span class="token keyword">fn</span> <span class="token functions function">fs_main</span><span class="token punctuation">(</span>in<span class="token punctuation">:</span> <span class="token class-name">VertexOutput</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token builtin">textureSample</span><span class="token punctuation">(</span>t_diffuse<span class="token punctuation">,</span> s_diffuse<span class="token punctuation">,</span> in<span class="token punctuation">.</span>tex_coords<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',31),y=(0,p._)("code",null,"t_diffuse",-1),x=(0,p._)("code",null,"s_diffuse",-1),h=(0,p._)("code",null,"@group(x)",-1),T=(0,p._)("code",null,"set_bind_group()",-1),E=(0,p._)("code",null,"@binding(x)",-1),S=(0,p._)("strong",null,"绑定组布局",-1),q=(0,p._)("strong",null,"绑定组",-1),V=(0,p._)("code",null,"binding",-1),U=(0,p.uE)('<h2 id="渲染结果" tabindex="-1"><a class="header-anchor" href="#渲染结果" aria-hidden="true">#</a> 渲染结果</h2><p>现在运行我们的程序，将得到如下渲染效果：</p><p><img src="'+c+'" alt="an upside down tree on a hexagon"></p><p>很奇怪，我们的树是颠倒的! 这是因为 wgpu 的世界坐标的 Y 轴朝上，而纹理坐标的 Y 轴朝下。换句话说，纹理坐标中的（0，0）对应于图像的左上方，而（1，1）是右下方：</p><p><img src="'+o+'" alt="happy-tree-uv-coords.png"></p><p>我们可以通过将每个纹理坐标的 y 坐标替换为 <code>1 - y</code> 来得到纹理的正确朝向：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">const</span> <span class="token constant">VERTICES</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">Vertex</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n    <span class="token comment">// 修改后的</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0868241</span><span class="token punctuation">,</span> <span class="token number">0.49240386</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.4131759</span><span class="token punctuation">,</span> <span class="token number">0.00759614</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// A</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.49513406</span><span class="token punctuation">,</span> <span class="token number">0.06958647</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.0048659444</span><span class="token punctuation">,</span> <span class="token number">0.43041354</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// B</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.21918549</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.44939706</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.28081453</span><span class="token punctuation">,</span> <span class="token number">0.949397</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// C</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.35966998</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.3473291</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.85967</span><span class="token punctuation">,</span> <span class="token number">0.84732914</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// D</span>\n    <span class="token class-name">Vertex</span> <span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.44147372</span><span class="token punctuation">,</span> <span class="token number">0.2347359</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tex_coords<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.9414737</span><span class="token punctuation">,</span> <span class="token number">0.2652641</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// E</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们就把树正确地放在六边形上了:</p><p><img src="'+u+'" alt="our happy tree as it should be"></p><h2 id="代码整理" tabindex="-1"><a class="header-anchor" href="#代码整理" aria-hidden="true">#</a> 代码整理</h2>',10),D={href:"https://docs.rs/anyhow/",target:"_blank",rel:"noopener noreferrer"},B=(0,p._)("strong",null,"包",-1),C=(0,p._)("code",null,"Cargo.toml",-1),N=(0,p.uE)('<div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">image</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.23&quot;</span>\n<span class="token key property">cgmath</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.18&quot;</span>\n<span class="token key property">winit</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.26&quot;</span>\n<span class="token key property">env_logger</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.9&quot;</span>\n<span class="token key property">log</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4&quot;</span>\n<span class="token key property">pollster</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2&quot;</span>\n<span class="token key property">wgpu</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.13&quot;</span>\n<span class="token key property">bytemuck</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.4&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;derive&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>\n<span class="token key property">anyhow</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.0&quot;</span> <span class="token comment"># NEW!</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在一个名为 <code>src/texture.rs</code> 的新文件中，添加以下代码：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token class-name">GenericImageView</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">anyhow<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Texture</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> texture<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Texture</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> view<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureView</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> sampler<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Sampler</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Texture</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">from_bytes</span><span class="token punctuation">(</span>\n        device<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Device</span><span class="token punctuation">,</span>\n        queue<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Queue</span><span class="token punctuation">,</span>\n        bytes<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n        label<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token namespace">image<span class="token punctuation">::</span></span><span class="token function">load_from_memory</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n        <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">from_image</span><span class="token punctuation">(</span>device<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>img<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">from_image</span><span class="token punctuation">(</span>\n        device<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Device</span><span class="token punctuation">,</span>\n        queue<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Queue</span><span class="token punctuation">,</span>\n        img<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">image<span class="token punctuation">::</span></span><span class="token class-name">DynamicImage</span><span class="token punctuation">,</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> rgba <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">to_rgba8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> dimensions <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">dimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Extent3d</span> <span class="token punctuation">{</span>\n            width<span class="token punctuation">:</span> dimensions<span class="token number">.0</span><span class="token punctuation">,</span>\n            height<span class="token punctuation">:</span> dimensions<span class="token number">.1</span><span class="token punctuation">,</span>\n            depth_or_array_layers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> texture <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_texture</span><span class="token punctuation">(</span>\n            <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDescriptor</span> <span class="token punctuation">{</span>\n                label<span class="token punctuation">,</span>\n                size<span class="token punctuation">,</span>\n                mip_level_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                sample_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                dimension<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDimension</span><span class="token punctuation">::</span><span class="token constant">D2</span><span class="token punctuation">,</span>\n                format<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureFormat</span><span class="token punctuation">::</span><span class="token class-name">Rgba8UnormSrgb</span><span class="token punctuation">,</span>\n                usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">TEXTURE_BINDING</span> <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_DST</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        queue<span class="token punctuation">.</span><span class="token function">write_texture</span><span class="token punctuation">(</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyTexture</span> <span class="token punctuation">{</span>\n                aspect<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureAspect</span><span class="token punctuation">::</span><span class="token class-name">All</span><span class="token punctuation">,</span>\n                texture<span class="token punctuation">:</span> <span class="token operator">&amp;</span>texture<span class="token punctuation">,</span>\n                mip_level<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                origin<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Origin3d</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token operator">&amp;</span>rgba<span class="token punctuation">,</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageDataLayout</span> <span class="token punctuation">{</span>\n                offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                bytes_per_row<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">NonZeroU32</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> dimensions<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                rows_per_image<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>num<span class="token punctuation">::</span></span><span class="token class-name">NonZeroU32</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dimensions<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            size<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> view <span class="token operator">=</span> texture<span class="token punctuation">.</span><span class="token function">create_view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureViewDescriptor</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> sampler <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_sampler</span><span class="token punctuation">(</span>\n            <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">SamplerDescriptor</span> <span class="token punctuation">{</span>\n                address_mode_u<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">AddressMode</span><span class="token punctuation">::</span><span class="token class-name">ClampToEdge</span><span class="token punctuation">,</span>\n                address_mode_v<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">AddressMode</span><span class="token punctuation">::</span><span class="token class-name">ClampToEdge</span><span class="token punctuation">,</span>\n                address_mode_w<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">AddressMode</span><span class="token punctuation">::</span><span class="token class-name">ClampToEdge</span><span class="token punctuation">,</span>\n                mag_filter<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">FilterMode</span><span class="token punctuation">::</span><span class="token class-name">Linear</span><span class="token punctuation">,</span>\n                min_filter<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">FilterMode</span><span class="token punctuation">::</span><span class="token class-name">Nearest</span><span class="token punctuation">,</span>\n                mipmap_filter<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">FilterMode</span><span class="token punctuation">::</span><span class="token class-name">Nearest</span><span class="token punctuation">,</span>\n                <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token keyword">Self</span> <span class="token punctuation">{</span> texture<span class="token punctuation">,</span> view<span class="token punctuation">,</span> sampler <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="note"><p>注意，我们使用的是 <code>to_rgba8()</code> 而不是 <code>as_rgba8()</code>。PNG 使用 <code>as_rgba8()</code> 没问题，因为它们有一个 alpha 通道。但是 JPEG 没有 alpha 通道，如果我们试图在 JPEG 纹理图像上调用 <code>as_rgba8()</code>，代码就会陷入恐慌。相反，我们可以使用 <code>to_rgba8()</code> 来处理没有 alpha 通道的图像，它会生成一个新的图像缓冲区。</p></div><p>在 <code>lib.rs</code> 文件的顶部添加以下代码来将 <code>texture.rs</code> 作为一个模块导入：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">texture</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>new()</code> 函数中的纹理创建代码现在变得简化多了：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>surface<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> diffuse_bytes <span class="token operator">=</span> <span class="token macro property">include_bytes!</span><span class="token punctuation">(</span><span class="token string">&quot;happy-tree.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CHANGED!</span>\n<span class="token keyword">let</span> diffuse_texture <span class="token operator">=</span> <span class="token namespace">texture<span class="token punctuation">::</span></span><span class="token class-name">Texture</span><span class="token punctuation">::</span><span class="token function">from_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device<span class="token punctuation">,</span> <span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> diffuse_bytes<span class="token punctuation">,</span> <span class="token string">&quot;happy-tree.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CHANGED!</span>\n\n<span class="token comment">// 到 `let texture_bind_group_layout = ...` 行为止的所有代码现在都可以移除了。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们仍然需要单独存储<strong>绑定组</strong>，因为纹理无须知道绑定组的布局。修改创建 <code>diffuse_bind_group</code> 的过程以使用<code>diffuse_texture</code> 的 <code>view</code> 和 <code>sampler</code> 字段:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> diffuse_bind_group <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_bind_group</span><span class="token punctuation">(</span>\n    <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupDescriptor</span> <span class="token punctuation">{</span>\n        layout<span class="token punctuation">:</span> <span class="token operator">&amp;</span>texture_bind_group_layout<span class="token punctuation">,</span>\n        entries<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupEntry</span> <span class="token punctuation">{</span>\n                binding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                resource<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingResource</span><span class="token punctuation">::</span><span class="token class-name">TextureView</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>diffuse_texture<span class="token punctuation">.</span>view<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// CHANGED!</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupEntry</span> <span class="token punctuation">{</span>\n                binding<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                resource<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingResource</span><span class="token punctuation">::</span><span class="token class-name">Sampler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>diffuse_texture<span class="token punctuation">.</span>sampler<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// CHANGED!</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;diffuse_bind_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，需要更新 <code>State</code> 中的字段以使用全新 <code>Texture</code> 结构体，在未来的教程中还会用到它：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    diffuse_bind_group<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroup</span><span class="token punctuation">,</span>\n    diffuse_texture<span class="token punctuation">:</span> <span class="token namespace">texture<span class="token punctuation">::</span></span><span class="token class-name">Texture</span><span class="token punctuation">,</span> <span class="token comment">// NEW</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n            <span class="token comment">// ...</span>\n            num_indices<span class="token punctuation">,</span>\n            diffuse_bind_group<span class="token punctuation">,</span>\n            diffuse_texture<span class="token punctuation">,</span> <span class="token comment">// NEW</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过上边的整理，代码的工作方式还和以前一样，但我们现在有了一个更便利的方式来创建纹理。</p><h2 id="挑战" tabindex="-1"><a class="header-anchor" href="#挑战" aria-hidden="true">#</a> 挑战</h2><p>另创建一个纹理，并在你按下空格键时交替使用。</p>',16),R={},G=(0,a(3744).Z)(R,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon"),t=(0,p.up)("RouterLink"),e=(0,p.up)("WasmExample"),c=(0,p.up)("AutoGithubLink");return(0,p.wg)(),(0,p.iD)("div",null,[l,(0,p._)("p",null,[(0,p.Uk)("我们将使用 "),(0,p._)("a",i,[(0,p.Uk)("image 包"),(0,p.Wm)(a)]),(0,p.Uk)(" 来加载这棵树。先把它添加到依赖项中：")]),k,(0,p._)("p",null,[r,(0,p.Uk)(" 包含的 jpeg 解码器使用 "),(0,p._)("a",d,[(0,p.Uk)("rayon"),(0,p.Wm)(a)]),(0,p.Uk)(" 来加速线程的解码速度。WASM 目前不支持线程，所以我们需要禁用这一特性，这样代码在尝试加载网络上的 jpeg 时就不会崩溃。")]),m,(0,p._)("div",v,[b,(0,p._)("p",null,[(0,p.Uk)("值得注意的是 "),g,(0,p.Uk)(" 字段，这个值需要是 256 的倍数。查看 "),(0,p.Wm)(t,{to:"/beginner/showcase/gifs/#how-do-we-make-the-frames"},{default:(0,p.w5)((()=>[(0,p.Uk)("gif 教程")])),_:1}),(0,p.Uk)(" 以了解更多细节。")])]),f,(0,p._)("p",null,[(0,p.Uk)("其他字段使用了默认值。如果想了解字段详情，请查看 "),(0,p._)("a",_,[(0,p.Uk)("wgpu 文档"),(0,p.Wm)(a)]),(0,p.Uk)("。")]),w,(0,p._)("p",null,[(0,p.Uk)("变量 "),y,(0,p.Uk)(" 和 "),x,(0,p.Uk)(" 就是所谓的 uniforms。我们将在 "),(0,p.Wm)(t,{to:"/beginner/tutorial6-uniforms/"},{default:(0,p.w5)((()=>[(0,p.Uk)("相机部分")])),_:1}),(0,p.Uk)(" 中进一步讨论 uniforms。现在，我们需要知道的是，"),h,(0,p.Uk)(" 对应于 "),T,(0,p.Uk)(" 中的第一个参数，"),E,(0,p.Uk)(" 与我们创建"),S,(0,p.Uk)("和"),q,(0,p.Uk)("时指定的 "),V,(0,p.Uk)(" 值对应。")]),U,(0,p._)("p",null,[(0,p.Uk)("为方便起见，让我们把纹理代码放到自己的模块中。我们首先将 "),(0,p._)("a",D,[(0,p.Uk)("anyhow"),(0,p.Wm)(a)]),(0,p.Uk)(),B,(0,p.Uk)("添加到 "),C,(0,p.Uk)(" 文件中，以简化错误处理：")]),N,(0,p.Wm)(e,{example:"tutorial5_textures"}),(0,p.Wm)(c)])}]])}}]);