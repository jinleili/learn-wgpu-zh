"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[2259],{117:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s=JSON.parse('{"key":"v-b2a9f626","path":"/news/0.12/","title":"Update to 0.12!","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"Multi view added","slug":"multi-view-added","link":"#multi-view-added","children":[]},{"level":2,"title":"No more block attribute","slug":"no-more-block-attribute","link":"#no-more-block-attribute","children":[]},{"level":2,"title":"More validation","slug":"more-validation","link":"#more-validation","children":[]},{"level":2,"title":"Misc","slug":"misc","link":"#misc","children":[]}],"git":{"updatedTime":1663479331000},"filePathRelative":"news/0.12/readme.md"}')},3197:(n,e,a)=>{a.r(e),a.d(e,{default:()=>k});var s=a(6252);const t=(0,s.uE)('<h1 id="update-to-0-12" tabindex="-1"><a class="header-anchor" href="#update-to-0-12" aria-hidden="true">#</a> Update to 0.12!</h1><p>There are not a ton of changes in this release, so the migration wasn&#39;t too painful.</p><h2 id="multi-view-added" tabindex="-1"><a class="header-anchor" href="#multi-view-added" aria-hidden="true">#</a> Multi view added</h2><p>The <code>RenderPipelineDescriptor</code> now includes a <code>multiview</code> field that indicates the number of array textures if array textures are used as render attachments.</p><h2 id="no-more-block-attribute" tabindex="-1"><a class="header-anchor" href="#no-more-block-attribute" aria-hidden="true">#</a> No more block attribute</h2><p>The WGSL spec has changed and the <code>block</code> attribute is no longer a thing. This means that structs in WGSL no longer need to be annotated to be used as uniform input. For example:</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token punctuation">[</span><span class="token punctuation">[</span>block<span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">struct</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>\n    view_pos<span class="token punctuation">:</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    view_proj<span class="token punctuation">:</span> <span class="token builtin">mat4x4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be simplified to just</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token keyword">struct</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>\n    view_pos<span class="token punctuation">:</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    view_proj<span class="token punctuation">:</span> <span class="token builtin">mat4x4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="more-validation" tabindex="-1"><a class="header-anchor" href="#more-validation" aria-hidden="true">#</a> More validation</h2><p>Wgpu now has a validation error where if your uniform doesn&#39;t match the alignment specified in the shader, the program will crash when you go to draw:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>thread &#39;main&#39; panicked at &#39;wgpu error: Validation Error\n\nCaused by:\n    In a RenderPass\n      note: encoder = `Render Encoder`\n    In a draw command, indexed:true indirect:false\n      note: render pipeline = `Render Pipeline`\n    Buffer is bound with size 28 where the shader expects 32 in group[1] compact index 0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The only struct that I needed to change was the <code>LightUniform</code> struct. All I needed to do was add a padding field:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug, Copy, Clone, bytemuck::Pod, bytemuck::Zeroable)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">LightUniform</span> <span class="token punctuation">{</span>\n    position<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// Due to uniforms requiring 16 byte (4 float) spacing, we need to use a padding field here</span>\n    _padding<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// Due to uniforms requiring 16 byte (4 float) spacing, we need to use a padding field here</span>\n    _padding2<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I updated the <a href="../../intermediate/tutorial10-lighting">lighting tutorial</a> to reflect this change.</p><h2 id="misc" tabindex="-1"><a class="header-anchor" href="#misc" aria-hidden="true">#</a> Misc</h2>',16),i=(0,s.Uk)("Due to the recent deploy to "),o={href:"https://docs.rs/anyhow/latest/",target:"_blank",rel:"noopener noreferrer"},l=(0,s.Uk)("anyhow"),p=(0,s.Uk)(" that breaks glob imports (aka. "),d=(0,s._)("code",null,"use anyhow::*",-1),c=(0,s.Uk)("), I had to switch qualified imports and uses (ie. "),u=(0,s._)("code",null,"anyhow::Result",-1),r=(0,s.Uk)("). This was mostly an issue on my build scripts for some of the showcase examples."),h=(0,s._)("p",null,"The main tutorial examples weren't affected, and the changes are minor, so if you're curious feel free to look at the repo.",-1),m={},k=(0,a(3744).Z)(m,[["render",function(n,e){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[t,(0,s._)("p",null,[i,(0,s._)("a",o,[l,(0,s.Wm)(a)]),p,d,c,u,r]),h])}]])}}]);