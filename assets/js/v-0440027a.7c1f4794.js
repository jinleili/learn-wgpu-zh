"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[3176],{4687:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s=JSON.parse('{"key":"v-0440027a","path":"/news/pre-0.12/","title":"News (Pre 0.12)","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"Pong working on the web","slug":"pong-working-on-the-web","link":"#pong-working-on-the-web","children":[]},{"level":2,"title":"0.12 further changes to Surface","slug":"_0-12-further-changes-to-surface","link":"#_0-12-further-changes-to-surface","children":[]},{"level":2,"title":"Pong is fixed for 0.10","slug":"pong-is-fixed-for-0-10","link":"#pong-is-fixed-for-0-10","children":[]},{"level":2,"title":"0.10 SwapChain is dead, long live the Surface!","slug":"_0-10-swapchain-is-dead-long-live-the-surface","link":"#_0-10-swapchain-is-dead-long-live-the-surface","children":[]},{"level":2,"title":"Pong and imgui demos are fixed!","slug":"pong-and-imgui-demos-are-fixed","link":"#pong-and-imgui-demos-are-fixed","children":[]},{"level":2,"title":"0.8 and WGSL","slug":"_0-8-and-wgsl","link":"#_0-8-and-wgsl","children":[{"level":3,"title":"The GLSL shaders have been translated to WGSL","slug":"the-glsl-shaders-have-been-translated-to-wgsl","link":"#the-glsl-shaders-have-been-translated-to-wgsl","children":[]},{"level":3,"title":"Shaderc has been removed","slug":"shaderc-has-been-removed","link":"#shaderc-has-been-removed","children":[]},{"level":3,"title":"Some of the showcase examples are broken","slug":"some-of-the-showcase-examples-are-broken","link":"#some-of-the-showcase-examples-are-broken","children":[]},{"level":3,"title":"Various API changes","slug":"various-api-changes","link":"#various-api-changes","children":[]}]},{"level":2,"title":"0.7","slug":"_0-7","link":"#_0-7","children":[]},{"level":2,"title":"November 2020 Cleanup, Content Freeze, and Patreon","slug":"november-2020-cleanup-content-freeze-and-patreon","link":"#november-2020-cleanup-content-freeze-and-patreon","children":[]},{"level":2,"title":"0.6","slug":"_0-6","link":"#_0-6","children":[]},{"level":2,"title":"Added Pong Showcase","slug":"added-pong-showcase","link":"#added-pong-showcase","children":[]},{"level":2,"title":"Normal mapping","slug":"normal-mapping","link":"#normal-mapping","children":[]},{"level":2,"title":"0.5!","slug":"_0-5","link":"#_0-5","children":[]},{"level":2,"title":"Reworked lighting tutorial","slug":"reworked-lighting-tutorial","link":"#reworked-lighting-tutorial","children":[]},{"level":2,"title":"Added GIF showcase","slug":"added-gif-showcase","link":"#added-gif-showcase","children":[]},{"level":2,"title":"Updated texture tutorials","slug":"updated-texture-tutorials","link":"#updated-texture-tutorials","children":[]},{"level":2,"title":"Fixed panics due to not specifying the correct usage","slug":"fixed-panics-due-to-not-specifying-the-correct-usage","link":"#fixed-panics-due-to-not-specifying-the-correct-usage","children":[]},{"level":2,"title":"Updating Winit from 0.20.0-alpha5 to 0.20","slug":"updating-winit-from-0-20-0-alpha5-to-0-20","link":"#updating-winit-from-0-20-0-alpha5-to-0-20","children":[]},{"level":2,"title":"Changed tutorial examples to use a src directory","slug":"changed-tutorial-examples-to-use-a-src-directory","link":"#changed-tutorial-examples-to-use-a-src-directory","children":[]},{"level":2,"title":"Updating to 0.4 from 0.3","slug":"updating-to-0-4-from-0-3","link":"#updating-to-0-4-from-0-3","children":[]},{"level":2,"title":"New/Recent Articles","slug":"new-recent-articles","link":"#new-recent-articles","children":[]}],"git":{"updatedTime":1665123904000},"filePathRelative":"news/pre-0.12/readme.md"}')},3205:(e,a,n)=>{n.r(a),n.d(a,{default:()=>B});var s=n(6252);const t=n.p+"assets/img/normal_mapping_correct.4cf9ca06.png",o=(0,s._)("h1",{id:"news-pre-0-12",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#news-pre-0-12","aria-hidden":"true"},"#"),(0,s.Uk)(" News (Pre 0.12)")],-1),i=(0,s._)("h2",{id:"pong-working-on-the-web",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#pong-working-on-the-web","aria-hidden":"true"},"#"),(0,s.Uk)(" Pong working on the web")],-1),c=(0,s._)("p",null,"This took a little while to figure out. I ended up using wasm-pack to create the wasm as I was having trouble with getting wasm-bindgen to work. I figured it out eventually but decided to keep using wasm-pack as I felt that the workflow would be more friendly to readers.",-1),r=(0,s._)("p",null,"I would have released this sooner, but I wanted to add support for touch so that people on their phones could play the game. It appears that winit doesn't record touch events for WASM, so I shelved that idea.",-1),l=(0,s.uE)('<h2 id="_0-12-further-changes-to-surface" tabindex="-1"><a class="header-anchor" href="#_0-12-further-changes-to-surface" aria-hidden="true">#</a> 0.12 further changes to Surface</h2><p><code>SwapchainFrame</code> is no longer a thing. Instead <code>get_current_texture</code> will return a <code>SurfaceTexture</code> directly. This means that getting a frame to draw to looks somethings like this:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>surface<span class="token punctuation">.</span><span class="token function">get_current_texture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> view <span class="token operator">=</span> output\n    <span class="token punctuation">.</span>texture\n    <span class="token punctuation">.</span><span class="token function">create_view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureViewDescriptor</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another change is that you must call <code>SurfaceTexture::present()</code> after you submit your render command buffers to the <code>queue</code>. It goes something like this:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">self</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token namespace">iter<span class="token punctuation">::</span></span><span class="token function">once</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\noutput<span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',5),p={href:"https://github.com/gfx-rs/wgpu/blob/master/CHANGELOG.md#wgpu-011-2021-10-07",target:"_blank",rel:"noopener noreferrer"},d=(0,s.uE)('<h2 id="pong-is-fixed-for-0-10" tabindex="-1"><a class="header-anchor" href="#pong-is-fixed-for-0-10" aria-hidden="true">#</a> Pong is fixed for 0.10</h2><p>It wasn&#39;t actually that hard of a fix. I only really use the swapchain directly in the render module, and the only other change required me to include the <code>spirv</code> feature to wgpu in Cargo.toml.</p><h2 id="_0-10-swapchain-is-dead-long-live-the-surface" tabindex="-1"><a class="header-anchor" href="#_0-10-swapchain-is-dead-long-live-the-surface" aria-hidden="true">#</a> 0.10 SwapChain is dead, long live the Surface!</h2><p><code>SwapChain</code> and all related code has been removed from wgpu. All code pertaining to obtaining textures to draw to from the window will be available from the <code>Surface</code> instead. That means configuring <code>SurfaceTexture</code>s will look something like this:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">SurfaceConfiguration</span> <span class="token punctuation">{</span>\n    usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">RENDER_ATTACHMENT</span><span class="token punctuation">,</span>\n    format<span class="token punctuation">:</span> surface<span class="token punctuation">.</span><span class="token function">get_supported_formats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adapter<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n    present_mode<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">PresentMode</span><span class="token punctuation">::</span><span class="token class-name">Fifo</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nsurface<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Resizing the surface will use similar code:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">if</span> new_size<span class="token punctuation">.</span>width <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> new_size<span class="token punctuation">.</span>height <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>size <span class="token operator">=</span> new_size<span class="token punctuation">;</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>width <span class="token operator">=</span> new_size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>height <span class="token operator">=</span> new_size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>surface<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>device<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, getting a <code>SurfaceTexture</code> to draw to will use the surface directly.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>surface<span class="token punctuation">.</span><span class="token function">get_current_texture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> view <span class="token operator">=</span> output\n    <span class="token punctuation">.</span>texture\n    <span class="token punctuation">.</span><span class="token function">create_view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureViewDescriptor</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Pong and imgui examples are broken again. I may remove the imgui example as the corresponding crate already has examples of how to use it. I&#39;m also considering reworking the Pong example, but I may end up just updating it.</p><h2 id="pong-and-imgui-demos-are-fixed" tabindex="-1"><a class="header-anchor" href="#pong-and-imgui-demos-are-fixed" aria-hidden="true">#</a> Pong and imgui demos are fixed!</h2><p>The <code>imgui_wgpu</code> and <code>wgpu_glyph</code> crates have been updated to <code>wgpu</code> 0.8 so I was able to fix the demos! They both still use GLSL, and I don&#39;t think I&#39;ll be changing that for now. I may switch them over to <code>naga</code> at some point.</p><h2 id="_0-8-and-wgsl" tabindex="-1"><a class="header-anchor" href="#_0-8-and-wgsl" aria-hidden="true">#</a> 0.8 and WGSL</h2><h3 id="the-glsl-shaders-have-been-translated-to-wgsl" tabindex="-1"><a class="header-anchor" href="#the-glsl-shaders-have-been-translated-to-wgsl" aria-hidden="true">#</a> The GLSL shaders have been translated to WGSL</h3><p>Originally I wanted to wait until the WGSL spec fully stabilized, but due to some issues with the GLSL code, I&#39;ve decided to switch over the code now. While GLSL is supported by WebGPU, it&#39;s currently secondary to WGSL. I&#39;ll keep an example of how to use GLSL (and maybe add HLSL and Metal as well), but I&#39;m going to use WGSL from now on.</p><h3 id="shaderc-has-been-removed" tabindex="-1"><a class="header-anchor" href="#shaderc-has-been-removed" aria-hidden="true">#</a> Shaderc has been removed</h3><p>I&#39;ve been thinking about doing this for a while now. Because shaderc is a c library, it often has to be redownloaded during builds. This has been slowing down my ability to add new content and maintain old content. I had been considering switching to naga earlier, but some of my shaders (notably the lighting ones) weren&#39;t compiling with naga as I was using features not available for compatibility reasons (<code>inverse</code> is not available in all languages targeting spirv).</p><p>Since I needed to make a bunch of changes to the code base to make the glsl, and because I wanted to switch the tutorial to WGSL anyways, I decided to bite the bullet and recode everything in WGSL and remove shaderc from the tutorials.</p><h3 id="some-of-the-showcase-examples-are-broken" tabindex="-1"><a class="header-anchor" href="#some-of-the-showcase-examples-are-broken" aria-hidden="true">#</a> Some of the showcase examples are broken</h3><p>The <code>wgpu_glyph</code>, and <code>imgui-wgpu</code> crates currently depend on <code>wgpu</code> 0.7, which is causing the <code>pong</code> and <code>imgui-demo</code> to not compile. I decided to exclude them from the workspace until the underlying crates update to using <code>wgpu</code> 0.8. (Feel free to submit a issue or even PR when that happens!)</p><h3 id="various-api-changes" tabindex="-1"><a class="header-anchor" href="#various-api-changes" aria-hidden="true">#</a> Various API changes</h3><ul><li>The <code>depth</code> field is now <code>depth_or_array_layers</code></li><li><code>wgpu::VertexFormat::Float3</code> is now <code>wgpu::VertexFormat::Float32x3</code>. Similar things apply to <code>Float2</code> and <code>Float4</code></li><li><code>CullMode</code> is no longer a thing, instead <code>PrimitiveState::cull_mode</code> will require an <code>Option&lt;Face&gt;</code></li><li>Added <code>clamp_depth</code> and <code>conservative</code> to <code>PrimitiveState</code>. Part of this means that <code>DepthStencilState</code> no longer has a <code>clamp_depth</code> field.</li><li><code>color_blend</code> and <code>alpha_blend</code> have been moved into the new <code>blend</code> field with accepts an <code>Option&lt;wgpu::BlendState&gt;</code></li><li><code>adapter.get_preferred_format()</code> now returns an <code>Option&lt;wgpu::TextureFormat&gt;</code></li><li><code>wgpu::RenderPassColorAttachmentDescriptor</code> has been renamed <code>wgpu::RenderPassColorAttachement</code> and the <code>attachment</code> field has been renamed to <code>view</code></li><li><code>wgpu::RenderPassDepthStencialAttachmentDescriptor</code> also loses the <code>Descriptor</code> part of it&#39;s name. <code>attachment</code> gets renamed to <code>view</code> as well.</li><li><code>wgpu::TextureCopyView</code> has been renamed to <code>wgpu::ImageCopyTexture</code>. This is a typedef for <code>wgpu::ImageCopyTextureBase&lt;T&gt;</code></li><li><code>wgpu::TextureDataLayout</code> is now <code>wgpu::ImageDataLayout</code> and it&#39;s <code>bytes_per_row</code> and <code>rows_per_image</code> now take <code>NonZeroU32</code>.</li><li><code>wgpu::ImageCopyBuffer</code> is now <code>wgpu::ImageCopyBuffer</code>.</li></ul><h2 id="_0-7" tabindex="-1"><a class="header-anchor" href="#_0-7" aria-hidden="true">#</a> 0.7</h2>',23),u=(0,s._)("code",null,"RenderPipelineDescriptor",-1),h={href:"https://github.com/sotrh/learn-wgpu/pull/140",target:"_blank",rel:"noopener noreferrer"},g=(0,s.uE)('<h2 id="november-2020-cleanup-content-freeze-and-patreon" tabindex="-1"><a class="header-anchor" href="#november-2020-cleanup-content-freeze-and-patreon" aria-hidden="true">#</a> November 2020 Cleanup, Content Freeze, and Patreon</h2><p>School is starting to ramp up, so I haven&#39;t had as much time to work on the site as I would like to. Because of that, there were some issues piling up. I decided to tackle a bunch of them in one go. Here&#39;s a snapshot of what I did:</p><ul><li>The tutorial now handles <code>SurfaceError</code> properly</li><li>I&#39;m now using bytemuck&#39;s derive feature on all buffer data structs.</li><li>The <a href="../beginner/tutorial7-instancing">instancing tutorial</a> now uses vertex buffers instead of storage buffers.</li><li><code>build.rs</code> now updates when individual shaders are changed, not whenever <code>/src</code> is changed.</li><li>Had some help from Github user @kanerogers to clean up the <a href="../beginner/tutorial5-textures">texturing tutorial</a>.</li><li>I made a <a href="../showcase/compute">compute pipeline showcase</a> that computes the tangent and bitangent for each vertex in a model.</li><li>I made a <a href="../showcase/imgui-demo">imgui showcase</a>. It&#39;s very basic, but it should be a good starting point.</li></ul><p>Now in the headline, I mentioned a &quot;Content Freeze&quot;. Wgpu is still a moving target. The migration from <code>0.4</code> to <code>0.5</code> was a lot of work. The same goes for <code>0.5</code> to <code>0.6</code>. I expect the next migration to be just as much work. As such, I won&#39;t be adding much content until the API becomes a bit more stable. That being said, I still plan on resolving any issues with the content.</p>',4),k={href:"https://www.patreon.com/sotrh",target:"_blank",rel:"noopener noreferrer"},m=(0,s._)("h2",{id:"_0-6",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_0-6","aria-hidden":"true"},"#"),(0,s.Uk)(" 0.6")],-1),w=(0,s._)("code",null,"queue.write_buffer()",-1),f=(0,s._)("code",null,"queue.write_texture()",-1),b={href:"https://github.com/sotrh/learn-wgpu/pull/90",target:"_blank",rel:"noopener noreferrer"},v=(0,s._)("h2",{id:"added-pong-showcase",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#added-pong-showcase","aria-hidden":"true"},"#"),(0,s.Uk)(" Added Pong Showcase")],-1),_=(0,s.uE)('<h2 id="normal-mapping" tabindex="-1"><a class="header-anchor" href="#normal-mapping" aria-hidden="true">#</a> Normal mapping</h2><p>My perfectionism got in my way a bit with this one. I wasn&#39;t sure that what I was getting was &quot;physically accurate&quot;, but it seems to look good.</p><p><img src="'+t+'" alt=""></p><h2 id="_0-5" tabindex="-1"><a class="header-anchor" href="#_0-5" aria-hidden="true">#</a> 0.5!</h2>',4),y={href:"https://github.com/sotrh/learn-wgpu/pull/29",target:"_blank",rel:"noopener noreferrer"},x=(0,s._)("code",null,"Future",-1),I=(0,s._)("h2",{id:"reworked-lighting-tutorial",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#reworked-lighting-tutorial","aria-hidden":"true"},"#"),(0,s.Uk)(" Reworked lighting tutorial")],-1),U={href:"/intermediate/tutorial10-lighting/",target:"_blank",rel:"noopener noreferrer"},S=(0,s._)("h2",{id:"added-gif-showcase",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#added-gif-showcase","aria-hidden":"true"},"#"),(0,s.Uk)(" Added GIF showcase")],-1),T={href:"/showcase/gifs/",target:"_blank",rel:"noopener noreferrer"},C=(0,s._)("h2",{id:"updated-texture-tutorials",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#updated-texture-tutorials","aria-hidden":"true"},"#"),(0,s.Uk)(" Updated texture tutorials")],-1),W=(0,s._)("code",null,"texture.rs",-1),P={href:"/beginner/tutorial5-textures/#cleaning-things-up",target:"_blank",rel:"noopener noreferrer"},L=(0,s._)("h2",{id:"fixed-panics-due-to-not-specifying-the-correct-usage",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#fixed-panics-due-to-not-specifying-the-correct-usage","aria-hidden":"true"},"#"),(0,s.Uk)(" Fixed panics due to not specifying the correct "),(0,s._)("code",null,"usage")],-1),z=(0,s._)("code",null,"BufferUsages",-1),A=(0,s._)("code",null,"TextureUsages",-1),q={href:"/intermediate/windowless/",target:"_blank",rel:"noopener noreferrer"},G=(0,s._)("code",null,"texture_desc",-1),F=(0,s._)("code",null,"COPY_SRC",-1),R=(0,s._)("code",null,"texture",-1),N=(0,s._)("code",null,"OUTPUT_ATTACHMENT",-1),D=(0,s._)("h2",{id:"updating-winit-from-0-20-0-alpha5-to-0-20",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#updating-winit-from-0-20-0-alpha5-to-0-20","aria-hidden":"true"},"#"),(0,s.Uk)(" Updating Winit from 0.20.0-alpha5 to 0.20")],-1),E={href:"https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},M=(0,s.uE)('<ul><li>I&#39;ve removed <code>hidpi_factor</code> from <code>State</code> entirely. They removed the <code>hidpi_factor()</code> method from <code>winit::window::Window</code>, and changed <code>inner_size()</code> to return <code>PhysicalSize</code> instead of <code>LogicalSize</code>, so we don&#39;t need to store the <code>hidpi_factor</code> anymore.</li><li><code>update_hidpi_and_resize</code> is no more. Since <code>ScaleFactorChanged</code> passes in the windows new <code>PhysicalSize</code>, we can simply use <code>resize()</code>.</li><li><code>State::size</code> is now <code>PhysicalSize&lt;u32&gt;</code> instead of the pre 0.20 <code>LogicalSize</code>.</li><li><code>EventsCleared</code> is now <code>MainEventsCleared</code>.</li></ul><p>I may have missed a change, but I made sure that all the examples compile and run, so if you have trouble with your code you can use them as a reference.</p><h2 id="changed-tutorial-examples-to-use-a-src-directory" tabindex="-1"><a class="header-anchor" href="#changed-tutorial-examples-to-use-a-src-directory" aria-hidden="true">#</a> Changed tutorial examples to use a src directory</h2><p>I wasn&#39;t using the traditional cargo binary folder setup. I&#39;ve changed it to the standardized form now.</p><h2 id="updating-to-0-4-from-0-3" tabindex="-1"><a class="header-anchor" href="#updating-to-0-4-from-0-3" aria-hidden="true">#</a> Updating to 0.4 from 0.3</h2><p>There are a few things that have changed:</p><ol><li>The use of <code>Instance</code> has been removed. Creating a <code>Surface</code> and requesting an <code>Adapter</code> are done as follows.</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> surface <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Surface</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> adapter <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Adapter</span><span class="token punctuation">::</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">RequestAdapterOptions</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// needs to be unwrapped</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>The <code>request_device</code> method now returns a <code>(Device, Queue)</code> tuple. This means that you can borrow the <code>Queue</code> mutably while using the <code>Device</code> immutably. Because of this change, submitting <code>CommandBuffer</code>s to the queue uses the <code>submit</code> method on the <code>Queue</code> directly.</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">self</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>\n    encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>The <code>create</code> method on <code>Surface</code> takes in any struct that implements the <code>HasRawWindow</code> trait, instead of a <code>RawWindowHandle</code>. This means that the <code>raw-window-handle = &quot;0.3&quot;</code> line in <code>Cargo.toml</code> is no longer needed.</li></ol><p>I don&#39;t know if this is a change from 0.4, but you use <code>wgpu = &quot;0.4&quot;</code> line in dependencies instead of the <code>[dependencies.wgpu]</code> as wgpu will determine the best back end for you.</p><h2 id="new-recent-articles" tabindex="-1"><a class="header-anchor" href="#new-recent-articles" aria-hidden="true">#</a> New/Recent Articles</h2>',13),O={},B=(0,n(3744).Z)(O,[["render",function(e,a){const n=(0,s.up)("RouterLink"),t=(0,s.up)("ExternalLinkIcon"),O=(0,s.up)("RecentArticles");return(0,s.wg)(),(0,s.iD)("div",null,[o,i,c,r,(0,s._)("p",null,[(0,s.Uk)("If you want to check out the demo, just head over to "),(0,s.Wm)(n,{to:"/news/showcase/pong/#wasm-support"},{default:(0,s.w5)((()=>[(0,s.Uk)("the write up")])),_:1})]),l,(0,s._)("p",null,[(0,s.Uk)("There are a good deal of internal changes such as WebGL support (which I really need to cover). You can check out more on wgpu's "),(0,s._)("a",p,[(0,s.Uk)("changelog"),(0,s.Wm)(t)]),(0,s.Uk)(".")]),d,(0,s._)("p",null,[(0,s.Uk)("There were a lot of changes, particularly to the "),u,(0,s.Uk)(". Most other things have not changed. You can check out the "),(0,s._)("a",h,[(0,s.Uk)("0.9 PR"),(0,s.Wm)(t)]),(0,s.Uk)(" for the full details.")]),g,(0,s._)("p",null,[(0,s.Uk)("One more thing. This is actually quite awkward for me (especially since I'll be slowing down development), but I've started a "),(0,s._)("a",k,[(0,s.Uk)("patreon"),(0,s.Wm)(t)]),(0,s.Uk)(". My job doesn't give me a ton of hours, so things are a bit tight. You are by no means obligated to donate, but I would appreciate it.")]),(0,s._)("p",null,[(0,s.Uk)("You can find out more about contributing to this project on the "),(0,s.Wm)(n,{to:"/news/#contribution-and-support"},{default:(0,s.w5)((()=>[(0,s.Uk)("introduction page")])),_:1})]),m,(0,s._)("p",null,[(0,s.Uk)("This took me way too long. The changes weren't difficult, but I had to do a lot of copy pasting. The main changes are using "),w,(0,s.Uk)(" and "),f,(0,s.Uk)(" everywhere. I won't get into the nitty gritty, but you can check out the "),(0,s._)("a",b,[(0,s.Uk)("pull request"),(0,s.Wm)(t)]),(0,s.Uk)(" if you're interested.")]),v,(0,s._)("p",null,[(0,s.Wm)(n,{to:"/news/showcase/pong/"},{default:(0,s.w5)((()=>[(0,s.Uk)("See it here")])),_:1})]),_,(0,s._)("p",null,[(0,s.Uk)("Too many things changed to make note of them here. Check out "),(0,s._)("a",y,[(0,s.Uk)("the 0.5 pull request"),(0,s.Wm)(t)]),(0,s.Uk)(" if you're curious about specifics. That being said, 2 things are worth mentioning directly: the y-axis now points up like with DirectX and Metal, and requesting an adapter and creating a device now use "),x,(0,s.Uk)("s. The tutorials have been updated as well as the code.")]),I,(0,s._)("p",null,[(0,s.Uk)("The "),(0,s._)("a",U,[(0,s.Uk)("lighting tutorial"),(0,s.Wm)(t)]),(0,s.Uk)(" was not up to par, so I redid it.")]),S,(0,s._)("p",null,[(0,s._)("a",T,[(0,s.Uk)("Creating GIFs"),(0,s.Wm)(t)])]),C,(0,s._)("p",null,[(0,s.Uk)("Up to this point, we created textures manually every time. I've pulled out the texture creation code into a new "),W,(0,s.Uk)(" file and included it in every tutorial from the "),(0,s._)("a",P,[(0,s.Uk)("textures tutorial"),(0,s.Wm)(t)]),(0,s.Uk)(" onward.")]),L,(0,s._)("p",null,[(0,s.Uk)("Wgpu has become more strict about what "),z,(0,s.Uk)("s and "),A,(0,s.Uk)("s are required when performing certain operations. For example in the "),(0,s._)("a",q,[(0,s.Uk)("Wgpu without a window example"),(0,s.Wm)(t)]),(0,s.Uk)(", the "),G,(0,s.Uk)(" only specified the usage to by "),F,(0,s.Uk)(". This caused a crash when the "),R,(0,s.Uk)(" was used as a render target. Adding "),N,(0,s.Uk)(" fixed the issue.")]),D,(0,s._)("p",null,[(0,s.Uk)("There were a lot of small changes to how the dpi stuff works. You can see all the changes "),(0,s._)("a",E,[(0,s.Uk)("in the changelog"),(0,s.Wm)(t)]),(0,s.Uk)(". That means that some of the tutorials had to change.")]),M,(0,s.Wm)(O)])}]])}}]);