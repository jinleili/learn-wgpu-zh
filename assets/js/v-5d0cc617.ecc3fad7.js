"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[3713],{8613:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-5d0cc617","path":"/beginner/tutorial6-uniforms/","title":"Uniform 缓冲区与 3D 虚拟摄像机","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"透视摄像机","slug":"透视摄像机","link":"#透视摄像机","children":[]},{"level":2,"title":"Uniform 缓冲区","slug":"uniform-缓冲区","link":"#uniform-缓冲区","children":[]},{"level":2,"title":"Uniform 缓冲区和绑定组","slug":"uniform-缓冲区和绑定组","link":"#uniform-缓冲区和绑定组","children":[]},{"level":2,"title":"在顶点着色器中使用 uniform","slug":"在顶点着色器中使用-uniform","link":"#在顶点着色器中使用-uniform","children":[]},{"level":2,"title":"摄像机控制器","slug":"摄像机控制器","link":"#摄像机控制器","children":[]},{"level":2,"title":"挑战","slug":"挑战","link":"#挑战","children":[]}],"git":{"updatedTime":1663485297000},"filePathRelative":"beginner/tutorial6-uniforms/README.md"}')},4880:(n,s,a)=>{a.r(s),a.d(s,{default:()=>E});var p=a(6252);const t=a.p+"assets/img/static-tree.e837aa1b.png",e=(0,p.uE)('<h1 id="uniform-缓冲区与-3d-虚拟摄像机" tabindex="-1"><a class="header-anchor" href="#uniform-缓冲区与-3d-虚拟摄像机" aria-hidden="true">#</a> Uniform 缓冲区与 3D 虚拟摄像机</h1><p>虽然我们之前的渲染似乎都是在 2D 空间下进行的，但实际上我们一直都是在 3D 空间下渲染的！这就是为什么 <code>Vertex</code> 结构体的 <code>position</code> 是 3 个浮点数的数组而不是 2 个。由于我们是在正面观察，所以才无法真正看到场景的立体感。下面将通过创建一个<strong>虚拟摄像机</strong>（<code>Camera</code>）来改变我们的观察视角。</p><h2 id="透视摄像机" tabindex="-1"><a class="header-anchor" href="#透视摄像机" aria-hidden="true">#</a> 透视摄像机</h2>',3),o=(0,p.Uk)("本教程聚焦于 wgpu 的教学，而不是"),c=(0,p._)("strong",null,"线性代数",-1),l=(0,p.Uk)("，所以会略过很多涉及的数学知识。如果你对线性代数感兴趣，网上有大量的阅读材料。我们将使用 "),i={href:"https://docs.rs/cgmath",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("cgmath"),r=(0,p.Uk)(" 来处理所有数学问题，在 "),k=(0,p._)("code",null,"Cargo.toml",-1),d=(0,p.Uk)(" 中添加以下依赖："),m=(0,p.uE)('<div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>\n<span class="token comment"># other deps...</span>\n<span class="token key property">cgmath</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.18&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们开始使用此数学<strong>包</strong>！在 <code>State</code> 结构体上方创建<strong>摄像机</strong>结构体：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Camera</span> <span class="token punctuation">{</span>\n    eye<span class="token punctuation">:</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Point3</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    target<span class="token punctuation">:</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Point3</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    up<span class="token punctuation">:</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Vector3</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    aspect<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>\n    fovy<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>\n    znear<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>\n    zfar<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">build_view_projection_matrix</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Matrix4</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 1.</span>\n        <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Matrix4</span><span class="token punctuation">::</span><span class="token function">look_at_rh</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>eye<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>up<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 2.</span>\n        <span class="token keyword">let</span> proj <span class="token operator">=</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token function">perspective</span><span class="token punctuation">(</span><span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Deg</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>fovy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>aspect<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>znear<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>zfar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 3.</span>\n        <span class="token keyword">return</span> <span class="token constant">OPENGL_TO_WGPU_MATRIX</span> <span class="token operator">*</span> proj <span class="token operator">*</span> view<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>build_view_projection_matrix</code> 函数实现了视图投影矩阵。</p>',4),v=(0,p._)("li",null,[(0,p._)("strong",null,"视图"),(0,p.Uk)("矩阵移动并旋转世界坐标到"),(0,p._)("strong",null,"摄像机"),(0,p.Uk)("所观察的位置。它本质上是"),(0,p._)("strong",null,"摄像机"),(0,p.Uk)("变换的逆矩阵。")],-1),b=(0,p._)("li",null,[(0,p._)("strong",null,"投影"),(0,p.Uk)("矩阵变换场景空间，以产生景深的效果。如果没有它，近处的物"),(0,p._)("strong",null,"对象"),(0,p.Uk)("将与远处的大小相同。")],-1),f=(0,p.Uk)("wgpu 的坐标系统是基于 DirectX 和 Metal 的坐标系。在"),g={href:"https://github.com/gfx-rs/gfx/tree/master/src/backend/dx12#normalized-coordinates",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("归一化设备坐标"),_=(0,p.Uk)("中，x 轴和 y 轴的范围是 [-1.0, 1.0]，而 z 轴是 [0.0, 1.0], 而 "),y=(0,p._)("code",null,"cgmath",-1),h=(0,p.Uk)("（以及大多数游戏数学库）是为 OpenGL 的坐标系建立的。"),x=(0,p._)("code",null,"OPENGL_TO_WGPU_MATRIX",-1),U=(0,p.Uk)(" 矩阵将把我们的场景从 OpenGL 的坐标系变换为 wgpu 的坐标系, 下边就是它的定义："),C=(0,p.uE)('<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[rustfmt::skip]</span>\n<span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">OPENGL_TO_WGPU_MATRIX</span><span class="token punctuation">:</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Matrix4</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Matrix4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>\n    <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span>\n    <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意：我们并非一定需要 <code>OPENGL_TO_WGPU_MATRIX</code>，但是以坐标 (0, 0, 0) 为中心的模型将只有一半处于剪裁区域内。</li></ul><p>现在我们来给 <code>State</code> 添加上 <code>camera</code> 字段：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    camera<span class="token punctuation">:</span> <span class="token class-name">Camera</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>window<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Window</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n    <span class="token comment">// let diffuse_bind_group ...</span>\n\n    <span class="token keyword">let</span> camera <span class="token operator">=</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将摄像机向上移动 1 个单位，向后移动 2 个单位</span>\n        <span class="token comment">// +z 朝向屏幕外</span>\n        eye<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// 摄像机看向原点</span>\n        target<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// 定义哪个方向朝上</span>\n        up<span class="token punctuation">:</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Vector3</span><span class="token punctuation">::</span><span class="token function">unit_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        aspect<span class="token punctuation">:</span> config<span class="token punctuation">.</span>width <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> config<span class="token punctuation">.</span>height <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>\n        fovy<span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">,</span>\n        znear<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>\n        zfar<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        camera<span class="token punctuation">,</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了可以提供视图投影矩阵的<strong>摄像机</strong>，我们还需要一些方法将其引入着色器。</p><h2 id="uniform-缓冲区" tabindex="-1"><a class="header-anchor" href="#uniform-缓冲区" aria-hidden="true">#</a> Uniform 缓冲区</h2><p>到目前为止，我们已经使用<strong>缓冲区</strong>来存储顶点和索引数据，甚至加载<strong>纹理</strong>。我们将再次使用它来创建一个称之为 <code>uniform</code> 的缓冲区。Uniform 缓冲区也是一个数据块，在一组着色器的每个调用都中都可以使用，从技术的角度来看，我们已经为<strong>纹理</strong>和<strong>采样器</strong>使用了 Uniform 缓冲区。下面将再次使用它们来存储视图投影<strong>矩阵</strong>，我们先创建一个结构体来保存 uniform：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// 此属性标注数据的内存布局兼容 C-ABI，令其可用于着色器</span>\n<span class="token attribute attr-name">#[repr(C)]</span>\n<span class="token comment">// derive 属性自动导入的这些 trait，令其可被存入缓冲区</span>\n<span class="token attribute attr-name">#[derive(Debug, Copy, Clone, bytemuck::Pod, bytemuck::Zeroable)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">CameraUniform</span> <span class="token punctuation">{</span>\n    <span class="token comment">// cgmath 的数据类型不能直接用于 bytemuck</span>\n    <span class="token comment">// 需要先将 Matrix4 矩阵转为一个 4x4 的浮点数数组</span>\n    view_proj<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">CameraUniform</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token keyword">use</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">SquareMatrix</span><span class="token punctuation">;</span>\n        <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n            view_proj<span class="token punctuation">:</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">Matrix4</span><span class="token punctuation">::</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">update_view_proj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> camera<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Camera</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>view_proj <span class="token operator">=</span> camera<span class="token punctuation">.</span><span class="token function">build_view_projection_matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装好了数据，接下来创建一个名为 <code>camera_buffer</code> 的 Uniform 缓冲区：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// 在 new() 函数中创建 `camera` 后</span>\n\n<span class="token keyword">let</span> <span class="token keyword">mut</span> camera_uniform <span class="token operator">=</span> <span class="token class-name">CameraUniform</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncamera_uniform<span class="token punctuation">.</span><span class="token function">update_view_proj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> camera_buffer <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_buffer_init</span><span class="token punctuation">(</span>\n    <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span>util<span class="token punctuation">::</span></span><span class="token class-name">BufferInitDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;Camera Buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        contents<span class="token punctuation">:</span> <span class="token namespace">bytemuck<span class="token punctuation">::</span></span><span class="token function">cast_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>camera_uniform<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">UNIFORM</span> <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_DST</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uniform-缓冲区和绑定组" tabindex="-1"><a class="header-anchor" href="#uniform-缓冲区和绑定组" aria-hidden="true">#</a> Uniform 缓冲区和绑定组</h2><p>现在有了一个 Uniform 缓冲区，那该如何使用呢？答案是为它创建一个<strong>绑定组</strong>。我们得先创建绑定组的布局：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> camera_bind_group_layout <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_bind_group_layout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupLayoutDescriptor</span> <span class="token punctuation">{</span>\n    entries<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupLayoutEntry</span> <span class="token punctuation">{</span>\n            binding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            visibility<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ShaderStages</span><span class="token punctuation">::</span><span class="token constant">VERTEX</span><span class="token punctuation">,</span>     <span class="token comment">// 1</span>\n            ty<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindingType</span><span class="token punctuation">::</span><span class="token class-name">Buffer</span> <span class="token punctuation">{</span>\n                ty<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferBindingType</span><span class="token punctuation">::</span><span class="token class-name">Uniform</span><span class="token punctuation">,</span>\n                has_dynamic_offset<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 2</span>\n                min_binding_size<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            count<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;camera_bind_group_layout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>我们只在<strong>顶点着色器</strong>中需要<strong>虚拟摄像机</strong>信息，因为要用它来操作<strong>顶点</strong>。</li><li><code>has_dynamic_offset</code> 字段表示这个<strong>缓冲区</strong>是否会动态改变偏移量。如果我们想一次性在 Uniform 中存储多组数据，并实时修改偏移量来告诉<strong>着色器</strong>当前使用哪组数据时，这就很有用。</li></ol><p>现在，我们可以创建实际的<strong>绑定组</strong>了：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> camera_bind_group <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_bind_group</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupDescriptor</span> <span class="token punctuation">{</span>\n    layout<span class="token punctuation">:</span> <span class="token operator">&amp;</span>camera_bind_group_layout<span class="token punctuation">,</span>\n    entries<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroupEntry</span> <span class="token punctuation">{</span>\n            binding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            resource<span class="token punctuation">:</span> camera_buffer<span class="token punctuation">.</span><span class="token function">as_entire_binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;camera_bind_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像对<strong>纹理</strong>所做的那样，我们需要在<strong>管线</strong>布局描述符中注册 <code>camera_bind_group_layout</code>：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> render_pipeline_layout <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_pipeline_layout</span><span class="token punctuation">(</span>\n    <span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">PipelineLayoutDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;Render Pipeline Layout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        bind_group_layouts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            <span class="token operator">&amp;</span>texture_bind_group_layout<span class="token punctuation">,</span>\n            <span class="token operator">&amp;</span>camera_bind_group_layout<span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        push_constant_ranges<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，需要将 <code>camera_buffer</code> 和 <code>camera_bind_group</code> 添加到 <code>State</code> 中：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    camera<span class="token punctuation">:</span> <span class="token class-name">Camera</span><span class="token punctuation">,</span>\n    camera_uniform<span class="token punctuation">:</span> <span class="token class-name">CameraUniform</span><span class="token punctuation">,</span>\n    camera_buffer<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Buffer</span><span class="token punctuation">,</span>\n    camera_bind_group<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BindGroup</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>window<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Window</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        camera<span class="token punctuation">,</span>\n        camera_uniform<span class="token punctuation">,</span>\n        camera_buffer<span class="token punctuation">,</span>\n        camera_bind_group<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进入<strong>着色器</strong>之前，我们要做的最后一件事就是在 <code>render()</code> 函数中使用<strong>绑定组</strong>：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>render_pass<span class="token punctuation">.</span><span class="token function">set_pipeline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>render_pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_bind_group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>diffuse_bind_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 新添加!</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_bind_group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>camera_bind_group<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_vertex_buffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>vertex_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrender_pass<span class="token punctuation">.</span><span class="token function">set_index_buffer</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>index_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">IndexFormat</span><span class="token punctuation">::</span><span class="token class-name">Uint16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrender_pass<span class="token punctuation">.</span><span class="token function">draw_indexed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token keyword">self</span><span class="token punctuation">.</span>num_indices<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在顶点着色器中使用-uniform" tabindex="-1"><a class="header-anchor" href="#在顶点着色器中使用-uniform" aria-hidden="true">#</a> 在顶点着色器中使用 uniform</h2><p>修改顶点着色器以加入如下代码：</p><div class="language-wgsl ext-wgsl line-numbers-mode"><pre class="language-wgsl"><code><span class="token comment">// 顶点着色器</span>\n<span class="token keyword">struct</span> <span class="token class-name">CameraUniform</span> <span class="token punctuation">{</span>\n    view_proj<span class="token punctuation">:</span> <span class="token builtin">mat4x4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">@</span><span class="token attributes attr-name">group</span><span class="token punctuation">(</span><span class="token int-literal number">1</span><span class="token punctuation">)</span> <span class="token punctuation">@</span><span class="token attributes attr-name">binding</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> <span class="token comment">// 1.</span>\n<span class="token keyword">var</span><span class="token punctuation">&lt;</span><span class="token keyword">uniform</span><span class="token punctuation">&gt;</span> camera<span class="token punctuation">:</span> <span class="token class-name">CameraUniform</span><span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">VertexInput</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> position<span class="token punctuation">:</span> <span class="token builtin">vec3</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">1</span><span class="token punctuation">)</span> tex_coords<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">VertexOutput</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">@</span><span class="token builtin-attribute"><span class="token attribute attr-name">builtin</span><span class="token punctuation">(</span><span class="token built-in-values attr-value">position</span><span class="token punctuation">)</span></span> clip_position<span class="token punctuation">:</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">@</span><span class="token attributes attr-name">location</span><span class="token punctuation">(</span><span class="token int-literal number">0</span><span class="token punctuation">)</span> tex_coords<span class="token punctuation">:</span> <span class="token builtin">vec2</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">@</span><span class="token attributes attr-name">vertex</span>\n<span class="token keyword">fn</span> <span class="token functions function">vs_main</span><span class="token punctuation">(</span>\n    model<span class="token punctuation">:</span> <span class="token class-name">VertexInput</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">VertexOutput</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> out<span class="token punctuation">:</span> <span class="token class-name">VertexOutput</span><span class="token punctuation">;</span>\n    out<span class="token punctuation">.</span>tex_coords <span class="token operator">=</span> model<span class="token punctuation">.</span>tex_coords<span class="token punctuation">;</span>\n    out<span class="token punctuation">.</span>clip_position <span class="token operator">=</span> camera<span class="token punctuation">.</span>view_proj <span class="token operator">*</span> <span class="token builtin">vec4</span><span class="token punctuation">&lt;</span><span class="token builtin">f32</span><span class="token punctuation">&gt;</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token decimal-float-literal number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.</span>\n    <span class="token keyword">return</span> out<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>因为我们已经创建了一个新的<strong>绑定组</strong>，所以需要指定在<strong>着色器</strong>中使用哪一个。这个数字由我们的 <code>render_pipeline_layout</code> 决定。<code>texture_bind_group_layout</code> 被列在第一位，因此它是 <code>group(0)</code>，而 <code>camera_bind_group</code> 是第二位，因此它是 <code>group(1)</code>。</li><li>当涉及到<strong>矩阵</strong>时，乘法的顺序很重要。向量在最右边，矩阵按重要性顺序在左边（裁剪空间坐标 <strong>=</strong> 投影矩阵 <strong>x</strong> 模型视图矩阵 <strong>x</strong> 位置向量）。</li></ol><h2 id="摄像机控制器" tabindex="-1"><a class="header-anchor" href="#摄像机控制器" aria-hidden="true">#</a> 摄像机控制器</h2><p>如果现在运行代码，看到的将是如下渲染效果：</p><p><img src="'+t+'" alt="./static-tree.png"></p><p>形状的拉伸度降低了，但它仍然是静态的。你可以尝试移动<strong>摄像机</strong>的位置使画面动起来，就像游戏中的摄像机通常所做的那样。由于本教程聚焦于 wgpu 的使用，而非用户输入事件的处理，所以仅在此贴出<strong>摄像机控制器</strong>（CameraController）的代码：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">CameraController</span> <span class="token punctuation">{</span>\n    speed<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">,</span>\n    is_forward_pressed<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    is_backward_pressed<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    is_left_pressed<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    is_right_pressed<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">CameraController</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>speed<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n            speed<span class="token punctuation">,</span>\n            is_forward_pressed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            is_backward_pressed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            is_left_pressed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            is_right_pressed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">process_events</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> event<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">WindowEvent</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>\n        <span class="token keyword">match</span> event <span class="token punctuation">{</span>\n            <span class="token class-name">WindowEvent</span><span class="token punctuation">::</span><span class="token class-name">KeyboardInput</span> <span class="token punctuation">{</span>\n                input<span class="token punctuation">:</span> <span class="token class-name">KeyboardInput</span> <span class="token punctuation">{</span>\n                    state<span class="token punctuation">,</span>\n                    virtual_keycode<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>keycode<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">..</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">..</span>\n            <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> is_pressed <span class="token operator">=</span> <span class="token operator">*</span>state <span class="token operator">==</span> <span class="token class-name">ElementState</span><span class="token punctuation">::</span><span class="token class-name">Pressed</span><span class="token punctuation">;</span>\n                <span class="token keyword">match</span> keycode <span class="token punctuation">{</span>\n                    <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">W</span> <span class="token operator">|</span> <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">Up</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">self</span><span class="token punctuation">.</span>is_forward_pressed <span class="token operator">=</span> is_pressed<span class="token punctuation">;</span>\n                        <span class="token boolean">true</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">A</span> <span class="token operator">|</span> <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">Left</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">self</span><span class="token punctuation">.</span>is_left_pressed <span class="token operator">=</span> is_pressed<span class="token punctuation">;</span>\n                        <span class="token boolean">true</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">S</span> <span class="token operator">|</span> <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">Down</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">self</span><span class="token punctuation">.</span>is_backward_pressed <span class="token operator">=</span> is_pressed<span class="token punctuation">;</span>\n                        <span class="token boolean">true</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">D</span> <span class="token operator">|</span> <span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">Right</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">self</span><span class="token punctuation">.</span>is_right_pressed <span class="token operator">=</span> is_pressed<span class="token punctuation">;</span>\n                        <span class="token boolean">true</span>\n                    <span class="token punctuation">}</span>\n                    _ <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            _ <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">update_camera</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> camera<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Camera</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">use</span> <span class="token namespace">cgmath<span class="token punctuation">::</span></span><span class="token class-name">InnerSpace</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> forward <span class="token operator">=</span> camera<span class="token punctuation">.</span>target <span class="token operator">-</span> camera<span class="token punctuation">.</span>eye<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> forward_norm <span class="token operator">=</span> forward<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> forward_mag <span class="token operator">=</span> forward<span class="token punctuation">.</span><span class="token function">magnitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 防止摄像机离场景中心太近时出现问题</span>\n        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_forward_pressed <span class="token operator">&amp;&amp;</span> forward_mag <span class="token operator">&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>speed <span class="token punctuation">{</span>\n            camera<span class="token punctuation">.</span>eye <span class="token operator">+=</span> forward_norm <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_backward_pressed <span class="token punctuation">{</span>\n            camera<span class="token punctuation">.</span>eye <span class="token operator">-=</span> forward_norm <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">let</span> right <span class="token operator">=</span> forward_norm<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>camera<span class="token punctuation">.</span>up<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 在按下前进或后退键时重做半径计算</span>\n        <span class="token keyword">let</span> forward <span class="token operator">=</span> camera<span class="token punctuation">.</span>target <span class="token operator">-</span> camera<span class="token punctuation">.</span>eye<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> forward_mag <span class="token operator">=</span> forward<span class="token punctuation">.</span><span class="token function">magnitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_right_pressed <span class="token punctuation">{</span>\n            <span class="token comment">// 重新调整目标和眼睛之间的距离，以便其不发生变化。</span>\n            <span class="token comment">// 因此，眼睛仍然位于目标和眼睛形成的圆圈上。</span>\n            camera<span class="token punctuation">.</span>eye <span class="token operator">=</span> camera<span class="token punctuation">.</span>target <span class="token operator">-</span> <span class="token punctuation">(</span>forward <span class="token operator">+</span> right <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> forward_mag<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_left_pressed <span class="token punctuation">{</span>\n            camera<span class="token punctuation">.</span>eye <span class="token operator">=</span> camera<span class="token punctuation">.</span>target <span class="token operator">-</span> <span class="token punctuation">(</span>forward <span class="token operator">-</span> right <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> forward_mag<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码并不完美。当你旋转<strong>摄像机</strong>时，摄像机会慢慢向后移动。虽然已达到了我们的目的，但你还是可以自由地改进它！</p><p>我们仍然需要把它插入到现有的代码中使其生效。将<strong>控制器</strong>添加到 <code>State</code> 中，并在 <code>new()</code> 函数中创建它的实例：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    camera<span class="token punctuation">:</span> <span class="token class-name">Camera</span><span class="token punctuation">,</span>\n    <span class="token comment">// 新添加!</span>\n    camera_controller<span class="token punctuation">:</span> <span class="token class-name">CameraController</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>window<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Window</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n        <span class="token keyword">let</span> camera_controller <span class="token operator">=</span> <span class="token class-name">CameraController</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ...</span>\n\n        <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n            <span class="token comment">// ...</span>\n            camera_controller<span class="token punctuation">,</span>\n            <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将下边这行代码添加到 <code>input()</code> 函数中。</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> event<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">WindowEvent</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>camera_controller<span class="token punctuation">.</span><span class="token function">process_events</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，摄像机<strong>控制器</strong>还没有真正工作起来。uniform <strong>缓冲区</strong>中的值需要被更新。有几种方式可以做到这一点：</p><ol><li>可以创建一个单独的缓冲区，并将其数据复制到 <code>camera_buffer</code>。这个新的缓冲区被称为<strong>中继缓冲区</strong>（Staging Buffer）。这种方法允许主缓冲区（在这里是指 <code>camera_buffer</code>）的数据只被 GPU 访问，从而令 GPU 能做一些速度上的优化。如果缓冲区能被 CPU 访问，就无法实现此类优化。</li><li>可以在<strong>缓冲区</strong>本身调用内存映射函数 <code>map_read_async</code> 和 <code>map_write_async</code>。此方式允许我们直接访问缓冲区的数据，但是需要处理<strong>异步</strong>代码，也需要缓冲区使用 <code>BufferUsages::MAP_READ</code> 和/或 <code>BufferUsages::MAP_WRITE</code>。在此不再详述，如果你想了解更多，可以查看 <a href="./showcase/windowless">wgpu without a window</a> 教程。</li><li>可以在 <code>queue</code> 上使用 <code>write_buffer</code> 函数。</li></ol><p>我们将使用第 3 种方式。</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>camera_controller<span class="token punctuation">.</span><span class="token function">update_camera</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>camera_uniform<span class="token punctuation">.</span><span class="token function">update_view_proj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">write_buffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>camera_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token namespace">bytemuck<span class="token punctuation">::</span></span><span class="token function">cast_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>camera_uniform<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是要做的全部工作了。现在运行代码，将能看到一个带有树木纹理的五边形，并可以用 wasd/arrow 键来旋转和缩放。</p><h2 id="挑战" tabindex="-1"><a class="header-anchor" href="#挑战" aria-hidden="true">#</a> 挑战</h2><p>让上面的五边形独立于<strong>摄像机</strong>进行旋转。<em>提示：你需要另一个<strong>矩阵</strong>来实现这一点</em>。</p>',43),S={},E=(0,a(3744).Z)(S,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon"),t=(0,p.up)("WasmExample"),S=(0,p.up)("AutoGithubLink");return(0,p.wg)(),(0,p.iD)("div",null,[e,(0,p._)("p",null,[o,c,l,(0,p._)("a",i,[u,(0,p.Wm)(a)]),r,k,d]),m,(0,p._)("ol",null,[v,b,(0,p._)("li",null,[f,(0,p._)("a",g,[w,(0,p.Wm)(a)]),_,y,h,x,U])]),C,(0,p.Wm)(t,{example:"tutorial6_uniforms"}),(0,p.Wm)(S)])}]])}}]);