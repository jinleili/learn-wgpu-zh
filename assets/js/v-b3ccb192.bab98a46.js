"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[8727],{5732:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-b3ccb192","path":"/showcase/gifs/","title":"Creating gifs","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"How are we making the GIF?","slug":"how-are-we-making-the-gif","link":"#how-are-we-making-the-gif","children":[]},{"level":2,"title":"How do we make the frames?","slug":"how-do-we-make-the-frames","link":"#how-do-we-make-the-frames","children":[]}],"git":{"updatedTime":1663479331000},"filePathRelative":"showcase/gifs/README.md"}')},6822:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var t=a(6252);const p=a.p+"assets/img/output.4e4eec06.gif",e=(0,t._)("h1",{id:"creating-gifs",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#creating-gifs","aria-hidden":"true"},"#"),(0,t.Uk)(" Creating gifs")],-1),o=(0,t.Uk)("Sometimes you've created a nice simulation/animation, and you want to show it off. While you can record a video, that might be a bit overkill to break out your video recording if you just want something to post on Twitter. That's where what "),c={href:"https://en.wikipedia.org/wiki/GIF",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("GIF"),l=(0,t.Uk)("s are for."),i=(0,t.Uk)("Also, GIF is pronounced GHIF, not JIF as JIF is not only "),k={href:"https://en.wikipedia.org/wiki/Jif_%28peanut_butter%29",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("peanut butter"),d=(0,t.Uk)(", it is also a "),m={href:"https://filext.com/file-extension/JIF",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("different image format"),b=(0,t.Uk)("."),f=(0,t._)("h2",{id:"how-are-we-making-the-gif",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#how-are-we-making-the-gif","aria-hidden":"true"},"#"),(0,t.Uk)(" How are we making the GIF?")],-1),w=(0,t.Uk)("We're going to create a function using the "),g={href:"https://docs.rs/gif/",target:"_blank",rel:"noopener noreferrer"},_=(0,t.Uk)("gif crate"),h=(0,t.Uk)(" to encode the actual image."),y=(0,t.uE)('<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">save_gif</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> frames<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> speed<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">failure<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token namespace">gif<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Frame</span><span class="token punctuation">,</span> <span class="token class-name">Encoder</span><span class="token punctuation">,</span> <span class="token class-name">Repeat</span><span class="token punctuation">,</span> <span class="token class-name">SetParameter</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">let</span> <span class="token keyword">mut</span> image <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> <span class="token class-name">Encoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> image<span class="token punctuation">,</span> size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    encoder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Repeat</span><span class="token punctuation">::</span><span class="token class-name">Infinite</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token keyword">mut</span> frame <span class="token keyword">in</span> frames <span class="token punctuation">{</span>\n        encoder<span class="token punctuation">.</span><span class="token function">write_frame</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">Frame</span><span class="token punctuation">::</span><span class="token function">from_rgba_speed</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> frame<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),x=(0,t._)("p",null,"All we need to use this code is the frames of the GIF, how fast it should run, and the size of the GIF (you could use width and height separately, but I didn't).",-1),z=(0,t._)("h2",{id:"how-do-we-make-the-frames",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#how-do-we-make-the-frames","aria-hidden":"true"},"#"),(0,t.Uk)(" How do we make the frames?")],-1),I=(0,t.Uk)("If you checked out the "),U=(0,t.Uk)("windowless showcase"),E=(0,t.Uk)(", you'll know that we render directly to a "),F=(0,t._)("code",null,"wgpu::Texture",-1),R=(0,t.Uk)(". We'll create a texture to render to and a buffer to copy the output to."),T=(0,t.uE)('<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// create a texture to render to</span>\n<span class="token keyword">let</span> texture_size <span class="token operator">=</span> <span class="token number">256u32</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> rt_desc <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDescriptor</span> <span class="token punctuation">{</span>\n    size<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Extent3d</span> <span class="token punctuation">{</span>\n        width<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n        depth_or_array_layers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mip_level_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    sample_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    dimension<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDimension</span><span class="token punctuation">::</span><span class="token constant">D2</span><span class="token punctuation">,</span>\n    format<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureFormat</span><span class="token punctuation">::</span><span class="token class-name">Rgba8UnormSrgb</span><span class="token punctuation">,</span>\n    usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_SRC</span>\n        <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">RENDER_ATTACHMENT</span><span class="token punctuation">,</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> render_target <span class="token operator">=</span> <span class="token namespace">framework<span class="token punctuation">::</span></span><span class="token class-name">Texture</span><span class="token punctuation">::</span><span class="token function">from_descriptor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device<span class="token punctuation">,</span> rt_desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// wgpu requires texture -&gt; buffer copies to be aligned using</span>\n<span class="token comment">// wgpu::COPY_BYTES_PER_ROW_ALIGNMENT. Because of this we&#39;ll</span>\n<span class="token comment">// need to save both the padded_bytes_per_row as well as the</span>\n<span class="token comment">// unpadded_bytes_per_row</span>\n<span class="token keyword">let</span> pixel_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> align <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token constant">COPY_BYTES_PER_ROW_ALIGNMENT</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> unpadded_bytes_per_row <span class="token operator">=</span> pixel_size <span class="token operator">*</span> texture_size<span class="token punctuation">;</span>\n<span class="token keyword">let</span> padding <span class="token operator">=</span> <span class="token punctuation">(</span>align <span class="token operator">-</span> unpadded_bytes_per_row <span class="token operator">%</span> align<span class="token punctuation">)</span> <span class="token operator">%</span> align<span class="token punctuation">;</span>\n<span class="token keyword">let</span> padded_bytes_per_row <span class="token operator">=</span> unpadded_bytes_per_row <span class="token operator">+</span> padding<span class="token punctuation">;</span>\n\n<span class="token comment">// create a buffer to copy the texture to so we can get the data</span>\n<span class="token keyword">let</span> buffer_size <span class="token operator">=</span> <span class="token punctuation">(</span>padded_bytes_per_row <span class="token operator">*</span> texture_size<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferAddress</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> buffer_desc <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferDescriptor</span> <span class="token punctuation">{</span>\n    size<span class="token punctuation">:</span> buffer_size<span class="token punctuation">,</span>\n    usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_DST</span> <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">MAP_READ</span><span class="token punctuation">,</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;Output Buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    mapped_at_creation<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> output_buffer <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_buffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer_desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that, we can render a frame, and then copy that frame to a <code>Vec&lt;u8&gt;</code>.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> frames <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token operator">&amp;</span>colors <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_command_encoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">CommandEncoderDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> rpass <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">begin_render_pass</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">RenderPassDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;GIF Pass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        color_attachments<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">RenderPassColorAttachment</span> <span class="token punctuation">{</span>\n                view<span class="token punctuation">:</span> <span class="token operator">&amp;</span>render_target<span class="token punctuation">.</span>view<span class="token punctuation">,</span>\n                resolve_target<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n                ops<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Operations</span> <span class="token punctuation">{</span>\n                    load<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">LoadOp</span><span class="token punctuation">::</span><span class="token class-name">Clear</span><span class="token punctuation">(</span>\n                        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Color</span> <span class="token punctuation">{</span>\n                            r<span class="token punctuation">:</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            g<span class="token punctuation">:</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            b<span class="token punctuation">:</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            a<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    store<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        depth_stencil_attachment<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    rpass<span class="token punctuation">.</span><span class="token function">set_pipeline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>render_pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rpass<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">drop</span><span class="token punctuation">(</span>rpass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    encoder<span class="token punctuation">.</span><span class="token function">copy_texture_to_buffer</span><span class="token punctuation">(</span>\n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyTexture</span> <span class="token punctuation">{</span>\n            texture<span class="token punctuation">:</span> <span class="token operator">&amp;</span>render_target<span class="token punctuation">.</span>texture<span class="token punctuation">,</span>\n            mip_level<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            origin<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Origin3d</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> \n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyBuffer</span> <span class="token punctuation">{</span>\n            buffer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>output_buffer<span class="token punctuation">,</span>\n            layout<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageDataLayout</span> <span class="token punctuation">{</span>\n                offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                bytes_per_row<span class="token punctuation">:</span> padded_bytes_per_row<span class="token punctuation">,</span>\n                rows_per_image<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        render_target<span class="token punctuation">.</span>desc<span class="token punctuation">.</span>size\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    queue<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>iter<span class="token punctuation">::</span></span><span class="token function">once</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// Create the map request</span>\n    <span class="token keyword">let</span> buffer_slice <span class="token operator">=</span> output_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> request <span class="token operator">=</span> buffer_slice<span class="token punctuation">.</span><span class="token function">map_async</span><span class="token punctuation">(</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">MapMode</span><span class="token punctuation">::</span><span class="token class-name">Read</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// wait for the GPU to finish</span>\n    device<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Maintain</span><span class="token punctuation">::</span><span class="token class-name">Wait</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">match</span> result <span class="token punctuation">{</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> padded_data <span class="token operator">=</span> buffer_slice<span class="token punctuation">.</span><span class="token function">get_mapped_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> data <span class="token operator">=</span> padded_data\n                <span class="token punctuation">.</span><span class="token function">chunks</span><span class="token punctuation">(</span>padded_bytes_per_row <span class="token keyword">as</span> _<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>chunk<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span>chunk<span class="token punctuation">[</span><span class="token punctuation">..</span>unpadded_bytes_per_row <span class="token keyword">as</span> _<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token operator">*</span>x <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">drop</span><span class="token punctuation">(</span>padded_data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            output_buffer<span class="token punctuation">.</span><span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            frames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once that&#39;s done we can pass our frames into <code>save_gif()</code>.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token function">save_gif</span><span class="token punctuation">(</span><span class="token string">&quot;output.gif&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> frames<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> texture_size <span class="token keyword">as</span> <span class="token keyword">u16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>That&#39;s the gist of it. We can improve things using a texture array, and sending the draw commands all at once, but this gets the idea across. With the shader I wrote we get the following GIF.</p><p><img src="'+p+'" alt="./output.gif"></p>',7),C={},q=(0,a(3744).Z)(C,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon"),p=(0,t.up)("RouterLink"),C=(0,t.up)("AutoGithubLink");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[o,(0,t._)("a",c,[u,(0,t.Wm)(a)]),l]),(0,t._)("p",null,[i,(0,t._)("a",k,[r,(0,t.Wm)(a)]),d,(0,t._)("a",m,[v,(0,t.Wm)(a)]),b]),f,(0,t._)("p",null,[w,(0,t._)("a",g,[_,(0,t.Wm)(a)]),h]),y,(0,t.kq)(" image-rs doesn't currently support looping, so I switched to gif "),(0,t.kq)(" A GIF is a type of image, and fortunately, the [image crate](https://docs.rs/image/) supports GIFs natively. It's pretty simple to use. "),(0,t.kq)(" ```rust\nfn save_gif(path: &str, frames: &mut Vec<Vec<u8>>, speed: i32, size: u16) -> Result<(), failure::Error> {\n    let output = std::fs::File::create(path)?;\n    let mut encoder = image::gif::Encoder::new(output);\n\n    for mut data in frames {\n        let frame = image::gif::Frame::from_rgba_speed(size, size, &mut data, speed);\n        encoder.encode(&frame)?;\n    }\n\n    Ok(())\n}\n``` "),x,z,(0,t._)("p",null,[I,(0,t.Wm)(p,{to:"/showcase/windowless/#a-triangle-without-a-window"},{default:(0,t.w5)((()=>[U])),_:1}),E,F,R]),T,(0,t.Wm)(C)])}]])}}]);