"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[4647],{727:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-e038f3ae","path":"/integration-and-debugging/android/","title":"🆕 与 Android App 集成","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"开发环境配置","slug":"开发环境配置","link":"#开发环境配置","children":[]},{"level":2,"title":"添加安卓构建目标支持","slug":"添加安卓构建目标支持","link":"#添加安卓构建目标支持","children":[]},{"level":2,"title":"自定义窗口对象","slug":"自定义窗口对象","link":"#自定义窗口对象","children":[]},{"level":2,"title":"定义 FFI","slug":"定义-ffi","link":"#定义-ffi","children":[]},{"level":2,"title":"实现 cargo so 子命令","slug":"实现-cargo-so-子命令","link":"#实现-cargo-so-子命令","children":[]},{"level":2,"title":"编译为 .so 库文件","slug":"编译为-so-库文件","link":"#编译为-so-库文件","children":[]},{"level":2,"title":"自定义 WGPUSurfaceView","slug":"自定义-wgpusurfaceview","link":"#自定义-wgpusurfaceview","children":[]},{"level":2,"title":"App 中加载 WGPUSurfaceView","slug":"app-中加载-wgpusurfaceview","link":"#app-中加载-wgpusurfaceview","children":[]}],"git":{"updatedTime":1665024513000},"filePathRelative":"integration-and-debugging/android/README.md"}')},2627:(n,s,a)=>{a.r(s),a.d(s,{default:()=>S});var p=a(6252);const t=a.p+"assets/img/tools.fd432abe.png",e=a.p+"assets/img/on_android.8a526a37.png",o=(0,p.uE)('<h1 id="🆕-与-android-app-集成" tabindex="-1"><a class="header-anchor" href="#🆕-与-android-app-集成" aria-hidden="true">#</a> 🆕 与 Android App 集成</h1><h2 id="开发环境配置" tabindex="-1"><a class="header-anchor" href="#开发环境配置" aria-hidden="true">#</a> 开发环境配置</h2><p>假设你的电脑上已经安装了 Android Studio，从菜单栏打开 SDK 管理器（<code>Tools</code> &gt; <code>SDK Manager</code> &gt; <code>Android SDK</code> &gt; <code>SDK Tools</code>），勾选以下 3 个选项后点击 <code>OK</code> 按钮确认:</p><ul><li>Android SDK Build-Tools</li><li>Android SDK Command-line Tools</li><li>NDK(Side by side)</li></ul><img src="'+t+'"><p>然后，设置如下两个系统环境变量：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">ANDROID_SDK_ROOT</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/Library/Android/sdk\n<span class="token comment"># 注意，此处需要替换为你电脑上安装的 NDK 的版本号</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">NDK_HOME</span><span class="token operator">=</span><span class="token variable">$ANDROID_SDK_ROOT</span>/ndk/23.1.7779620\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加安卓构建目标支持" tabindex="-1"><a class="header-anchor" href="#添加安卓构建目标支持" aria-hidden="true">#</a> 添加安卓构建目标支持</h2><p>到目前为止，Android 模拟器和虚拟设备还不支持 Vulkan 图形 API（仅支持 OpenGL ES），所以开发或调试 wgpu 程序在 Android 系统上的运行时，建议使用真机（各种云测平台的云真机也行）。</p><p>如果需要支持模拟器运行，还得加上 <code>x86_64-linux-android</code> 和 <code>i686-linux-android</code> 这两个构建目标的支持。需要注意的是，如果指定了 wgpu 项目使用 Vulkan 图形后端（<code>Instance::new(wgpu::Backends::VULKAN)</code>），则在模拟内运行时会崩溃：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>rustup target <span class="token function">add</span> aarch64-linux-android armv7-linux-androideabi\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自定义窗口对象" tabindex="-1"><a class="header-anchor" href="#自定义窗口对象" aria-hidden="true">#</a> 自定义窗口对象</h2><p>要实现一个 wgpu 里能使用的窗口对象，就必须实现 raw-window-handle 中 <code>raw_window_handle()</code> <code>raw_display_handle()</code> 这两个分别定义在 <code>HasRawWindowHandle</code> <code>HasRawDisplayHandle</code> trait 里的抽象接口。</p>',13),c=(0,p._)("code",null,"raw_display_handle()",-1),l=(0,p._)("code",null,"AndroidDisplayHandle",-1),i=(0,p._)("code",null,"raw_window_handle()",-1),u={href:"https://github.com/rust-windowing/raw-window-handle/blob/master/src/android.rs",target:"_blank",rel:"noopener noreferrer"},r=(0,p._)("code",null,"a_native_window",-1),d=(0,p._)("code",null,"ANativeWindow",-1),k=(0,p.uE)('<p>先给项目添加必要的依赖：</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">target.&#39;cfg(target_os = &quot;android&quot;)&#39;.dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">jni</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.19&quot;</span>\n<span class="token comment"># 星号表示不锁定特定版本，在项目构建及运行时始终保持使用最新版本</span>\n<span class="token key property">ndk-sys</span> <span class="token punctuation">=</span> <span class="token string">&quot;*&quot;</span>\n<span class="token key property">raw-window-handle</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.5&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义一个 <code>NativeWindow</code> 结构体，它只有一个叫 <code>a_native_window</code> 的字段：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">NativeWindow</span> <span class="token punctuation">{</span>\n    a_native_window<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token namespace">ndk_sys<span class="token punctuation">::</span></span><span class="token class-name">ANativeWindow</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">impl</span> <span class="token class-name">NativeWindow</span> <span class="token punctuation">{</span>\n    <span class="token comment">// env 和 surface 都是安卓端传递过来的参数</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>env<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JNIEnv</span><span class="token punctuation">,</span> surface<span class="token punctuation">:</span> jobject<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> a_native_window <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取与安卓端 surface 对象关联的 ANativeWindow，以便能通过 Rust 与之交互。</span>\n            <span class="token comment">// 此函数在返回 ANativeWindow 的同时会自动将其引用计数 +1，以防止该对象在安卓端被意外释放。</span>\n            <span class="token namespace">ndk_sys<span class="token punctuation">::</span></span><span class="token class-name">ANativeWindow_fromSurface</span><span class="token punctuation">(</span>env <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> surface <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">Self</span> <span class="token punctuation">{</span> a_native_window <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后给 <code>NativeWindow</code> 实现 raw-window-handle 抽象接口：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">unsafe</span> <span class="token keyword">impl</span> <span class="token class-name">HasRawWindowHandle</span> <span class="token keyword">for</span> <span class="token class-name">NativeWindow</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">raw_window_handle</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">RawWindowHandle</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> handle <span class="token operator">=</span> <span class="token class-name">AndroidNdkWindowHandle</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        handle<span class="token punctuation">.</span>a_native_window <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>a_native_window <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _ <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> c_void<span class="token punctuation">;</span>\n        <span class="token class-name">RawWindowHandle</span><span class="token punctuation">::</span><span class="token class-name">AndroidNdk</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">unsafe</span> <span class="token keyword">impl</span> <span class="token class-name">HasRawDisplayHandle</span> <span class="token keyword">for</span> <span class="token class-name">NativeWindow</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">raw_display_handle</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">RawDisplayHandle</span> <span class="token punctuation">{</span>\n        <span class="token class-name">RawDisplayHandle</span><span class="token punctuation">::</span><span class="token class-name">Android</span><span class="token punctuation">(</span><span class="token class-name">AndroidDisplayHandle</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="auto-github-link"><a href="https://github.com/jinleili/wgpu-on-app/blob/d28fb4790c12282b135c9776c30bf07c8da40be9/app-surface/src/android.rs#L58-L101" target="_blank" rel="noopener noreferrer"> 查看自定义窗口对象的完整源码！ </a></div><h2 id="定义-ffi" tabindex="-1"><a class="header-anchor" href="#定义-ffi" aria-hidden="true">#</a> 定义 FFI</h2><p>Rust 有一个关键字 <code>extern</code>（kotlin 中定义 JNI 函数时也有一个对应的关键字叫 <code>external</code>, 我们接下来会用到），当需要与其他语言编写的代码进行交互时，用于创建和使用<strong>外部函数接口</strong>（FFI，Foreign Function Interface）。FFI 是一种编程语言定义函数的方式，可以让不同的（外部）编程语言调用这些函数。</p><p>在 Rust 这一端，我们通过给公开函数添加 <code>#[no_mangle]</code> 属性来允许安卓端调用此函数：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[no_mangle]</span>\n<span class="token attribute attr-name">#[jni_fn(<span class="token string">&quot;name.jinleili.wgpu.RustBridge&quot;</span>)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">createWgpuCanvas</span><span class="token punctuation">(</span>env<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JNIEnv</span><span class="token punctuation">,</span> _<span class="token punctuation">:</span> <span class="token class-name">JClass</span><span class="token punctuation">,</span> surface<span class="token punctuation">:</span> jobject<span class="token punctuation">,</span> idx<span class="token punctuation">:</span> jint<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> jlong <span class="token punctuation">{</span>\n    <span class="token namespace">android_logger<span class="token punctuation">::</span></span><span class="token function">init_once</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_min_level</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">::</span><span class="token class-name">Trace</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> canvas <span class="token operator">=</span> <span class="token class-name">WgpuCanvas</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AppSurface</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>env <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> _<span class="token punctuation">,</span> surface<span class="token punctuation">)</span><span class="token punctuation">,</span> idx <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token macro property">info!</span><span class="token punctuation">(</span><span class="token string">&quot;WgpuCanvas created!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使用 Box 对 Rust 对象进行装箱操作。</span>\n    <span class="token comment">// 我们无法将 Rust 对象直接传递给外部语言，通过装箱来传递此对象的裸指针 </span>\n    <span class="token comment">// into_raw 返回指针的同时，也将此对象的内存管理权转交给调用方</span>\n    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> jlong\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[no_mangle]</span>\n<span class="token attribute attr-name">#[jni_fn(<span class="token string">&quot;name.jinleili.wgpu.RustBridge&quot;</span>)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">enterFrame</span><span class="token punctuation">(</span>_env<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JNIEnv</span><span class="token punctuation">,</span> _<span class="token punctuation">:</span> <span class="token class-name">JClass</span><span class="token punctuation">,</span> obj<span class="token punctuation">:</span> jlong<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 直接获取到指针指代的 Rust 对象的可变借用</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token punctuation">(</span>obj <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">WgpuCanvas</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    obj<span class="token punctuation">.</span><span class="token function">enter_frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="note"><p><code>#[no_mangle]</code> 属性告诉 Rust 关闭函数名称修改功能。如果不加这个属性，Rust 编译器就会修改函数名，这是现代编译器为了解决唯⼀名称解析引起的各种问题所引⼊的技术。如果函数名被修改了，外部编程语言就⽆法按原名称调⽤，开发者也没办法知道修改后的函数名。</p></div><p><code>#[jni_fn(&quot;XXX&quot;)]</code> 这个函数签名属性需要重点介绍一下，做过安卓 JNI 开发的都知道，JNI 函数的签名是又臭又长，比如上面的 <code>createWgpuCanvas</code> 函数，手写符合 JNI 规范的函数签名就会是 <code>Java_name_jinleili_wgpu_RustBridge_createWgpuCanvas</code> 这样，难写且难维护 <code>#[jni_fn(&quot;name.jinleili.wgpu.RustBridge&quot;)]</code> 这个属性能自动帮我们生成兼容 JNI 的函数签名，使正确编写函数签名变得更加容易。为此，我们需要 jni_fn 依赖项：</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">target.&#39;cfg(target_os = &quot;android&quot;)&#39;.dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">jni_fn</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1&quot;</span>\n<span class="token comment"># 其它依赖项</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在安卓端，我们定义一个命名空间为 <code>name.jinleili.wgpu</code> 的 <code>RustBridge</code> 类来加载 Rust 程序，并使用 <code>external</code> 关键字标记好具体实现在 Rust 端的外部函数声明：</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">package</span> name<span class="token punctuation">.</span>jinleili<span class="token punctuation">.</span>wgpu\n\n<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Surface\n\n<span class="token keyword">class</span> RustBridge <span class="token punctuation">{</span>\n    <span class="token keyword">init</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;wgpu_on_app&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">external</span> <span class="token keyword">fun</span> <span class="token function">createWgpuCanvas</span><span class="token punctuation">(</span>surface<span class="token operator">:</span> Surface<span class="token punctuation">,</span> idx<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Long\n    <span class="token keyword">external</span> <span class="token keyword">fun</span> <span class="token function">enterFrame</span><span class="token punctuation">(</span>rustObj<span class="token operator">:</span> Long<span class="token punctuation">)</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="note"><p>你可以使用任意符合安卓规范的命名空间，只需要记得让 Rust 端 <code>#[jni_fn(&quot;&quot;)]</code> 属性里的字符串与安卓端代码里的命名空间一致。</p></div><h2 id="实现-cargo-so-子命令" tabindex="-1"><a class="header-anchor" href="#实现-cargo-so-子命令" aria-hidden="true">#</a> 实现 cargo so 子命令</h2>',18),v=(0,p._)("code",null,"so",-1),m={href:"https://mozilla.github.io/firefox-browser-architecture/experiments/2017-09-21-rust-on-android.html",target:"_blank",rel:"noopener noreferrer"},b=(0,p._)("code",null,"so",-1),g={href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"},f=(0,p.uE)('<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">match</span> <span class="token class-name">Subcommand</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">&quot;so&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token punctuation">,</span> _<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Ok</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> cmd<span class="token punctuation">.</span><span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token string">&quot;build&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> ndk <span class="token operator">=</span> <span class="token class-name">Ndk</span><span class="token punctuation">::</span><span class="token function">from_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> build_targets <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">Target</span><span class="token punctuation">::</span><span class="token function">from_rust_triple</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token macro property">vec!</span><span class="token punctuation">[</span>\n                    <span class="token class-name">Target</span><span class="token punctuation">::</span><span class="token class-name">Arm64V8a</span><span class="token punctuation">,</span>\n                    <span class="token class-name">Target</span><span class="token punctuation">::</span><span class="token class-name">ArmV7a</span><span class="token punctuation">,</span>\n                    <span class="token class-name">Target</span><span class="token punctuation">::</span><span class="token constant">X86</span><span class="token punctuation">,</span>\n                    <span class="token class-name">Target</span><span class="token punctuation">::</span><span class="token constant">X86_64</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> target <span class="token keyword">in</span> build_targets <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> triple <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">rust_triple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// setting ar, linker value</span>\n                <span class="token keyword">let</span> <span class="token keyword">mut</span> cargo <span class="token operator">=</span> <span class="token function">cargo_ndk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ndk<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                cargo<span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;rustc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> cmd<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    cargo<span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;--target&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>triple<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                cargo<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> ndk<span class="token punctuation">.</span><span class="token function">build_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">7272597</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token operator">!</span>cmd<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">&quot;--&quot;</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        cargo<span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">let</span> gcc_link_dir <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">target_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;gcc-temp-extra-link-libraries&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">create_dir_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gcc_link_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span>gcc_link_dir<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;libgcc.a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;INPUT(-lunwind)&quot;</span><span class="token punctuation">)</span>\n                        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    cargo<span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">&quot;-L&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>gcc_link_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token keyword">if</span> <span class="token operator">!</span>cargo<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">NdkError</span><span class="token punctuation">::</span><span class="token class-name">CmdFailed</span><span class="token punctuation">(</span>cargo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="auto-github-link"><a href="https://github.com/jinleili/wgpu-on-app/tree/master/cargo-so" target="_blank" rel="noopener noreferrer"> 查看 cargo-so 源码！ </a></div><h2 id="编译为-so-库文件" tabindex="-1"><a class="header-anchor" href="#编译为-so-库文件" aria-hidden="true">#</a> 编译为 .so 库文件</h2><p>首先，安装我们上面实现 <code>so</code> 子命令:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 从 crates.io 安装</span>\n<span class="token function">cargo</span> <span class="token function">install</span> cargo-so\n<span class="token comment"># 或者</span>\n<span class="token comment"># 也可以从源码安装</span>\n<span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--path</span> ./cargo-so\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用 <code>so</code> 子命令来构建 wgpu 项目：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 将 wgpu 程序构建为 Android .so 库文件</span>\n<span class="token function">cargo</span> so b <span class="token parameter variable">--lib</span> <span class="token parameter variable">--target</span> aarch64-linux-android <span class="token parameter variable">--release</span>\n<span class="token function">cargo</span> so b <span class="token parameter variable">--lib</span> <span class="token parameter variable">--target</span> armv7-linux-androideabi <span class="token parameter variable">--release</span>\n\n<span class="token comment"># 将 .so 复制到安卓项目的 jniLibs/ 目录下</span>\n<span class="token function">cp</span> target/aarch64-linux-android/release/libwgpu_on_app.so android/app/libs/arm64-v8a/libwgpu_on_app.so\n<span class="token function">cp</span> target/armv7-linux-androideabi/release/libwgpu_on_app.so android/app/libs/armeabi-v7a/libwgpu_on_app.so\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以上面的构建与复制命令放进一个 <code>.sh</code> 命令行文件内，之后编译项目时只需要执行此命令行文件就可以了：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sh</span> ./release.sh\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自定义-wgpusurfaceview" tabindex="-1"><a class="header-anchor" href="#自定义-wgpusurfaceview" aria-hidden="true">#</a> 自定义 WGPUSurfaceView</h2><p>安卓视图组件 <code>SurfaceView</code> 提供了一个可嵌入在视图层级结构中的专用于绘制的视图。它负责<strong>绘制表面</strong>（Surface）在屏幕上的正确位置，还控制着绘制表面的像素格式及分辨率大小。 <code>SurfaceView</code> 持有的<strong>绘制表面</strong>是独立于 App 窗口的，可以在单独的线程中进行绘制而不占用主线程资源。所以使用 <code>SurfaceView</code> 可以实现复杂而高效的渲染（比如，游戏、视频播放、相机预览等），且不会阻塞用户交互（触摸、键盘输入等）的响应。</p><p>安卓系统上的<strong>绘制表面</strong>是纵深排序（Z-Ordered）的，它默认处在 App 窗口的后面， <code>SurfaceView</code> 通过在 App 窗口上面设置透明区域来展示处在后面的绘制表面。 如果想将绘制表面放置到窗口的最上层，可以通过 <code>setZOrderOnTop()</code> 函数来实现：</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>mySurfaceView<span class="token punctuation">.</span><span class="token function">setZOrderOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="note"><p>这里有必要多解释一句：wgpu 里的 <code>Surface</code> 对象虽然最终指向的就是 SurfaceView 持有的<code>绘制表面</code>，但它是一个经过统一封装的结构体，所以并不是同一个对象：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Surface</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> presentation<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Presentation</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token attribute attr-name">#[cfg(vulkan)]</span>\n    <span class="token keyword">pub</span> vulkan<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">HalSurface</span><span class="token operator">&lt;</span><span class="token namespace">hal<span class="token punctuation">::</span>api<span class="token punctuation">::</span></span><span class="token class-name">Vulkan</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    <span class="token attribute attr-name">#[cfg(metal)]</span>\n    <span class="token keyword">pub</span> metal<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">HalSurface</span><span class="token operator">&lt;</span><span class="token namespace">hal<span class="token punctuation">::</span>api<span class="token punctuation">::</span></span><span class="token class-name">Metal</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    <span class="token attribute attr-name">#[cfg(dx12)]</span>\n    <span class="token keyword">pub</span> dx12<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">HalSurface</span><span class="token operator">&lt;</span><span class="token namespace">hal<span class="token punctuation">::</span>api<span class="token punctuation">::</span></span><span class="token class-name">Dx12</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    <span class="token attribute attr-name">#[cfg(dx11)]</span>\n    <span class="token keyword">pub</span> dx11<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">HalSurface</span><span class="token operator">&lt;</span><span class="token namespace">hal<span class="token punctuation">::</span>api<span class="token punctuation">::</span></span><span class="token class-name">Dx11</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    <span class="token attribute attr-name">#[cfg(gl)]</span>\n    <span class="token keyword">pub</span> gl<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">HalSurface</span><span class="token operator">&lt;</span><span class="token namespace">hal<span class="token punctuation">::</span>api<span class="token punctuation">::</span></span><span class="token class-name">Gles</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>窗口的视图层级结构决定了与<code>绘制表面</code>的正确合成，也就是说，绘制表面的展示会受到视图层级关系的影响，在 <code>SurfaceView</code> 所处层级之上的视图会覆盖（遮挡）在合成后的绘制表面之上。 需要注意的是，如果覆盖内容存在透明度，则每次绘制表面渲染完成后，都会进行一次完整的 <code>alpha</code> 混合合成，这会对性能产生不利影响。</p><p>我们只能通过 <code>SurfaceHolder</code> 接口来访问绘制表面。当 <code>SurfaceView</code> 在窗口中可见时，绘制表面就会被创建，而不可见时（比如，App 被切换到后台运行）绘制表面会被销毁，所以需要实现 <code>SurfaceHolder</code> 的回调接口 <code>surfaceCreated</code> 及 <code>surfaceDestroyed</code> 来发现绘制表面的创建和销毁。 下边的代码实现了一个继承自 <code>SurfaceView</code> 的 <code>WGPUSurfaceView</code>：</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// 为当前类实现 SurfaceHolder 的回调接口</span>\n<span class="token keyword">class</span> WGPUSurfaceView <span class="token operator">:</span> SurfaceView<span class="token punctuation">,</span> SurfaceHolder<span class="token punctuation">.</span><span class="token function">Callback2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">var</span> rustBrige <span class="token operator">=</span> <span class="token function">RustBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// Rust 对象的指针</span>\n    <span class="token keyword">private</span> <span class="token keyword">var</span> wgpuObj<span class="token operator">:</span> Long <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE\n    <span class="token keyword">private</span> <span class="token keyword">var</span> idx<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token comment">//...</span>\n\n    <span class="token keyword">init</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 将当前类设置为 SurfaceHolder 的回调接口代理</span>\n        holder<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 绘制表面被创建后，创建/重新创建 wgpu 对象</span>\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceCreated</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        holder<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> h <span class="token operator">-&gt;</span>\n            wgpuObj <span class="token operator">=</span> rustBrige<span class="token punctuation">.</span><span class="token function">createWgpuCanvas</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>surface<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idx<span class="token punctuation">)</span>\n            <span class="token comment">// SurfaceView 默认不会自动开始绘制，setWillNotDraw(false) 用于通知 App 已经准备好开始绘制了。</span>\n            <span class="token function">setWillNotDraw</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 绘制表面被销毁后，也销毁 wgpu 对象</span>\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceDestroyed</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>wgpuObj <span class="token operator">!=</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            rustBrige<span class="token punctuation">.</span><span class="token function">dropWgpuCanvas</span><span class="token punctuation">(</span>wgpuObj<span class="token punctuation">)</span>\n            wgpuObj <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token operator">:</span> Canvas<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>\n        <span class="token comment">// 考虑到边界情况，这个条件判断不能省略</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>wgpuObj <span class="token operator">==</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        rustBrige<span class="token punctuation">.</span><span class="token function">enterFrame</span><span class="token punctuation">(</span>wgpuObj<span class="token punctuation">)</span>\n        <span class="token comment">// invalidate() 函数通知通知 App，在下一个 UI 刷新周期重新调用 draw() 函数 </span>\n        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-中加载-wgpusurfaceview" tabindex="-1"><a class="header-anchor" href="#app-中加载-wgpusurfaceview" aria-hidden="true">#</a> App 中加载 WGPUSurfaceView</h2>',18),w=(0,p._)("strong",null,"片元",-1),h=(0,p._)("code",null,"WGPUSurfaceView",-1),y={href:"https://developer.android.com/jetpack/compose",target:"_blank",rel:"noopener noreferrer"},_=(0,p.uE)('<div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">ComponentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>\n\n        setContent <span class="token punctuation">{</span>\n            MyApplicationTheme <span class="token punctuation">{</span>\n                <span class="token function">Surface</span><span class="token punctuation">(</span>\n                    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    color <span class="token operator">=</span> <span class="token function">colorResource</span><span class="token punctuation">(</span>id <span class="token operator">=</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>white<span class="token punctuation">)</span>\n                <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">SurfaceCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation builtin">@Composable</span>\n<span class="token keyword">fun</span> <span class="token function">SurfaceCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> screenWidth <span class="token operator">=</span> LocalConfiguration<span class="token punctuation">.</span>current<span class="token punctuation">.</span>screenWidthDp<span class="token punctuation">.</span>dp\n    <span class="token function">Column</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Row</span><span class="token punctuation">(</span>\n            verticalAlignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>CenterVertically<span class="token punctuation">,</span>\n            horizontalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>Center\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;wgpu on Android&quot;</span></span><span class="token punctuation">,</span> fontSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>sp<span class="token punctuation">,</span> fontWeight <span class="token operator">=</span> FontWeight<span class="token punctuation">.</span>Bold<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// ...</span>\n\n        <span class="token comment">// 通过 AndroidView 容器来加载我们的 WGPUSurfaceView</span>\n        <span class="token function">AndroidView</span><span class="token punctuation">(</span>\n            factory <span class="token operator">=</span> <span class="token punctuation">{</span> ctx <span class="token operator">-&gt;</span>\n                <span class="token function">WGPUSurfaceView</span><span class="token punctuation">(</span>context <span class="token operator">=</span> ctx<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            modifier <span class="token operator">=</span> Modifier\n                <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span>screenWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于以上代码，我写了一个叫 wgpu-on-app 的示例程序，效果如下：</p><img src="'+e+'"><div class="github-link"><a href="https://github.com/jinleili/wgpu-on-app" target="_blank" rel="noopener noreferrer"> 查看 wgpu-on-app 完整项目源码！ </a></div>',4),x={},S=(0,a(3744).Z)(x,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)("div",null,[o,(0,p._)("p",null,[(0,p.Uk)("实现 "),c,(0,p.Uk)(" 最为简单, 只需要实例化一个空的 "),l,(0,p.Uk)(" 对象做为参数。查看 raw-window-handle 的源码就会发现，实现 "),i,(0,p.Uk)(" 抽象接口需要用到 "),(0,p._)("a",u,[(0,p.Uk)("AndroidNdkWindowHandle"),(0,p.Wm)(a)]),(0,p.Uk)(" 对象，此对象有一个叫 "),r,(0,p.Uk)(" 的字段，用来指向安卓 App 的 "),d,(0,p.Uk)(" 实例。 下面我们来一步步实现它。")]),k,(0,p._)("p",null,[(0,p.Uk)("实现 "),v,(0,p.Uk)(" 子命令的目的是为了一劳永逸地解决 Rust 项目配置 Android NDK 链接的问题。如果你对如何给 wgpu 项目手动配置 NDK 感兴趣，Mozilla 的"),(0,p._)("a",m,[(0,p.Uk)("这篇文章"),(0,p.Wm)(a)]),(0,p.Uk)("有详细的步骤。 "),b,(0,p.Uk)(" 子命令的代码非常简单，而且我已经将它发布到了 Rust 的包注册网站 "),(0,p._)("a",g,[(0,p.Uk)("crates.io"),(0,p.Wm)(a)]),(0,p.Uk)(", 可以直接安装使用：")]),f,(0,p._)("p",null,[(0,p.Uk)("现在可以在 Activity 或 Fragment（此处仅指安卓 Fragment，与着色器里的"),w,(0,p.Uk)("无关）里加载 "),h,(0,p.Uk)(" 实例了，通过 XML 或者 Java/Kotlin 代码来加载很常见，下面我们来看看在安卓上的新一代 UI 开发框架 "),(0,p._)("a",y,[(0,p.Uk)("Jetpack Compose"),(0,p.Wm)(a)]),(0,p.Uk)(" 中如何加载：")]),_])}]])}}]);