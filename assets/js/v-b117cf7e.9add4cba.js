"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[1182],{9368:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-b117cf7e","path":"/beginner/tutorial1-window/","title":"依赖与窗口","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"我们要使用哪些包?","slug":"我们要使用哪些包","link":"#我们要使用哪些包","children":[]},{"level":2,"title":"使用 Rust 的新版解析器","slug":"使用-rust-的新版解析器","link":"#使用-rust-的新版解析器","children":[]},{"level":2,"title":"关于 env_logger","slug":"关于-env-logger","link":"#关于-env-logger","children":[]},{"level":2,"title":"创建一个新项目","slug":"创建一个新项目","link":"#创建一个新项目","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"添加对 web 的支持","slug":"添加对-web-的支持","link":"#添加对-web-的支持","children":[]},{"level":2,"title":"Web Assembly","slug":"web-assembly","link":"#web-assembly","children":[]},{"level":2,"title":"更多示例代码","slug":"更多示例代码","link":"#更多示例代码","children":[]},{"level":2,"title":"Wasm Pack","slug":"wasm-pack","link":"#wasm-pack","children":[]},{"level":2,"title":"加入 wgpu 微信学习群","slug":"加入-wgpu-微信学习群","link":"#加入-wgpu-微信学习群","children":[]}],"git":{"updatedTime":1663485297000},"filePathRelative":"beginner/tutorial1-window/README.md"}')},2628:(n,s,a)=>{a.r(s),a.d(s,{default:()=>zn});var t=a(6252);const e=(0,t._)("h1",{id:"依赖与窗口",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#依赖与窗口","aria-hidden":"true"},"#"),(0,t.Uk)(" 依赖与窗口")],-1),p=(0,t.Uk)("部分读者可能已经熟悉如何在 Rust 中打开窗口程序，且有自己偏好的窗口"),o=(0,t._)("strong",null,"包",-1),c=(0,t.Uk)("（crate）。但本教程是为所有人设计的，所以不免要涉及这部分的内容。所幸你可以跳过这部分，但有一点值得了解，即无论使用什么样的窗口解决方案，都需要实现 "),l={href:"https://github.com/rust-windowing/raw-window-handle",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("raw-window-handle"),i=(0,t.Uk)(),r=(0,t._)("strong",null,"包",-1),k=(0,t.Uk)("定义的 trait。如果有兴趣自己动手来为 wgpu 实现一个基础的窗口，可以参考 "),d={href:"https://github.com/jinleili/wgpu-on-app",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("wgpu-on-app"),m=(0,t.Uk)("."),g=(0,t.uE)('<h2 id="我们要使用哪些包" tabindex="-1"><a class="header-anchor" href="#我们要使用哪些包" aria-hidden="true">#</a> 我们要使用哪些包?</h2><p>我们将尽量保持基础部分的简单性。后续我们会逐渐添加依赖，先列出相关的 <code>Cargo.toml</code> 依赖项如下：</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">winit</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.26&quot;</span>\n<span class="token key property">env_logger</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.9&quot;</span>\n<span class="token key property">log</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4&quot;</span>\n<span class="token key property">wgpu</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.13&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-rust-的新版解析器" tabindex="-1"><a class="header-anchor" href="#使用-rust-的新版解析器" aria-hidden="true">#</a> 使用 Rust 的新版解析器</h2>',4),b=(0,t.Uk)("自 0.10 版本起，wgpu 需要使用 cargo 的 "),w={href:"https://doc.rust-lang.org/cargo/reference/resolver.html#feature-resolver-version-2",target:"_blank",rel:"noopener noreferrer"},h=(0,t.Uk)("新版特性解析器"),_=(0,t.uE)("，这在 Rust 的 2021 edition（即任何基于 Rust 1.56.0 或更新版本的新项目）中是默认启用的。但如果你仍在使用 2018 edition，那么就需要在单<strong>包</strong>项目 <code>Cargo.toml</code> 的 <code>[package]</code> 配置中，或者在<strong>⼯作空间</strong>的根级 <code>Cargo.toml</code> 的 <code>[workspace]</code> 配置中添加 <code>resolver = &quot;2&quot;</code> 项。",15),f=(0,t.uE)('<h2 id="关于-env-logger" tabindex="-1"><a class="header-anchor" href="#关于-env-logger" aria-hidden="true">#</a> 关于 env_logger</h2><p>通过 <code>env_logger::init()</code> 来启用日志是非常重要的。当 wgpu 遇到各类错误时，它都会用一条通用性的消息抛出 panic，并通过日志<strong>包</strong>来记录实际的错误信息。 也就是说，如果不添加 <code>env_logger::init()</code>，wgpu 将静默地退出，从而令你非常困惑！<br> (下面的代码中已经启用)</p><h2 id="创建一个新项目" tabindex="-1"><a class="header-anchor" href="#创建一个新项目" aria-hidden="true">#</a> 创建一个新项目</h2><p>运行 <code>cargo new xxx</code>，xxx 是指你的项目名称。<br> (下面的例子中我使用了 <code>tutorial1_window</code>)</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><p>这一部分没有什么特别之处，所以直接贴出完整的代码。只需将其粘贴到你的 <code>lib.rs</code> 或类似位置即可：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">winit<span class="token punctuation">::</span></span><span class="token punctuation">{</span>\n    <span class="token namespace">event<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">,</span>\n    <span class="token namespace">event_loop<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">ControlFlow</span><span class="token punctuation">,</span> <span class="token class-name">EventLoop</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token namespace">window<span class="token punctuation">::</span></span><span class="token class-name">WindowBuilder</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> event_loop <span class="token operator">=</span> <span class="token class-name">EventLoop</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token class-name">WindowBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    event_loop<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>event<span class="token punctuation">,</span> _<span class="token punctuation">,</span> control_flow<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">match</span> event <span class="token punctuation">{</span>\n        <span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">WindowEvent</span> <span class="token punctuation">{</span>\n            <span class="token keyword">ref</span> event<span class="token punctuation">,</span>\n            window_id<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span> <span class="token keyword">if</span> window_id <span class="token operator">==</span> window<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> event <span class="token punctuation">{</span>\n            <span class="token class-name">WindowEvent</span><span class="token punctuation">::</span><span class="token class-name">CloseRequested</span>\n            <span class="token operator">|</span> <span class="token class-name">WindowEvent</span><span class="token punctuation">::</span><span class="token class-name">KeyboardInput</span> <span class="token punctuation">{</span>\n                input<span class="token punctuation">:</span>\n                    <span class="token class-name">KeyboardInput</span> <span class="token punctuation">{</span>\n                        state<span class="token punctuation">:</span> <span class="token class-name">ElementState</span><span class="token punctuation">::</span><span class="token class-name">Pressed</span><span class="token punctuation">,</span>\n                        virtual_keycode<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">VirtualKeyCode</span><span class="token punctuation">::</span><span class="token class-name">Escape</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">..</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">..</span>\n            <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token operator">*</span>control_flow <span class="token operator">=</span> <span class="token class-name">ControlFlow</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">,</span>\n            _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码所做的全部工作就是创建了一个窗口，并在用户关闭或按下 escape 键前使其保持打开。接下来，我们需要在 <code>main.rs</code> 中运行这些代码。很简单，只需导入 <code>run()</code>，然后运行!</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">tutorial1_window<span class="token punctuation">::</span></span>run<span class="token punctuation">;</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(其中 <code>tutorial1_window</code> 是你之前用 cargo 创建的项目的名称)</p><p>当你只打算支持桌面环境时，上边这些就是全部所要做的！在下一个教程中，我们将真正开始使用 wgpu！</p><h2 id="添加对-web-的支持" tabindex="-1"><a class="header-anchor" href="#添加对-web-的支持" aria-hidden="true">#</a> 添加对 web 的支持</h2><p>如果讲完了这个关于 WebGPU 的教程，却不提如何在 web 上使用它，那么这个教程就是不完整的。幸运的是，让一个 wgpu 程序在浏览器中运行并不难。</p><p>让我们从修改 <code>Cargo.toml</code> 开始：</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span>\n<span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cdylib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rlib&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这几行告诉 cargo 允许我们的项目<strong>构建</strong>（build)一个本地的 Rust 静态库（rlib）和一个 C/C++ 兼容库（cdylib）。 我们需要 rlib 来在桌面环境中运行 wgpu，需要 cdylib 来构建在浏览器中运行的 Web Assembly。</p><div class="note"><h2 id="web-assembly" tabindex="-1"><a class="header-anchor" href="#web-assembly" aria-hidden="true">#</a> Web Assembly</h2><p>Web Assembly 即 WASM，是大多数现代浏览器支持的二进制格式，它令 Rust 等底层语言能在网页上运行。这允许我们用 Rust 编写应用程序，并使用几行 Javascript 来加载它到 Web 浏览器中运行。</p></div><p>现在，我们仅需添加一些专门用于在 WASM 中运行的依赖项：</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">cfg-if</span> <span class="token punctuation">=</span> <span class="token string">&quot;1&quot;</span>\n<span class="token comment"># 其他常规依赖...</span>\n\n<span class="token punctuation">[</span><span class="token table class-name">target.&#39;cfg(target_arch = &quot;wasm32&quot;)&#39;.dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">console_error_panic_hook</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.6&quot;</span>\n<span class="token key property">console_log</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2.0&quot;</span>\n<span class="token key property">wgpu</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.13&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;webgl&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n<span class="token key property">wasm-bindgen</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2&quot;</span>\n<span class="token key property">wasm-bindgen-futures</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.30&quot;</span>\n<span class="token key property">web-sys</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.3&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;Document&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;Window&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;Element&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',19),y={href:"https://docs.rs/cfg-if",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Uk)("cfg-if"),W=(0,t.Uk)("提供了一个宏，使得更加容易管理特定平台的代码。"),U=(0,t._)("p",null,[(0,t._)("code",null,"[target.'cfg(target_arch = \"wasm32\")'.dependencies]"),(0,t.Uk)(" 行告诉 cargo，如果我们的目标是 wasm32 架构，则只包括这些依赖项。接下来的几个依赖项只是让我们与 javascript 的交互更容易。")],-1),x={href:"https://docs.rs/console_error_panic_hook",target:"_blank",rel:"noopener noreferrer"},E=(0,t.Uk)("console_error_panic_hook"),A=(0,t.Uk)(" 配置 "),S=(0,t._)("code",null,"panic!",-1),C=(0,t.Uk)(" 宏以将错误发送到 javascript 控制台。如果没有这个，当遇到程序崩溃时，你就会对导致崩溃的原因一无所知。"),M={href:"https://docs.rs/console_log",target:"_blank",rel:"noopener noreferrer"},P=(0,t.Uk)("console_log"),j=(0,t.Uk)(" 实现了 "),L={href:"https://docs.rs/log",target:"_blank",rel:"noopener noreferrer"},R=(0,t.Uk)("log"),G=(0,t.Uk)(" API。它将所有日志发送到 javascript 控制台。它还可以配置为仅发送特定级别的日志，这非常适合用于调试。"),I=(0,t.Uk)("当我们想在大多数当前浏览器上运行时，就需要在 wgpu 上启用 "),z=(0,t._)("code",null,"WebGL",-1),D=(0,t.Uk)(" 功能。因为目前只在 Firefox Nightly 和 Chrome Canary 等浏览器的实验版本上才支持直接使用 WebGPU API。"),T=(0,t._)("br",null,null,-1),J=(0,t.Uk)(" 欢迎你在这些浏览器上测试这段代码（wgpu 的开发者也会很感激），但为了简单起见，我打算坚持使用 WebGL 功能，直到 WebGPU API 达到一个更稳定的状态。"),F=(0,t._)("br",null,null,-1),N=(0,t.Uk)(" 如果你想了解更多详细信息，请查看 "),B={href:"https://github.com/gfx-rs/wgpu/wiki/Running-on-the-Web-with-WebGPU-and-WebGL",target:"_blank",rel:"noopener noreferrer"},H=(0,t.Uk)("wgpu 源码仓库"),K=(0,t.Uk)(" 上的 web 编译指南"),V={href:"https://docs.rs/wasm-bindgen",target:"_blank",rel:"noopener noreferrer"},O=(0,t.Uk)("wasm-bindgen"),X=(0,t.Uk)(" 是此列表中最重要的依赖项。它负责生成样板代码，并告诉浏览器如何使用我们的项目。它还允许我们在 Rust 中公开可在 Javascript 中使用的"),Y=(0,t._)("strong",null,"函数",-1),Z=(0,t.Uk)("，反之亦然。"),Q=(0,t._)("br",null,null,-1),$=(0,t.Uk)(" 我不会详细介绍 wasm-bindgen，所以如果你需要入门（或者是复习），请查看"),nn={href:"https://rustwasm.github.io/wasm-bindgen/",target:"_blank",rel:"noopener noreferrer"},sn=(0,t.Uk)("这里"),an={href:"https://docs.rs/web-sys",target:"_blank",rel:"noopener noreferrer"},tn=(0,t.Uk)("web-sys"),en=(0,t.Uk)(" 是一个包含了许多在 javascript 程序中可用的"),pn=(0,t._)("strong",null,"函数",-1),on=(0,t.Uk)("和"),cn=(0,t._)("strong",null,"结构体",-1),ln=(0,t.Uk)("的工具箱，如："),un=(0,t._)("code",null,"get_element_by_id",-1),rn=(0,t.Uk)("、"),kn=(0,t._)("code",null,"append_child",-1),dn=(0,t.Uk)("。"),vn=(0,t._)("code",null,"features = [...]",-1),mn=(0,t.Uk)(" 数组里列出的是我们目前最低限度需要的功能。"),gn=(0,t.uE)('<h2 id="更多示例代码" tabindex="-1"><a class="header-anchor" href="#更多示例代码" aria-hidden="true">#</a> 更多示例代码</h2><p>首先, 我们需要在 <code>lib.rs</code> 内引入 <code>wasm-bindgen</code> :</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg(target_arch=<span class="token string">&quot;wasm32&quot;</span>)]</span>\n<span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，需要告诉 wasm-bindgen 在 WASM 被加载后执行我们的 <code>run()</code> 函数。</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg_attr(target_arch=<span class="token string">&quot;wasm32&quot;</span>, wasm_bindgen(start))]</span>\n<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 省略的代码...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后需要根据是否在 WASM 环境来切换我们正在使用的日志<strong>包</strong>。在 <code>run()</code> 函数内添加以下代码替换 <code>env_logger::init()</code> 行。</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token namespace">cfg_if<span class="token punctuation">::</span></span><span class="token macro property">cfg_if!</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">&quot;wasm32&quot;</span>)]</span> <span class="token punctuation">{</span>\n        <span class="token namespace">std<span class="token punctuation">::</span>panic<span class="token punctuation">::</span></span><span class="token function">set_hook</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">console_error_panic_hook<span class="token punctuation">::</span></span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token namespace">console_log<span class="token punctuation">::</span></span><span class="token function">init_with_level</span><span class="token punctuation">(</span><span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">Level</span><span class="token punctuation">::</span><span class="token class-name">Warn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;无法初始化日志库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token namespace">env_logger<span class="token punctuation">::</span></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的代码判断了<strong>构建</strong>目标，在 web 构建中设置 <code>console_log</code> 和 <code>console_error_panic_hook</code>。这很重要，因为 <code>env_logger</code> 目前不支持 Web Assembly。</p><p>接下来，在创建了事件循环与窗口之后，我们需要在应用程序所在的 HTML 网页中添加一个<strong>画布</strong>（canvas)：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">&quot;wasm32&quot;</span>)]</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Winit 不允许用 CSS 调整大小，所以在 web 环境里我们必须手动设置大小。</span>\n    <span class="token keyword">use</span> <span class="token namespace">winit<span class="token punctuation">::</span>dpi<span class="token punctuation">::</span></span><span class="token class-name">PhysicalSize</span><span class="token punctuation">;</span>\n    window<span class="token punctuation">.</span><span class="token function">set_inner_size</span><span class="token punctuation">(</span><span class="token class-name">PhysicalSize</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">use</span> <span class="token namespace">winit<span class="token punctuation">::</span>platform<span class="token punctuation">::</span>web<span class="token punctuation">::</span></span><span class="token class-name">WindowExtWebSys</span><span class="token punctuation">;</span>\n    <span class="token namespace">web_sys<span class="token punctuation">::</span></span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>win<span class="token closure-punctuation punctuation">|</span></span> win<span class="token punctuation">.</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>doc<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> dst <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">get_element_by_id</span><span class="token punctuation">(</span><span class="token string">&quot;wasm-example&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> canvas <span class="token operator">=</span> <span class="token namespace">web_sys<span class="token punctuation">::</span></span><span class="token class-name">Element</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">canvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            dst<span class="token punctuation">.</span><span class="token function">append_child</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>canvas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;无法将画布添加到网页上&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="note"><p><code>&quot;wasm-example&quot;</code> 这个 ID 是针对我的项目（也就是本教程）的。你可以你在 HTML 中使用任何 ID 来代替，或者，你也可以直接将画布添加到 <code>&lt;body&gt;</code> 中，就像 wgpu 源码仓库中所做的那样，这部分最终由你决定。</p></div><p>上边这些就是我们现在需要的所有 web 专用代码。接下来要做的就是<strong>构建</strong> Web Assembly 本身。</p><h2 id="wasm-pack" tabindex="-1"><a class="header-anchor" href="#wasm-pack" aria-hidden="true">#</a> Wasm Pack</h2><p>你可以只用 wasm-bindgen 来<strong>构建</strong>一个 wgpu 应用程序，但我在这样做的时候遇到了一些问题。首先，你需要在电脑上安装 wasm-bindgen，并将其作为一个依赖项。作为依赖关系的版本<strong>需要</strong>与你安装的版本完全一致，否则构建将会失败。</p>',14),bn=(0,t.Uk)("为了克服这个缺点，并使阅读这篇教程人更容易上手，我选择在组合中加入 "),wn={href:"https://rustwasm.github.io/docs/wasm-pack/",target:"_blank",rel:"noopener noreferrer"},hn=(0,t.Uk)("wasm-pack"),_n=(0,t.Uk)("。wasm-pack 可以为你安装正确的 wasm-bindgen 版本，而且它还支持为不同类型的 web 目标进行"),fn=(0,t._)("strong",null,"构建",-1),yn=(0,t.Uk)("：浏览器、NodeJS 和 webpack 等打包工具。"),qn=(0,t.Uk)("使用 wasm-pack 前，你需要先"),Wn={href:"https://rustwasm.github.io/wasm-pack/installer/",target:"_blank",rel:"noopener noreferrer"},Un=(0,t.Uk)("安装"),xn=(0,t.Uk)("。"),En=(0,t.uE)('<p>完成安装后，就可以用它来<strong>构建</strong>我们的项目了。当你的项目是一个独立的<strong>包</strong>（crate）时，可以直接使用 <code>wasm-pack build</code>。如果是<strong>工作区</strong>（workspace），就必须指定你要构建的包。想象一下<strong>包</strong>是一个名为 <code>game</code> 的目录，你就会使用：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>wasm-pack build game\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦 wasm-pack 完成<strong>构建</strong>，在你的<strong>包</strong>目录下就会有一个 <code>pkg</code> 目录，运行 WASM 代码所需的所有 javascript 代码都在这里。然后在 javascript 中导入 WASM 模块：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./pkg/game.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WASM Loaded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',4),An=(0,t.Uk)("这个网站使用了 "),Sn={href:"https://vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},Cn=(0,t.Uk)("Vuepress"),Mn=(0,t.Uk)("，所以我是在 Vue 组件中加载 WASM。你如何使用 WASM 将取决于你想做什么。如果想看看我是怎么做的，可以查看"),Pn={href:"https://github.com/sotrh/learn-wgpu/blob/master/docs/.vuepress/components/WasmExample.vue",target:"_blank",rel:"noopener noreferrer"},jn=(0,t.Uk)("这里"),Ln=(0,t.Uk)("。"),Rn=(0,t.uE)('<div class="note"><p>如果打算在一个普通的 HTML 网站中使用你的 WASM 模块，只需告诉 wasm-pack 以 web 为构建目标：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>wasm-pack build <span class="token parameter variable">--target</span> web\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就可以在一个 ES6 模块中运行 WASM 代码:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Pong with WASM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token keyword">import</span> init <span class="token keyword">from</span> <span class="token string">&quot;./pkg/pong.js&quot;</span><span class="token punctuation">;</span>\n      <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WASM Loaded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n      <span class="token selector">canvas</span> <span class="token punctuation">{</span>\n          <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>点击下面的按钮查看示例代码运行!</p>',2),Gn=(0,t._)("h2",{id:"加入-wgpu-微信学习群",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#加入-wgpu-微信学习群","aria-hidden":"true"},"#"),(0,t.Uk)(" 加入 wgpu 微信学习群")],-1),In={},zn=(0,a(3744).Z)(In,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon"),In=(0,t.up)("WasmExample"),zn=(0,t.up)("AutoGithubLink"),Dn=(0,t.up)("JoinWeiChatGroup");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[p,o,c,(0,t._)("a",l,[u,(0,t.Wm)(a)]),i,r,k,(0,t._)("a",d,[v,(0,t.Wm)(a)]),m]),g,(0,t._)("p",null,[b,(0,t._)("a",w,[h,(0,t.Wm)(a)]),_]),f,(0,t._)("p",null,[(0,t._)("a",y,[q,(0,t.Wm)(a)]),W]),U,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",x,[E,(0,t.Wm)(a)]),A,S,C]),(0,t._)("li",null,[(0,t._)("a",M,[P,(0,t.Wm)(a)]),j,(0,t._)("a",L,[R,(0,t.Wm)(a)]),G]),(0,t._)("li",null,[I,z,D,T,J,F,N,(0,t._)("a",B,[H,(0,t.Wm)(a)]),K]),(0,t._)("li",null,[(0,t._)("a",V,[O,(0,t.Wm)(a)]),X,Y,Z,Q,$,(0,t._)("a",nn,[sn,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",an,[tn,(0,t.Wm)(a)]),en,pn,on,cn,ln,un,rn,kn,dn,vn,mn])]),gn,(0,t._)("p",null,[bn,(0,t._)("a",wn,[hn,(0,t.Wm)(a)]),_n,fn,yn]),(0,t._)("p",null,[qn,(0,t._)("a",Wn,[Un,(0,t.Wm)(a)]),xn]),En,(0,t._)("p",null,[An,(0,t._)("a",Sn,[Cn,(0,t.Wm)(a)]),Mn,(0,t._)("a",Pn,[jn,(0,t.Wm)(a)]),Ln]),Rn,(0,t.Wm)(In,{example:"tutorial1_window"}),(0,t.Wm)(zn),Gn,(0,t.Wm)(Dn)])}]])}}]);