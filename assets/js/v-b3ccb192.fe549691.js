"use strict";(self.webpackChunklearn_wgpu_zh=self.webpackChunklearn_wgpu_zh||[]).push([[8727],{5732:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-b3ccb192","path":"/showcase/gifs/","title":"生成 GIF 动图","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"如何制作 GIF？","slug":"如何制作-gif","link":"#如何制作-gif","children":[]},{"level":2,"title":"如何生成帧数据？","slug":"如何生成帧数据","link":"#如何生成帧数据","children":[]}],"git":{"updatedTime":1665027712000},"filePathRelative":"showcase/gifs/README.md"}')},4448:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var p=a(6252);const t=a.p+"assets/img/output.4e4eec06.gif",e=(0,p._)("h1",{id:"生成-gif-动图",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#生成-gif-动图","aria-hidden":"true"},"#"),(0,p.Uk)(" 生成 GIF 动图")],-1),o=(0,p._)("p",null,"假如你想要展示一个自己实现的，漂亮的 WebGPU 模拟动画，当然可以录制一个视频，但如果只是想在微博或朋友圈以九宫格来展示呢？",-1),c={href:"https://en.wikipedia.org/wiki/GIF",target:"_blank",rel:"noopener noreferrer"},u={href:"https://en.wikipedia.org/wiki/Jif_%28peanut_butter%29",target:"_blank",rel:"noopener noreferrer"},l={href:"https://filext.com/file-extension/JIF",target:"_blank",rel:"noopener noreferrer"},i=(0,p._)("h2",{id:"如何制作-gif",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#如何制作-gif","aria-hidden":"true"},"#"),(0,p.Uk)(" 如何制作 GIF？")],-1),k={href:"https://docs.rs/gif/",target:"_blank",rel:"noopener noreferrer"},r=(0,p.uE)('<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">save_gif</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> frames<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> speed<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">failure<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token namespace">gif<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Frame</span><span class="token punctuation">,</span> <span class="token class-name">Encoder</span><span class="token punctuation">,</span> <span class="token class-name">Repeat</span><span class="token punctuation">,</span> <span class="token class-name">SetParameter</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">let</span> <span class="token keyword">mut</span> image <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> <span class="token class-name">Encoder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> image<span class="token punctuation">,</span> size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    encoder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Repeat</span><span class="token punctuation">::</span><span class="token class-name">Infinite</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token keyword">mut</span> frame <span class="token keyword">in</span> frames <span class="token punctuation">{</span>\n        encoder<span class="token punctuation">.</span><span class="token function">write_frame</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">Frame</span><span class="token punctuation">::</span><span class="token function">from_rgba_speed</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> frame<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的函数所需要的参数是 GIF 的帧数，它应该运行多快，以及 GIF 的大小。</p><h2 id="如何生成帧数据" tabindex="-1"><a class="header-anchor" href="#如何生成帧数据" aria-hidden="true">#</a> 如何生成帧数据？</h2>',3),d=(0,p._)("strong",null,"纹理",-1),m=(0,p._)("strong",null,"纹素",-1),v=(0,p._)("strong",null,"缓冲区",-1),b=(0,p.uE)('<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// 创建一个用于渲染的纹理</span>\n<span class="token keyword">let</span> texture_size <span class="token operator">=</span> <span class="token number">256u32</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> rt_desc <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDescriptor</span> <span class="token punctuation">{</span>\n    size<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Extent3d</span> <span class="token punctuation">{</span>\n        width<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n        height<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n        depth_or_array_layers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mip_level_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    sample_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    dimension<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureDimension</span><span class="token punctuation">::</span><span class="token constant">D2</span><span class="token punctuation">,</span>\n    format<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureFormat</span><span class="token punctuation">::</span><span class="token class-name">Rgba8UnormSrgb</span><span class="token punctuation">,</span>\n    usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_SRC</span>\n        <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">TextureUsages</span><span class="token punctuation">::</span><span class="token constant">RENDER_ATTACHMENT</span><span class="token punctuation">,</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> render_target <span class="token operator">=</span> <span class="token namespace">framework<span class="token punctuation">::</span></span><span class="token class-name">Texture</span><span class="token punctuation">::</span><span class="token function">from_descriptor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device<span class="token punctuation">,</span> rt_desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// wgpu 需要使用 wgpu::COPY_BYTES_PER_ROW_ALIGNMENT 对齐纹理 -&gt; 缓冲区的复制</span>\n<span class="token comment">// 因此，我们需要同时保存 padded_bytes_per_row 和 unpadded_bytes_per_row</span>\n<span class="token keyword">let</span> pixel_size <span class="token operator">=</span> <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> align <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token constant">COPY_BYTES_PER_ROW_ALIGNMENT</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> unpadded_bytes_per_row <span class="token operator">=</span> pixel_size <span class="token operator">*</span> texture_size<span class="token punctuation">;</span>\n<span class="token keyword">let</span> padding <span class="token operator">=</span> <span class="token punctuation">(</span>align <span class="token operator">-</span> unpadded_bytes_per_row <span class="token operator">%</span> align<span class="token punctuation">)</span> <span class="token operator">%</span> align<span class="token punctuation">;</span>\n<span class="token keyword">let</span> padded_bytes_per_row <span class="token operator">=</span> unpadded_bytes_per_row <span class="token operator">+</span> padding<span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个用于复制纹素数据的缓冲区</span>\n<span class="token keyword">let</span> buffer_size <span class="token operator">=</span> <span class="token punctuation">(</span>padded_bytes_per_row <span class="token operator">*</span> texture_size<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferAddress</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> buffer_desc <span class="token operator">=</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferDescriptor</span> <span class="token punctuation">{</span>\n    size<span class="token punctuation">:</span> buffer_size<span class="token punctuation">,</span>\n    usage<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">COPY_DST</span> <span class="token operator">|</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">BufferUsages</span><span class="token punctuation">::</span><span class="token constant">MAP_READ</span><span class="token punctuation">,</span>\n    label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;Output Buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    mapped_at_creation<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> output_buffer <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_buffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer_desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以渲染一帧了，然后把这个帧缓冲区数据（也就是我们上面创建的纹理的纹素数据）复制到一个 <code>Vec&lt;u8&gt;</code> 数组。</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> frames <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token operator">&amp;</span>colors <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> encoder <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">create_command_encoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">CommandEncoderDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> rpass <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">begin_render_pass</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">RenderPassDescriptor</span> <span class="token punctuation">{</span>\n        label<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">&quot;GIF Pass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        color_attachments<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">RenderPassColorAttachment</span> <span class="token punctuation">{</span>\n                view<span class="token punctuation">:</span> <span class="token operator">&amp;</span>render_target<span class="token punctuation">.</span>view<span class="token punctuation">,</span>\n                resolve_target<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n                ops<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Operations</span> <span class="token punctuation">{</span>\n                    load<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">LoadOp</span><span class="token punctuation">::</span><span class="token class-name">Clear</span><span class="token punctuation">(</span>\n                        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Color</span> <span class="token punctuation">{</span>\n                            r<span class="token punctuation">:</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            g<span class="token punctuation">:</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            b<span class="token punctuation">:</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                            a<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    store<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        depth_stencil_attachment<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    rpass<span class="token punctuation">.</span><span class="token function">set_pipeline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>render_pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rpass<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">drop</span><span class="token punctuation">(</span>rpass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    encoder<span class="token punctuation">.</span><span class="token function">copy_texture_to_buffer</span><span class="token punctuation">(</span>\n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyTexture</span> <span class="token punctuation">{</span>\n            texture<span class="token punctuation">:</span> <span class="token operator">&amp;</span>render_target<span class="token punctuation">.</span>texture<span class="token punctuation">,</span>\n            mip_level<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            origin<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Origin3d</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> \n        <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageCopyBuffer</span> <span class="token punctuation">{</span>\n            buffer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>output_buffer<span class="token punctuation">,</span>\n            layout<span class="token punctuation">:</span> <span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">ImageDataLayout</span> <span class="token punctuation">{</span>\n                offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                bytes_per_row<span class="token punctuation">:</span> padded_bytes_per_row<span class="token punctuation">,</span>\n                rows_per_image<span class="token punctuation">:</span> texture_size<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        render_target<span class="token punctuation">.</span>desc<span class="token punctuation">.</span>size\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    queue<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>iter<span class="token punctuation">::</span></span><span class="token function">once</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 创建一个缓冲区数据异步映射</span>\n    <span class="token keyword">let</span> buffer_slice <span class="token operator">=</span> output_buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> request <span class="token operator">=</span> buffer_slice<span class="token punctuation">.</span><span class="token function">map_async</span><span class="token punctuation">(</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">MapMode</span><span class="token punctuation">::</span><span class="token class-name">Read</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 等待 GPU 完成上面的任务</span>\n    device<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token namespace">wgpu<span class="token punctuation">::</span></span><span class="token class-name">Maintain</span><span class="token punctuation">::</span><span class="token class-name">Wait</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">match</span> result <span class="token punctuation">{</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> padded_data <span class="token operator">=</span> buffer_slice<span class="token punctuation">.</span><span class="token function">get_mapped_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> data <span class="token operator">=</span> padded_data\n                <span class="token punctuation">.</span><span class="token function">chunks</span><span class="token punctuation">(</span>padded_bytes_per_row <span class="token keyword">as</span> _<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>chunk<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span>chunk<span class="token punctuation">[</span><span class="token punctuation">..</span>unpadded_bytes_per_row <span class="token keyword">as</span> _<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token operator">*</span>x <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">drop</span><span class="token punctuation">(</span>padded_data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            output_buffer<span class="token punctuation">.</span><span class="token function">unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            frames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后，就可以将我们的帧数据传递给 <code>save_gif()</code> 函数了：</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token function">save_gif</span><span class="token punctuation">(</span><span class="token string">&quot;output.gif&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> frames<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> texture_size <span class="token keyword">as</span> <span class="token keyword">u16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还可以使用纹理数组来做优化，并一次发送所有绘制命令。 但上面的简单程序就是生成 GIF 动图的全部要点了，运行示例代码将得到以下 GIF 图：</p><p><img src="'+t+'" alt="./output.gif"></p>',7),_={},f=(0,a(3744).Z)(_,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon"),t=(0,p.up)("RouterLink"),_=(0,p.up)("AutoGithubLink");return(0,p.wg)(),(0,p.iD)("div",null,[e,o,(0,p._)("p",null,[(0,p.Uk)("这，就是 "),(0,p._)("a",c,[(0,p.Uk)("GIF"),(0,p.Wm)(a)]),(0,p.Uk)(" 的用武之地。")]),(0,p._)("p",null,[(0,p.Uk)("另外，GIF 的发音是 GHIF，而不是 JIF，因为 JIF 不仅是"),(0,p._)("a",u,[(0,p.Uk)("花生酱"),(0,p.Wm)(a)]),(0,p.Uk)("，它也是一种"),(0,p._)("a",l,[(0,p.Uk)("不同的图像格式"),(0,p.Wm)(a)]),(0,p.Uk)("。")]),i,(0,p._)("p",null,[(0,p.Uk)("我们使用 "),(0,p._)("a",k,[(0,p.Uk)("gif 包"),(0,p.Wm)(a)]),(0,p.Uk)("创建一个函数来对渲染的图像进行编码：")]),r,(0,p._)("p",null,[(0,p.Uk)("如果看过"),(0,p.Wm)(t,{to:"/showcase/gifs/.../windowless/#a-triangle-without-a-window"},{default:(0,p.w5)((()=>[(0,p.Uk)("离屏渲染案例")])),_:1}),(0,p.Uk)("，你就知道我们可以直接渲染到一个"),d,(0,p.Uk)("。我们将创建一个用于渲染的纹理和一个用于复制纹理的"),m,(0,p.Uk)("数据的"),v,(0,p.Uk)("：")]),b,(0,p.Wm)(_)])}]])}}]);