import{_ as e,c as i,o as a,a as d}from"./app.71ba3d0d.js";const n="/learn-wgpu-zh/assets/bevy_in_android.6d8b91d5.png",t="/learn-wgpu-zh/assets/bevy_in_ios.7ff2933b.png",u=JSON.parse('{"title":"在 iOS Adroid App 中集成 Bevy 游戏引擎","description":"","frontmatter":{},"headers":[],"relativePath":"integration-and-debugging/bevy/index.md","lastUpdated":1675500383000}'),r={name:"integration-and-debugging/bevy/index.md"},o=d('<h1 id="在-ios-adroid-app-中集成-bevy-游戏引擎" tabindex="-1">在 iOS Adroid App 中集成 Bevy 游戏引擎 <a class="header-anchor" href="#在-ios-adroid-app-中集成-bevy-游戏引擎" aria-hidden="true">#</a></h1><h2 id="认识-bevy" tabindex="-1">认识 Bevy <a class="header-anchor" href="#认识-bevy" aria-hidden="true">#</a></h2><p><strong>Bevy</strong> 是一个开源、跨平台的 Rust 游戏引擎，旨在提供一个简单、高效和易于使用的游戏开发框架。它具有以下特点：</p><ul><li>模块化设计：Bevy 将游戏引擎的各个组件分解为单独的模块，使您可以选择需要的组件并方便地扩展它们。</li><li>灵活的插件系统：Bevy 支持自定义插件，您可以根据需要创建自己的插件并集成到游戏中。</li><li>易于使用的 API：Bevy 提供了简单、易于理解的 API，使您可以快速开始游戏开发。</li><li>强大的渲染系统：Bevy 使用 wgpu 作为渲染后端，以提供强大的图形渲染能力。</li><li>跨平台：Bevy 不仅支持在 Windows、MacOS 和 Linux 桌面系统上运行，还支持在 iOS 和 Android 移动设备上运行。</li></ul><p>总的来说，Bevy 是一个非常适合新手的游戏引擎，它的简单性和灵活性使您可以轻松地开始游戏开发，并且随着您的经验增加，它也能满足更高级的需求。</p><h2 id="需求场景" tabindex="-1">需求场景 <a class="header-anchor" href="#需求场景" aria-hidden="true">#</a></h2><p>如果需要给已有的 App 添加一个开屏小游戏，或者实现一些动态 UI 组件、图表...，又或者只是想充分利用手机上的 Motion Sensors 来实现令人惊艳的游戏体验，那么就不能使用 Bevy 默认的 <code>WinitPlugin</code> 了。因为 <code>winit</code> 会完全控制 App 的初始化过程和窗口，而我们需要的是在已有的 App 实例中创建 bevy::App， 并且我们可能还希望 bevy::App 能在任意大小的 <code>iOS UIView</code> 或 <code>Android SurfaceView</code> 中运行。</p><p>本章我们将逐步实现一个此类场景，并且利用手机的 Motion Sensor 来玩 breakout 小游戏。</p><h2 id="窗口插件" tabindex="-1">窗口插件 <a class="header-anchor" href="#窗口插件" aria-hidden="true">#</a></h2><div style="display:flex;"><div><img src="'+n+'" alt="Bevy in Android App"></div><div style="width:20px;"></div><div><img src="'+t+'" alt="Bevy in iOS App"></div></div><div class="github-link"><a href="https://github.com/jinleili/bevy-in-app" target="_blank" rel="noopener noreferrer"> 查看 bevy-in-app 完整项目源码！ </a></div>',11),s=[o];function p(c,l,v,h,_,y){return a(),i("div",null,s)}const g=e(r,[["render",p]]);export{u as __pageData,g as default};
