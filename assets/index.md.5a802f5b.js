import{_ as a,c as r,C as n,N as s,o as t,D as o}from"./chunks/framework.4f77cdc0.js";const l="/learn-wgpu-zh/res/firefox.png",p="/learn-wgpu-zh/res/chrome.png",C=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","lastUpdated":1680485228000}'),i={name:"index.md"},c=s(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p><em>为了便于读者的理解，译者选择性的添加了一些内容，并对原文中有歧义或错误的地方进行重新表述。所有的添加与修改均不会做单独标记。</em></p><p><em>翻译时采用了第一人称视角，故，除了带 🆕 标记的章节，教程中的<strong>我</strong>主要指的是原作者 <a href="https://github.com/sotrh" target="_blank" rel="noreferrer">@sorth</a>。</em></p><p><em>另外，专有名词在一个段落中第一次出现时做了<strong>加粗</strong>处理，同一段落里反复出现时就不再加粗。</em></p><h2 id="webgpu-是啥" tabindex="-1">WebGPU 是啥？ <a class="header-anchor" href="#webgpu-是啥" aria-label="Permalink to &quot;WebGPU 是啥？&quot;">​</a></h2><p><strong>WebGPU</strong> 是由 W3C <a href="https://www.w3.org/community/gpu/" target="_blank" rel="noreferrer">GPU for the Web</a> 社区组所发布的规范，目标是允许网页代码以高性能且安全可靠的方式访问 GPU 功能。它通过借鉴 Vulkan API，并将其转换为宿主硬件上使用的各式 API（如 DirectX、Metal、Vulkan）来实现这一目标。</p><h2 id="wgpu-又是啥" tabindex="-1">wgpu 又是啥？ <a class="header-anchor" href="#wgpu-又是啥" aria-label="Permalink to &quot;wgpu 又是啥？&quot;">​</a></h2><p><a href="https://github.com/gfx-rs/wgpu" target="_blank" rel="noreferrer">wgpu</a> 是基于 <a href="https://gpuweb.github.io/gpuweb/" target="_blank" rel="noreferrer">WebGPU API 规范</a>的、跨平台的、安全的、纯 Rust 图形 API。它是 Firefox、Servo 和 Deno 中 WebGPU 整合的核心。</p><p><strong>wgpu</strong> 不仅可以在 Web 环境运行，还可以在 macOS / iOS、Android、Window 和 Linux 等系统上原生运行。</p><h2 id="为什么要使用-rust" tabindex="-1">为什么要使用 Rust？ <a class="header-anchor" href="#为什么要使用-rust" aria-label="Permalink to &quot;为什么要使用 Rust？&quot;">​</a></h2><p>wgpu 实际上提供了 C 语言绑定 (<a href="https://github.com/gfx-rs/wgpu-native" target="_blank" rel="noreferrer">wgpu-native</a>)，你可以写 C/C++ 或其他能与 C 互通的语言来使用它。尽管如此，wgpu 本身是用 Rust 实现的，它便利的 Rust 绑定能减少你使用中的阻碍。更重要的是，Rust 是一门高性能，内存和线程安全且极具生产力的现代底层语言。</p><p>在学习本教程之前你需要先熟悉 Rust，因为这里不会详细介绍 Rust 的语法知识。如果对 Rust 还不太熟悉，可以回顾一下 <a href="https://www.rust-lang.org/zh-CN/learn" target="_blank" rel="noreferrer">Rust 教程</a>或 <a href="https://course.rs/about-book.html" target="_blank" rel="noreferrer">Rust 语言圣经</a>。另外还需要熟悉 Rust 包管理工具 <a href="https://rustwiki.org/zh-CN/cargo/getting-started/index.html" target="_blank" rel="noreferrer">Cargo</a>。</p><h2 id="为什么要学习-wgpu-直接用-js-ts-搞-webgpu-开发不香吗" tabindex="-1">为什么要学习 wgpu，直接用 JS/TS 搞 WebGPU 开发不香吗？ <a class="header-anchor" href="#为什么要学习-wgpu-直接用-js-ts-搞-webgpu-开发不香吗" aria-label="Permalink to &quot;为什么要学习 wgpu，直接用 JS/TS 搞 WebGPU 开发不香吗？&quot;">​</a></h2><p>从 wgpu 及 dawn 这两个主要的 WebGPU 标准的实现库的开发动向可以看出，大量的扩展特性目前只有在 Native 端（Windows、macOS、Linux、iOS、Android）原生运行才能支持。wgpu 更是将 Native 端运行做为首要目标，WebGPU 是做为最低支持的特性集而存在。</p><p>使用 wgpu 在桌面及移动端做跨平台原生应用开发的体验极好，甚至我偏向于认为：<strong>WebGPU 更容易在 Native 端得到普及</strong>。因为不用受限于 1.0 标准啥时候发布，用户的浏览器是否支持等问题，现在就可以发布采用了 wgpu 的商业应用。</p><p>学习 wgpu 还有另一个重要的优势，那就是可以利用各种强大的桌面端 GPU 调试工具。在开发大型 2D/3D 应用时，通过使用命令记录/回放、帧捕捉、Buffer 视图等功能，可以快速定位 GPU 层代码/数据的性能瓶颈和程序缺陷。相较于仅依靠浏览器提供的有限调试能力，这些工具能够事半功倍，帮助开发者更快地解决问题。</p><h2 id="wgpu-webgpu-的学习资料是不是很少" tabindex="-1">wgpu/WebGPU 的学习资料是不是很少？ <a class="header-anchor" href="#wgpu-webgpu-的学习资料是不是很少" aria-label="Permalink to &quot;wgpu/WebGPU 的学习资料是不是很少？&quot;">​</a></h2><p>其实不用纠结于 WebGPU 方面的直接学习资料的多少。</p><p>WebGPU 就是一套图形接口，绝大部分概念都是各图形接口里通用的，任何一本经典图形学书籍都是我们的学习资料。 要利用好这些经典资料，前提仅仅就是要先学习一套图形接口。因为图形学的书不是使用统一的特定图形接口所写，先学会一个图形接口及常见的概念，然后再去深入学习某个方面的资料就会事半功倍。</p><h2 id="现在学习-wgpu-是不是为时尚早" tabindex="-1">现在学习 wgpu 是不是为时尚早？ <a class="header-anchor" href="#现在学习-wgpu-是不是为时尚早" aria-label="Permalink to &quot;现在学习 wgpu 是不是为时尚早？&quot;">​</a></h2><p>虽然 WebGPU 1.0 要到 2023 年年中才会正式发布，但 API 目前已经趋于稳定了，后面的修订更多是内部实现层的完善。</p><h2 id="如何运行示例代码" tabindex="-1">如何运行示例代码 <a class="header-anchor" href="#如何运行示例代码" aria-label="Permalink to &quot;如何运行示例代码&quot;">​</a></h2><p>本教程的示例代码大部分放在 <a href="https://github.com/jinleili/learn-wgpu-zh/tree/master/code" target="_blank" rel="noreferrer"><code>code/</code></a> 目录下，且示例程序的名称与程序目录同名。 比如，第一章 <strong>依赖与窗口</strong> 所有在的目录是 <strong>code/beginner/<code>tutorial1-window</code></strong>, 此示例程序的名称也叫 <code>tutorial1-window</code>:</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 在桌面环境本地运行</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tutorial1-window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 在浏览器中运行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 需要先安装 Rust WebAssembly target</span></span>
<span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm32-unknown-unknown</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用 WebGPU（需要使用 FireFox Nightly 或 Chrome Canary 并开启 WebGPU 试验功能）</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run-wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tutorial1-window</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用 WebGL 2.0</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run-wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tutorial1-window</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--features</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webgl</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>调试与集成</strong> 部分的代码是 2 个独立的项目： <a href="https://github.com/jinleili/wgpu-in-app" target="_blank" rel="noreferrer">wgpu-in-app</a> 和 <a href="https://github.com/jinleili/bevy-in-app" target="_blank" rel="noreferrer">bevy-in-app</a></p><p><a href="https://github.com/jinleili/simuverse" target="_blank" rel="noreferrer"><strong>simuverse</strong></a> 是基于 wgpu + <a href="https://github.com/emilk/egui" target="_blank" rel="noreferrer">egui</a> 的扩展示例，提供了粒子矢量场，流体场及 GPU 程序化纹理的实现。</p><h2 id="如何开启浏览器-webgpu-试验功能" tabindex="-1">如何开启浏览器 WebGPU 试验功能 <a class="header-anchor" href="#如何开启浏览器-webgpu-试验功能" aria-label="Permalink to &quot;如何开启浏览器 WebGPU 试验功能&quot;">​</a></h2><h3 id="firefox" tabindex="-1">FireFox <a class="header-anchor" href="#firefox" aria-label="Permalink to &quot;FireFox&quot;">​</a></h3><p>安装 Nightly 版本，在地址栏中输入 <code>about:config</code> , 将 <code>dom.webgpu.enabled</code> 设置为 <code>true</code>: <img src="`+l+'" alt="FireFox Nightly"></p><h3 id="chrome" tabindex="-1">Chrome <a class="header-anchor" href="#chrome" aria-label="Permalink to &quot;Chrome&quot;">​</a></h3><p>安装 110.0 以上正式版或 Canary 版，在地址栏中输入 <code>chrome://flags</code> , 将 <code>Unsafe WebGPU</code> 设置为 <code>Enabled</code>: <img src="'+p+'" alt="Chrome Canary"></p><h2 id="贡献与支持" tabindex="-1">贡献与支持 <a class="header-anchor" href="#贡献与支持" aria-label="Permalink to &quot;贡献与支持&quot;">​</a></h2><ul><li>原作者接受 PR（<a href="https://github.com/sotrh/learn-wgpu" target="_blank" rel="noreferrer">GitHub repo</a>）以修复本教程的问题，如错别字、错误信息和其他不一致之处。</li><li>如果想直接支持原作者，请查看 <a href="https://www.patreon.com/sotrh" target="_blank" rel="noreferrer">patreon</a>！</li><li>也欢迎对此中译版本提出反馈及改进建议（<a href="https://github.com/jinleili/learn-wgpu-zh" target="_blank" rel="noreferrer">《Learn wgpu》中文版 repo</a>）</li></ul><h2 id="关于译者" tabindex="-1">关于译者 <a class="header-anchor" href="#关于译者" aria-label="Permalink to &quot;关于译者&quot;">​</a></h2><p>我是一名移动端架构师，有多年使用 OpenGL ES / WebGL, Metal 的实践经验。2018 年开始接触 WebGPU，目前正积极地参与到 <a href="https://github.com/gfx-rs/wgpu/commits?author=jinleili" target="_blank" rel="noreferrer">wgpu 开源项目的开发与完善</a>之中，并且已于两年前在 AppStore 上架了基于 wgpu 实现的毛笔书法模拟 App <a href="https://apps.apple.com/cn/app/%E5%AD%97%E4%B9%A0-pro/id1507339788" target="_blank" rel="noreferrer">字习 Pro</a>。</p><h2 id="加入-wgpu-微信学习群交流群" tabindex="-1">加入 wgpu 微信学习群交流群 <a class="header-anchor" href="#加入-wgpu-微信学习群交流群" aria-label="Permalink to &quot;加入 wgpu 微信学习群交流群&quot;">​</a></h2>',36);function u(h,g,b,d,m,w){const e=o("JoinWeiChatGroup");return t(),r("div",null,[c,n(e)])}const y=a(i,[["render",u]]);export{C as __pageData,y as default};
