import{_ as k,C as n,c as t,o as e,j as i,G as l,a1 as r,a}from"./chunks/framework.Ozqerv3m.js";const o=JSON.parse('{"title":"万能动画公式","description":"","frontmatter":{},"headers":[],"relativePath":"intermediate/vertex-animation/universal-animation-formula.md","filePath":"intermediate/vertex-animation/universal-animation-formula.md","lastUpdated":1758607538000}'),E={name:"intermediate/vertex-animation/universal-animation-formula.md"};function d(g,s,y,F,c,u){const h=n("WebGPUExample"),p=n("AutoGithubLink");return e(),t("div",null,[s[0]||(s[0]=i("h1",{id:"万能动画公式",tabindex:"-1"},[a("万能动画公式 "),i("a",{class:"header-anchor",href:"#万能动画公式","aria-label":'Permalink to "万能动画公式"'},"​")],-1)),s[1]||(s[1]=i("p",null,[a("要实现不同形态/形状之间的动态变换，核心算法很简单，就是通过"),i("strong",null,"构造同等数量的顶点/控制点"),a("来实现。")],-1)),s[2]||(s[2]=i("p",null,"在进行动态变换时，通常不同形态或形状之间的顶点数量会不相等。为了使两边的顶点能够一一对应起来，我们可以通过随机或插值的方式来补充顶点。这种方式不会破坏顶点数较少一边的造型，相当于某些点有了分身。通过对对应顶点的插值计算，就能够实现形态的变换。",-1)),s[3]||(s[3]=i("p",null,"此万能动画公式的优点在于它足够简单且通用。无论是对于简单的形状变换还是复杂的动态效果，都可以通过构造同等数量的顶点来实现。而且，运用不同的插值算法，还能灵活地控制形态变换的程度和速度。",-1)),s[4]||(s[4]=i("h2",{id:"示例-hilbert-曲线",tabindex:"-1"},[a("示例：Hilbert 曲线 "),i("a",{class:"header-anchor",href:"#示例-hilbert-曲线","aria-label":'Permalink to "示例：Hilbert 曲线"'},"​")],-1)),l(h,{example:"hilbert_curve",autoLoad:"{true}"}),s[5]||(s[5]=r("",11)),l(p,{customCodePath:"intermediate/hilbert-curve"})])}const m=k(E,[["render",d]]);export{o as __pageData,m as default};
