import{_ as s,o as n,c as a,U as l}from"./chunks/framework.d04c450e.js";const p="/learn-wgpu-zh/assets/lib.a4a41bda.png",e="/learn-wgpu-zh/assets/search.e005d804.png",o="/learn-wgpu-zh/assets/links.b1c5f8bb.png",r="/learn-wgpu-zh/assets/on_ios.6db96077.png",d=JSON.parse('{"title":"与 iOS App 集成","description":"","frontmatter":{},"headers":[],"relativePath":"integration-and-debugging/ios/index.md","filePath":"integration-and-debugging/ios/index.md","lastUpdated":1690100464000}'),c={name:"integration-and-debugging/ios/index.md"},t=l(`<h1 id="与-ios-app-集成" tabindex="-1">与 iOS App 集成 <a class="header-anchor" href="#与-ios-app-集成" aria-label="Permalink to &quot;与 iOS App 集成&quot;">​</a></h1><p>与 iOS App 集成相比于 Android 要简单一些。</p><h2 id="添加-ios-构建目标支持" tabindex="-1">添加 iOS 构建目标支持 <a class="header-anchor" href="#添加-ios-构建目标支持" aria-label="Permalink to &quot;添加 iOS 构建目标支持&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 添加 iOS 构建目标支持</span></span>
<span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aarch64-apple-ios</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 添加 iOS 模拟器构建目标支持</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Intel CPU Mac</span></span>
<span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x86_64-apple-ios</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># M1+ Mac</span></span>
<span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aarch64-apple-ios-sim</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于从 A7 芯片（iPhone 5S，iPad Mini 2） 开始，iPhone iPad 都是 64 位的设备，所以我们不需要 <code>armv7s-apple-ios</code>、 <code>armv7-apple-ios</code> 这两个构建目标。</p><div class="note"><h4 id="ios-模拟器相比于真机设备的特殊之处" tabindex="-1">iOS 模拟器相比于真机设备的特殊之处 <a class="header-anchor" href="#ios-模拟器相比于真机设备的特殊之处" aria-label="Permalink to &quot;iOS 模拟器相比于真机设备的特殊之处&quot;">​</a></h4><p>当运行 WebGPU 程序时，<strong>模拟器</strong>并不会试图完全模拟你正在模拟的 iOS 设备的 GPU。例如，如果选择 iPhone 14 Pro 模拟器，它不会试图模拟 A16 GPU 的能力。相反，模拟器会翻译你的任何调用，并将它们引导到 Mac 主机上的选定 GPU。</p><p>苹果为<strong>模拟器</strong>单独提供了一个设备对象，其功能被限制为苹果 GPU 家族的 Apple2 型号（也就是古早的 A8 芯片），这意味着模拟器往往比实际的 GPU 支持更少的功能或更多的限制。从<a href="https://developer.apple.com/documentation/metal/developing_metal_apps_that_run_in_simulator" target="_blank" rel="noreferrer">这篇文档</a> 可以查看到功能限制的详情。</p><p>开发调试 GPU 应用，使用真机永远是最好的选择。</p></div><h2 id="定义-ffi" tabindex="-1">定义 FFI <a class="header-anchor" href="#定义-ffi" aria-label="Permalink to &quot;定义 FFI&quot;">​</a></h2><p>在 iOS/macOS 上，使用 <code>CAMetalLayer</code> 也能创建<strong>绘制表面</strong>的实例，所以我们无须去实现 <a href="https://github.com/rust-windowing/raw-window-handle" target="_blank" rel="noreferrer">raw-window-handle</a> 抽象接口。</p><p>先给项目添加上必要的依赖：</p><div class="language-toml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">target</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">&#39;cfg(target_os</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">&quot;ios&quot;)&#39;</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">libc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">objc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.2.7</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后定义一个 <code>IOSViewObj</code> 结构体:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">repr</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">C</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IOSViewObj</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // metal_layer 所在的 UIView 容器</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // UIView 有一系列方便的函数可供我们在 Rust 端来调用</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 指向 iOS 端 CAMetalLayer 的指针</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> metal_layer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> c_void</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 不同的 iOS 设备支持不同的屏幕刷新率，有时我们的 GPU 程序需要用到这类信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> maximum_frames</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 外部函数接口，用于给 iOS 端传递状态码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> callback_to_swift</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extern</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>#[repr(C)]</code> 属性标注 <code>IOSViewObj</code> 的内存布局兼容 C-ABI。</p><div class="note"><h4 id="什么是-abi" tabindex="-1">什么是 ABI？ <a class="header-anchor" href="#什么是-abi" aria-label="Permalink to &quot;什么是 ABI？&quot;">​</a></h4><p>ABI 是⼀个规范，它涵盖以下内容： · 调⽤约定。⼀个函数的调⽤过程本质就是参数、函数、返回值如何传递。编译器按照调⽤规则去编译，把数据放到相应的堆栈中，函数的调⽤⽅和被调⽤⽅（函数本⾝）都需要遵循这个统⼀的约定。 · 内存布局。主要是⼤⼩和对齐⽅式。 · 处理器指令集。 · ⽬标⽂件和库的⼆进制格式。</p><h4 id="为什么使用-c-abi" tabindex="-1">为什么使用 C-ABI？ <a class="header-anchor" href="#为什么使用-c-abi" aria-label="Permalink to &quot;为什么使用 C-ABI？&quot;">​</a></h4><p>不同的操作系统、编程语⾔、每种编程语⾔的不同编译器 实现基本都有⾃⼰规定或者遵循的 ABI 和调⽤规范。⽬前只能通过 FFI 技术遵循 C 语⾔ ABI 才可以做到编程语⾔的相互调⽤。也就是说，<strong>C-ABI</strong> 是唯⼀通⽤的稳定的标准 ABI。这是由历史原因决定的，C 语⾔伴随着操作系 统⼀路发展⽽来，导致其成为事实上的标准 ABI。</p></div><p>假设我们已经实现好了一个 wgpu 程序叫 WgpuCanvas, 现在来实现两个供 iOS 端调用的、控制 WgpuCanvas 初始化及帧渲染的函数:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">no_mangle</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_wgpu_canvas</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ios_obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IOSViewObj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">libc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">c_void </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WgpuCanvas</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">AppSurface</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ios_obj</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0_</span><span style="color:#FFCB6B;">i32</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 使用 Box 对 Rust 对象进行装箱操作。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 我们无法将 Rust 对象直接传递给外部语言，通过装箱来传递此对象的裸指针 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> box_obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">into_raw</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">box_obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">libc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">c_void</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">no_mangle</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enter_frame</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">libc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">c_void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将指针转换为其指代的实际 Rust 对象，同时也拿回此对象的内存管理权</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // from_raw 是 unsafe 函数，它的调用需要放在 unsafe {} 块中</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WgpuCanvas</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">unsafe</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from_raw</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enter_frame</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将 obj 对象的内存管理权重新转交给调用方</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">into_raw</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>#[no_mangle]</code> 属性告诉 Rust 关闭函数名称修改功能。如果不加这个属性，Rust 编译器就会修改函数名，这是现代编译器为了解决唯⼀名称解析引起的各种问题所引⼊的技术。如果函数名被修改了，外部编程语言就⽆法按原名称调⽤，开发者也没办法知道修改后的函数名。</p><p>你应该已注意到了，上面的 <code>enter_frame(obj: *mut libc::c_void)</code> 函数里，我们做了两次内存管理权的转移，先是取回了内存管理权，后又再次转交给调用方。有没有办法避免这两次转移来提升性能呢？可以，直接从裸指针获取到对象的可变借用：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">no_mangle</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enter_frame</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">libc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">c_void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 直接获取到指针指代的 Rust 对象的可变借用</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">unsafe</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*(</span><span style="color:#A6ACCD;">obj </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WgpuCanvas</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enter_frame</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="note"><h4 id="unsafe-rust" tabindex="-1">Unsafe Rust <a class="header-anchor" href="#unsafe-rust" aria-label="Permalink to &quot;Unsafe Rust&quot;">​</a></h4><p>Unsafe Rust 是 Safe Rust 的⼀个超集。也就是说，在 <code>unsafe {}</code> 块中，并不会禁⽤ Safe Rust 中的任何安全检查。它仅在进⾏以下五类操作时，不提供安全检查：</p><ul><li><strong>裸指针</strong>的解引⽤或类型转换;</li><li>调⽤ unsafe 的函数;</li><li>访问或修改可变静态变量;</li><li>实现 unsafe trait;</li><li>读写 Union 联合体中的字段;</li></ul><p><code>&amp;mut *(obj as *mut WgpuCanvas)</code> 之所以要放在 <code>unsafe {}</code> 块中，不仅仅是由于 <code>obj</code> 参数是<strong>裸指针</strong>，还因为 Rust 在编译阶段的静态安全检查此时完全没有⽤武之地，所以也就没必要提供安全检查了。</p></div><p>还需要写一个简单的 C 语言的头文件来对应上面定义的结构体与函数。 让我们按照惯例，使用项目编译出来的 <code>.a</code> 库文件名称为此头文件命名：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">libwgpu_on_app_h</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">libwgpu_on_app_h</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdint.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个不透明结构体用来指代 Rust 端的 WgpuCanvas 对象</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wgpu_canvas</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对应 Rust 端的 IOSViewObj 对象</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> ios_view_obj </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// CAMetalLayer</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">metal_layer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> maximum_frames</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">callback_to_swift</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">int32_t</span><span style="color:#F07178;"> arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wgpu_canvas </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">create_wgpu_canvas</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> ios_view_obj </span><span style="color:#A6ACCD;font-style:italic;">object</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enter_frame</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> wgpu_canvas </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span><span style="color:#676E95;font-style:italic;"> /* libwgpu_on_app_h */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>将上面的头文件放置到 iOS 项目中。如果你的 iOS 项目是使用 Swift 创建的，则还需要将头文件引入到<strong>桥接文件</strong>（XXX-Bridging-Header.h）中：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wgpu_test_Bridging_Header_h</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wgpu_test_Bridging_Header_h</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">libwgpu_on_app.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span><span style="color:#676E95;font-style:italic;"> /* wgpu_test_Bridging_Header_h */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="app-中加载-wgpucanvas-对象" tabindex="-1">App 中加载 WgpuCanvas 对象 <a class="header-anchor" href="#app-中加载-wgpucanvas-对象" aria-label="Permalink to &quot;App 中加载 WgpuCanvas 对象&quot;">​</a></h2><p>先在 iOS 项目中自定义一个继承自 UIView 的 <code>MetalView</code>，代码很简单：</p><div class="language-swift line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MetalView</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> UIView </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里将 View 的默认 Layer 指定为 CAMetalLayer</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> layerClass: </span><span style="color:#FFCB6B;">AnyClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> CAMetalLayer.</span><span style="color:#89DDFF;">self</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">awakeFromNib</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        super.</span><span style="color:#82AAFF;">awakeFromNib</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">configLayer</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">configLayer</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">guard</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> layer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.layer </span><span style="color:#89DDFF;">as?</span><span style="color:#A6ACCD;"> CAMetalLayer </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        layer.presentsWithTransaction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">        layer.framebufferOnly </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// nativeScale is real physical pixel scale</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// https://tomisacat.xyz/tech/2017/06/17/scale-nativescale-contentsscale.html</span></span>
<span class="line"><span style="color:#A6ACCD;">        self.contentScaleFactor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> UIScreen.main.nativeScale</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>然后在 ViewController 中实例化 WgpuCanvas：</p><div class="language-swift line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我是通过 StoryBoard 绑定的 MetalView，当然，你也可以手动创建</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">IBOutlet</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> metalV: MetalView</span><span style="color:#89DDFF;">!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 指向 Rust 端 WgpuCanvas 的指针</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> wgpuCanvas: </span><span style="color:#FFCB6B;">OpaquePointer</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#C792EA;">lazy</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> displayLink: CADisplayLink </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    CADisplayLink.</span><span style="color:#C792EA;">init</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> self, </span><span style="color:#82AAFF;">selector</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">#selector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">enterFrame</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">viewDidAppear</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">animated</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Bool</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    super.</span><span style="color:#82AAFF;">viewDidAppear</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">animated</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 我们需要保证 WgpuCanvas 只被实例化一次</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> wgpuCanvas </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 将 Swift 对象转换为裸指针</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> viewPointer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unmanaged</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">passRetained</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self.metalV</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">toOpaque</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> metalLayer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Unmanaged</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">passRetained</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self.metalV.layer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">toOpaque</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> maximumFrames </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> UIScreen.main.maximumFramesPerSecond</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建 IOSViewObj 实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> viewObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ios_view_obj</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> viewPointer, </span><span style="color:#82AAFF;">metal_layer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> metalLayer,</span><span style="color:#82AAFF;">maximum_frames</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int32</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">maximumFrames</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">callback_to_swift</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> callback_to_swift</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建 WgpuCanvas 实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        wgpuCanvas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_wgpu_canvas</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">viewObj</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    self.displayLink.isPaused </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">objc</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enterFrame</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">guard</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> canvas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self.wgpuCanvas </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行 WgpuCanvas 帧渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">enter_frame</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">canvas</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">callback_to_swift</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;font-style:italic;">arg</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Int32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// callback_to_swift 函数是在 WgpuCanvas 中被调用的，WgpuCanvas 的代码很可能没有运行在 iOS 的 UI 线程，</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果此处涉及到 UI 操作，就必须切换到 UI 线程。</span></span>
<span class="line"><span style="color:#A6ACCD;">    DispatchQueue.main.async </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> arg </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="编译与运行" tabindex="-1">编译与运行 <a class="header-anchor" href="#编译与运行" aria-label="Permalink to &quot;编译与运行&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 编译为 iOS 真机支持的库</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># debug 库</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aarch64-apple-ios</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># release 库</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aarch64-apple-ios</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--release</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 编译为 iOS 模拟器支持的库</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># M1+ Mac 上执行：</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aarch64-apple-ios-sim</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Intel 芯片的 Mac 上执行：</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x86_64-apple-ios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>打开 iOS 项目，在项目的 <code>General</code> 选项卡下找到 <code>Frameworks, Libraries, and Embedded Content</code> 栏, 导入系统的 <code>livresolv.tbd</code> 及我们刚编译的 <code>.a</code> 库，此导入只需要操作一次：</p><img src="`+p+'"><p>然后在 <code>Build Settings</code> 选项卡下找到 <code>Search Paths</code> -&gt; <code>Library Search Paths</code> 栏， 将 <code>.a</code> 库的 debug 和 release 路径填到对应的字段中:</p><img src="'+e+'"><p>最后，还是在 <code>Build Settings</code> 选项卡下，找到 <code>Linking</code> -&gt; <code>Other Linker Flags</code> 栏，添加 <code>-ObjC</code>、<code>-lc++</code> 两个链接标记：</p><img src="'+o+'"><div class="note"><p>当 Xcode 版本 &gt;= 13 且 <code>iOS Deployment Target</code> &gt;= 12.0 时，<code>Other Linker Flags</code> 栏的设置可以省略。</p></div><p>以上就是所有的关键代码和步骤了，我写了一个叫 wgpu-in-app 的示例程序，效果如下：</p><img src="'+r+'"><div class="github-link"><a href="https://github.com/jinleili/wgpu-in-app" target="_blank" rel="noopener noreferrer"> 查看 wgpu-in-app 完整项目源码！ </a></div>',41),i=[t];function y(D,C,F,A,b,u){return n(),a("div",null,i)}const g=s(c,[["render",y]]);export{d as __pageData,g as default};
